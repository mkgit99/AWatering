
AWatering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800a848  0800a848  0001a848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b070  0800b070  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b070  0800b070  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b070  0800b070  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001dc  0800b254  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800b254  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fd8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032ab  00000000  00000000  000371e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003a490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e6d  00000000  00000000  0003ca30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001672e  00000000  00000000  0005f89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cafcb  00000000  00000000  00075fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140f96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a24  00000000  00000000  00141014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a830 	.word	0x0800a830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a830 	.word	0x0800a830

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <DWT_Delay_Init+0x58>)
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ca2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ca4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ca6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <DWT_Delay_Init+0x5c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000cb4:	2301      	movs	r3, #1
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000edf0 	.word	0xe000edf0
 8000cc4:	e0001000 	.word	0xe0001000

08000cc8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <delay+0x3c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cd6:	f005 ff91 	bl	8006bfc <HAL_RCC_GetHCLKFreq>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <delay+0x40>)
 8000cde:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000cec:	bf00      	nop
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <delay+0x3c>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3f8      	bcc.n	8000cee <delay+0x26>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	e0001000 	.word	0xe0001000
 8000d08:	431bde83 	.word	0x431bde83

08000d0c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f002 fef8 	bl	8003b30 <HAL_GPIO_Init>
}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 feda 	bl	8003b30 <HAL_GPIO_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DHT_Start>:


void DHT_Start (void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000d88:	f7ff ff6e 	bl	8000c68 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff ffba 	bl	8000d0c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f003 f84f 	bl	8003e44 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000da6:	f244 6050 	movw	r0, #18000	; 0x4650
 8000daa:	f7ff ff8d 	bl	8000cc8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f003 f844 	bl	8003e44 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000dbc:	2014      	movs	r0, #20
 8000dbe:	f7ff ff83 	bl	8000cc8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f7ff ffbd 	bl	8000d48 <Set_Pin_Input>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f7ff ff73 	bl	8000cc8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f003 f813 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d110      	bne.n	8000e16 <DHT_Check_Response+0x44>
	{
		delay (80);
 8000df4:	2050      	movs	r0, #80	; 0x50
 8000df6:	f7ff ff67 	bl	8000cc8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f003 f807 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <DHT_Check_Response+0x40>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	e001      	b.n	8000e16 <DHT_Check_Response+0x44>
		else Response = -1;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000e16:	bf00      	nop
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f002 fff8 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f6      	bne.n	8000e18 <DHT_Check_Response+0x46>

	return Response;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	e03d      	b.n	8000ebc <DHT_Read+0x88>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000e40:	bf00      	nop
 8000e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f002 ffe3 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f6      	beq.n	8000e42 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000e54:	2028      	movs	r0, #40	; 0x28
 8000e56:	f7ff ff37 	bl	8000cc8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f002 ffd7 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10e      	bne.n	8000e8a <DHT_Read+0x56>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2201      	movs	r2, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	b25a      	sxtb	r2, r3
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4013      	ands	r3, r2
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e00b      	b.n	8000ea2 <DHT_Read+0x6e>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	f1c3 0307 	rsb	r3, r3, #7
 8000e90:	2201      	movs	r2, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	b25a      	sxtb	r2, r3
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000ea2:	bf00      	nop
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f002 ffb2 	bl	8003e14 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <DHT_Read+0x70>
	for (j=0;j<8;j++)
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	71bb      	strb	r3, [r7, #6]
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b07      	cmp	r3, #7
 8000ec0:	d9be      	bls.n	8000e40 <DHT_Read+0xc>
	}
	return i;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000ed4:	f7ff ff56 	bl	8000d84 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000ed8:	f7ff ff7b 	bl	8000dd2 <DHT_Check_Response>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <DHT_GetData+0xa4>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000ee4:	f7ff ffa6 	bl	8000e34 <DHT_Read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <DHT_GetData+0xa8>)
 8000eee:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000ef0:	f7ff ffa0 	bl	8000e34 <DHT_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <DHT_GetData+0xac>)
 8000efa:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000efc:	f7ff ff9a 	bl	8000e34 <DHT_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <DHT_GetData+0xb0>)
 8000f06:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000f08:	f7ff ff94 	bl	8000e34 <DHT_Read>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <DHT_GetData+0xb4>)
 8000f12:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000f14:	f7ff ff8e 	bl	8000e34 <DHT_Read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <DHT_GetData+0xb8>)
 8000f1e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <DHT_GetData+0xb8>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <DHT_GetData+0xa8>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <DHT_GetData+0xac>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <DHT_GetData+0xb0>)
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <DHT_GetData+0xb4>)
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d111      	bne.n	8000f66 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <DHT_GetData+0xb0>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <DHT_GetData+0xa8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	20000210 	.word	0x20000210
 8000f78:	20000212 	.word	0x20000212
 8000f7c:	20000211 	.word	0x20000211
 8000f80:	20000216 	.word	0x20000216
 8000f84:	20000214 	.word	0x20000214

08000f88 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70fb      	strb	r3, [r7, #3]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000faa:	2b7f      	cmp	r3, #127	; 0x7f
 8000fac:	f300 8102 	bgt.w	80011b4 <GFX_draw_char+0x22c>
 8000fb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb4:	2b1f      	cmp	r3, #31
 8000fb6:	f300 80fd 	bgt.w	80011b4 <GFX_draw_char+0x22c>
 8000fba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000fbe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	440b      	add	r3, r1
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f2c0 80f0 	blt.w	80011b4 <GFX_draw_char+0x22c>
 8000fd4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f2c0 80e6 	blt.w	80011b4 <GFX_draw_char+0x22c>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e0aa      	b.n	8001144 <GFX_draw_char+0x1bc>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	441a      	add	r2, r3
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a6f      	ldr	r2, [pc, #444]	; (80011bc <GFX_draw_char+0x234>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8001002:	2307      	movs	r3, #7
 8001004:	73bb      	strb	r3, [r7, #14]
 8001006:	e092      	b.n	800112e <GFX_draw_char+0x1a6>
		{
			if(line & 1)
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d040      	beq.n	8001094 <GFX_draw_char+0x10c>
			{
				if(size_x == 1 && size_y == 1)
 8001012:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001016:	2b01      	cmp	r3, #1
 8001018:	d116      	bne.n	8001048 <GFX_draw_char+0xc0>
 800101a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800101e:	2b01      	cmp	r3, #1
 8001020:	d112      	bne.n	8001048 <GFX_draw_char+0xc0>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	b29a      	uxth	r2, r3
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	b218      	sxth	r0, r3
 8001030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001034:	b29a      	uxth	r2, r3
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	b21b      	sxth	r3, r3
 800103e:	883a      	ldrh	r2, [r7, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f000 f9f1 	bl	8001428 <SSD1306_draw_pixel>
 8001046:	e069      	b.n	800111c <GFX_draw_char+0x194>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001052:	b29b      	uxth	r3, r3
 8001054:	fb12 f303 	smulbb	r3, r2, r3
 8001058:	b29a      	uxth	r2, r3
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4413      	add	r3, r2
 800105e:	b29b      	uxth	r3, r3
 8001060:	b218      	sxth	r0, r3
 8001062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001066:	b29a      	uxth	r2, r3
 8001068:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800106c:	b29b      	uxth	r3, r3
 800106e:	fb12 f303 	smulbb	r3, r2, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b219      	sxth	r1, r3
 800107c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001080:	b21a      	sxth	r2, r3
 8001082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001086:	b21c      	sxth	r4, r3
 8001088:	883b      	ldrh	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4623      	mov	r3, r4
 800108e:	f000 f8cf 	bl	8001230 <GFX_draw_fill_rect>
 8001092:	e043      	b.n	800111c <GFX_draw_char+0x194>
				}
			}
			else if(bg != color)
 8001094:	8c3a      	ldrh	r2, [r7, #32]
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d03f      	beq.n	800111c <GFX_draw_char+0x194>
			{
				if(size_x == 1 && size_y == 1)
 800109c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d116      	bne.n	80010d2 <GFX_draw_char+0x14a>
 80010a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d112      	bne.n	80010d2 <GFX_draw_char+0x14a>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80010ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b218      	sxth	r0, r3
 80010ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	8c3a      	ldrh	r2, [r7, #32]
 80010ca:	4619      	mov	r1, r3
 80010cc:	f000 f9ac 	bl	8001428 <SSD1306_draw_pixel>
 80010d0:	e024      	b.n	800111c <GFX_draw_char+0x194>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010dc:	b29b      	uxth	r3, r3
 80010de:	fb12 f303 	smulbb	r3, r2, r3
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b218      	sxth	r0, r3
 80010ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	fb12 f303 	smulbb	r3, r2, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	b29b      	uxth	r3, r3
 8001104:	b219      	sxth	r1, r3
 8001106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800110a:	b21a      	sxth	r2, r3
 800110c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001110:	b21c      	sxth	r4, r3
 8001112:	8c3b      	ldrh	r3, [r7, #32]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f000 f88a 	bl	8001230 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800111c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	73bb      	strb	r3, [r7, #14]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	737b      	strb	r3, [r7, #13]
 800112e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f6bf af68 	bge.w	8001008 <GFX_draw_char+0x80>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001148:	2b04      	cmp	r3, #4
 800114a:	f77f af50 	ble.w	8000fee <GFX_draw_char+0x66>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800114e:	8c3a      	ldrh	r2, [r7, #32]
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d02f      	beq.n	80011b6 <GFX_draw_char+0x22e>
	{
		if(size_x == 1 && size_y == 1)
 8001156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10e      	bne.n	800117c <GFX_draw_char+0x1f4>
 800115e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10a      	bne.n	800117c <GFX_draw_char+0x1f4>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	3305      	adds	r3, #5
 800116a:	b29b      	uxth	r3, r3
 800116c:	b218      	sxth	r0, r3
 800116e:	8c3b      	ldrh	r3, [r7, #32]
 8001170:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001174:	2208      	movs	r2, #8
 8001176:	f000 fac7 	bl	8001708 <SSD1306_draw_fast_vline>
 800117a:	e01c      	b.n	80011b6 <GFX_draw_char+0x22e>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800117c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001180:	b29b      	uxth	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4413      	add	r3, r2
 8001188:	b29a      	uxth	r2, r3
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b29b      	uxth	r3, r3
 8001190:	b218      	sxth	r0, r3
 8001192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001196:	b21a      	sxth	r2, r3
 8001198:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800119c:	b29b      	uxth	r3, r3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b21c      	sxth	r4, r3
 80011a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4623      	mov	r3, r4
 80011ae:	f000 f83f 	bl	8001230 <GFX_draw_fill_rect>
 80011b2:	e000      	b.n	80011b6 <GFX_draw_char+0x22e>
		return;
 80011b4:	bf00      	nop
		}
	}
}
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	0800a8c8 	.word	0x0800a8c8

080011c0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	60ba      	str	r2, [r7, #8]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	81fb      	strh	r3, [r7, #14]
 80011ce:	460b      	mov	r3, r1
 80011d0:	81bb      	strh	r3, [r7, #12]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80011da:	e021      	b.n	8001220 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b218      	sxth	r0, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	88fc      	ldrh	r4, [r7, #6]
 80011ee:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80011f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4623      	mov	r3, r4
 8001204:	f7ff fec0 	bl	8000f88 <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8001208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800120c:	461a      	mov	r2, r3
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b2da      	uxtb	r2, r3
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	4413      	add	r3, r2
 8001218:	75fb      	strb	r3, [r7, #23]
		c++;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3301      	adds	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1d9      	bne.n	80011dc <GFX_draw_string+0x1c>
	}
}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	4603      	mov	r3, r0
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]
 800124a:	4613      	mov	r3, r2
 800124c:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	81fb      	strh	r3, [r7, #14]
 8001252:	e00e      	b.n	8001272 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8001254:	8c3b      	ldrh	r3, [r7, #32]
 8001256:	f9b7 2000 	ldrsh.w	r2, [r7]
 800125a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800125e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001262:	f000 fa51 	bl	8001708 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	b29b      	uxth	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001276:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800127a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800127e:	440b      	add	r3, r1
 8001280:	429a      	cmp	r2, r3
 8001282:	dbe7      	blt.n	8001254 <GFX_draw_fill_rect+0x24>
	}
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}

0800128c <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af04      	add	r7, sp, #16
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	88bb      	ldrh	r3, [r7, #4]
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2178      	movs	r1, #120	; 0x78
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <platform_write+0x34>)
 80012b2:	f002 fe6f 	bl	8003f94 <HAL_I2C_Mem_Write>
	return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002ac 	.word	0x200002ac

080012c4 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	2178      	movs	r1, #120	; 0x78
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <platform_write_dma+0x30>)
 80012e6:	f002 ff69 	bl	80041bc <HAL_I2C_Mem_Write_DMA>
	return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002ac 	.word	0x200002ac

080012f8 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff ffbf 	bl	800128c <platform_write>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <SSD1306_init>:

bool SSD1306_init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 800131e:	2302      	movs	r3, #2
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	238f      	movs	r3, #143	; 0x8f
 8001324:	71bb      	strb	r3, [r7, #6]
 8001326:	2302      	movs	r3, #2
 8001328:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <SSD1306_init+0x10c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10d      	bne.n	800134e <SSD1306_init+0x36>
 8001332:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001336:	f007 fa37 	bl	80087a8 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <SSD1306_init+0x10c>)
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <SSD1306_init+0x10c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <SSD1306_init+0x36>
  {
    return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e065      	b.n	800141a <SSD1306_init+0x102>
  }

  SSD1306_display_clear();
 800134e:	f000 f93f 	bl	80015d0 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8001352:	20ae      	movs	r0, #174	; 0xae
 8001354:	f7ff ffd0 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8001358:	20d5      	movs	r0, #213	; 0xd5
 800135a:	f7ff ffcd 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800135e:	20e0      	movs	r0, #224	; 0xe0
 8001360:	f7ff ffca 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8001364:	20a8      	movs	r0, #168	; 0xa8
 8001366:	f7ff ffc7 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800136a:	201f      	movs	r0, #31
 800136c:	f7ff ffc4 	bl	80012f8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8001370:	20d3      	movs	r0, #211	; 0xd3
 8001372:	f7ff ffc1 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff ffbe 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 800137c:	2040      	movs	r0, #64	; 0x40
 800137e:	f7ff ffbb 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 8001382:	208d      	movs	r0, #141	; 0x8d
 8001384:	f7ff ffb8 	bl	80012f8 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <SSD1306_init+0x7a>
 800138e:	2310      	movs	r3, #16
 8001390:	e000      	b.n	8001394 <SSD1306_init+0x7c>
 8001392:	2314      	movs	r3, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffaf 	bl	80012f8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 800139a:	2020      	movs	r0, #32
 800139c:	f7ff ffac 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff ffa9 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80013a6:	20b0      	movs	r0, #176	; 0xb0
 80013a8:	f7ff ffa6 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80013ac:	20c8      	movs	r0, #200	; 0xc8
 80013ae:	f7ff ffa3 	bl	80012f8 <SSD1306_send_com>


  if((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 32))
  {
    comPins = 0x02;
 80013b2:	2302      	movs	r3, #2
 80013b4:	71fb      	strb	r3, [r7, #7]
    contrast = 0x8F;
 80013b6:	238f      	movs	r3, #143	; 0x8f
 80013b8:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80013ba:	20da      	movs	r0, #218	; 0xda
 80013bc:	f7ff ff9c 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff98 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80013c8:	2081      	movs	r0, #129	; 0x81
 80013ca:	f7ff ff95 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff91 	bl	80012f8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 80013d6:	20d9      	movs	r0, #217	; 0xd9
 80013d8:	f7ff ff8e 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80013dc:	797b      	ldrb	r3, [r7, #5]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <SSD1306_init+0xce>
 80013e2:	2322      	movs	r3, #34	; 0x22
 80013e4:	e000      	b.n	80013e8 <SSD1306_init+0xd0>
 80013e6:	23f1      	movs	r3, #241	; 0xf1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff85 	bl	80012f8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 80013ee:	20db      	movs	r0, #219	; 0xdb
 80013f0:	f7ff ff82 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 80013f4:	2040      	movs	r0, #64	; 0x40
 80013f6:	f7ff ff7f 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 80013fa:	20a4      	movs	r0, #164	; 0xa4
 80013fc:	f7ff ff7c 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8001400:	20a6      	movs	r0, #166	; 0xa6
 8001402:	f7ff ff79 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001406:	202e      	movs	r0, #46	; 0x2e
 8001408:	f7ff ff76 	bl	80012f8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800140c:	20af      	movs	r0, #175	; 0xaf
 800140e:	f7ff ff73 	bl	80012f8 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8001412:	2002      	movs	r0, #2
 8001414:	f000 fb32 	bl	8001a7c <SSD1306_set_rotation>
  return true;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200001fc 	.word	0x200001fc

08001428 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	460b      	mov	r3, r1
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f2c0 80c0 	blt.w	80015c4 <SSD1306_draw_pixel+0x19c>
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	2b7f      	cmp	r3, #127	; 0x7f
 800144a:	f300 80bb 	bgt.w	80015c4 <SSD1306_draw_pixel+0x19c>
 800144e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f2c0 80b6 	blt.w	80015c4 <SSD1306_draw_pixel+0x19c>
 8001458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800145c:	2b1f      	cmp	r3, #31
 800145e:	f300 80b1 	bgt.w	80015c4 <SSD1306_draw_pixel+0x19c>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8001462:	f000 fb1b 	bl	8001a9c <SSD1306_get_rotation>
 8001466:	4603      	mov	r3, r0
 8001468:	2b02      	cmp	r3, #2
 800146a:	d015      	beq.n	8001498 <SSD1306_draw_pixel+0x70>
 800146c:	2b03      	cmp	r3, #3
 800146e:	d01e      	beq.n	80014ae <SSD1306_draw_pixel+0x86>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d12e      	bne.n	80014d2 <SSD1306_draw_pixel+0xaa>
		{
			case 1:
				ssd1306_swap(x, y);
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	4053      	eors	r3, r2
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4053      	eors	r3, r2
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	4053      	eors	r3, r2
 800148a:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001492:	b29b      	uxth	r3, r3
 8001494:	80fb      	strh	r3, [r7, #6]
				break;
 8001496:	e01c      	b.n	80014d2 <SSD1306_draw_pixel+0xaa>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800149e:	b29b      	uxth	r3, r3
 80014a0:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	f1c3 031f 	rsb	r3, r3, #31
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	80bb      	strh	r3, [r7, #4]
				break;
 80014ac:	e011      	b.n	80014d2 <SSD1306_draw_pixel+0xaa>
			case 3:
				ssd1306_swap(x, y);
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	4053      	eors	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	88ba      	ldrh	r2, [r7, #4]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4053      	eors	r3, r2
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	4053      	eors	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	f1c3 031f 	rsb	r3, r3, #31
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	80bb      	strh	r3, [r7, #4]
				break;
 80014d0:	bf00      	nop
		}

		switch (color)
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d004      	beq.n	80014e2 <SSD1306_draw_pixel+0xba>
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d04e      	beq.n	800157a <SSD1306_draw_pixel+0x152>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d025      	beq.n	800152c <SSD1306_draw_pixel+0x104>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
				break;
		}
	}
}
 80014e0:	e070      	b.n	80015c4 <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80014ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da00      	bge.n	80014f4 <SSD1306_draw_pixel+0xcc>
 80014f2:	3307      	adds	r3, #7
 80014f4:	10db      	asrs	r3, r3, #3
 80014f6:	b218      	sxth	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	440b      	add	r3, r1
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25a      	sxtb	r2, r3
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	b25b      	sxtb	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b25c      	sxtb	r4, r3
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800151e:	4602      	mov	r2, r0
 8001520:	01d2      	lsls	r2, r2, #7
 8001522:	440a      	add	r2, r1
 8001524:	4413      	add	r3, r2
 8001526:	b2e2      	uxtb	r2, r4
 8001528:	701a      	strb	r2, [r3, #0]
				break;
 800152a:	e04b      	b.n	80015c4 <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da00      	bge.n	800153e <SSD1306_draw_pixel+0x116>
 800153c:	3307      	adds	r3, #7
 800153e:	10db      	asrs	r3, r3, #3
 8001540:	b218      	sxth	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	01db      	lsls	r3, r3, #7
 8001546:	440b      	add	r3, r1
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	b25b      	sxtb	r3, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4013      	ands	r3, r2
 8001562:	b25c      	sxtb	r4, r3
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800156c:	4602      	mov	r2, r0
 800156e:	01d2      	lsls	r2, r2, #7
 8001570:	440a      	add	r2, r1
 8001572:	4413      	add	r3, r2
 8001574:	b2e2      	uxtb	r2, r4
 8001576:	701a      	strb	r2, [r3, #0]
				break;
 8001578:	e024      	b.n	80015c4 <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da00      	bge.n	800158c <SSD1306_draw_pixel+0x164>
 800158a:	3307      	adds	r3, #7
 800158c:	10db      	asrs	r3, r3, #3
 800158e:	b218      	sxth	r0, r3
 8001590:	4603      	mov	r3, r0
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	440b      	add	r3, r1
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b25a      	sxtb	r2, r3
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	4053      	eors	r3, r2
 80015ac:	b25c      	sxtb	r4, r3
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <SSD1306_draw_pixel+0x1a4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80015b6:	4602      	mov	r2, r0
 80015b8:	01d2      	lsls	r2, r2, #7
 80015ba:	440a      	add	r2, r1
 80015bc:	4413      	add	r3, r2
 80015be:	b2e2      	uxtb	r2, r4
 80015c0:	701a      	strb	r2, [r3, #0]
				break;
 80015c2:	bf00      	nop
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	200001fc 	.word	0x200001fc

080015d0 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SSD1306_display_clear+0x18>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 f8ea 	bl	80087b8 <memset>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200001fc 	.word	0x200001fc

080015ec <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80015ec:	b490      	push	{r4, r7}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	4603      	mov	r3, r0
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 800160a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db73      	blt.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
 8001612:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001616:	2b1f      	cmp	r3, #31
 8001618:	dc6f      	bgt.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
	{
		// Y coord in bounds?
		if (x < 0)
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da06      	bge.n	8001630 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	807b      	strh	r3, [r7, #2]
			x = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8001630:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001634:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001638:	4413      	add	r3, r2
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	dd04      	ble.n	8001648 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001644:	b29b      	uxth	r3, r3
 8001646:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8001648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd54      	ble.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <SSD1306_draw_fast_hline_internal+0x118>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da00      	bge.n	800165e <SSD1306_draw_fast_hline_internal+0x72>
 800165c:	3307      	adds	r3, #7
 800165e:	10db      	asrs	r3, r3, #3
 8001660:	b21b      	sxth	r3, r3
 8001662:	01d9      	lsls	r1, r3, #7
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	440b      	add	r3, r1
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2201      	movs	r2, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	72fb      	strb	r3, [r7, #11]
			switch (color)
 800167c:	883b      	ldrh	r3, [r7, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d00c      	beq.n	800169c <SSD1306_draw_fast_hline_internal+0xb0>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d030      	beq.n	80016e8 <SSD1306_draw_fast_hline_internal+0xfc>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d011      	beq.n	80016ae <SSD1306_draw_fast_hline_internal+0xc2>
					};
					break;
			}
		}
	}
}
 800168a:	e036      	b.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
						*pBuf++ |= mask;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60fa      	str	r2, [r7, #12]
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	7afa      	ldrb	r2, [r7, #11]
 8001696:	430a      	orrs	r2, r1
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]
					while (w--)
 800169c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	3a01      	subs	r2, #1
 80016a4:	b292      	uxth	r2, r2
 80016a6:	807a      	strh	r2, [r7, #2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ef      	bne.n	800168c <SSD1306_draw_fast_hline_internal+0xa0>
					break;
 80016ac:	e025      	b.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
					mask = ~mask;
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	72fb      	strb	r3, [r7, #11]
					while (w--)
 80016b4:	e007      	b.n	80016c6 <SSD1306_draw_fast_hline_internal+0xda>
						*pBuf++ &= mask;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	7819      	ldrb	r1, [r3, #0]
 80016be:	7afa      	ldrb	r2, [r7, #11]
 80016c0:	400a      	ands	r2, r1
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
					while (w--)
 80016c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	3a01      	subs	r2, #1
 80016ce:	b292      	uxth	r2, r2
 80016d0:	807a      	strh	r2, [r7, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ef      	bne.n	80016b6 <SSD1306_draw_fast_hline_internal+0xca>
					break;
 80016d6:	e010      	b.n	80016fa <SSD1306_draw_fast_hline_internal+0x10e>
						*pBuf++ ^= mask;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60fa      	str	r2, [r7, #12]
 80016de:	7819      	ldrb	r1, [r3, #0]
 80016e0:	7afa      	ldrb	r2, [r7, #11]
 80016e2:	404a      	eors	r2, r1
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]
					while (w--)
 80016e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	3a01      	subs	r2, #1
 80016f0:	b292      	uxth	r2, r2
 80016f2:	807a      	strh	r2, [r7, #2]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ef      	bne.n	80016d8 <SSD1306_draw_fast_hline_internal+0xec>
					break;
 80016f8:	bf00      	nop
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc90      	pop	{r4, r7}
 8001702:	4770      	bx	lr
 8001704:	200001fc 	.word	0x200001fc

08001708 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4604      	mov	r4, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	4603      	mov	r3, r0
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 800172a:	f000 f9b7 	bl	8001a9c <SSD1306_get_rotation>
 800172e:	4603      	mov	r3, r0
 8001730:	2b02      	cmp	r3, #2
 8001732:	d01e      	beq.n	8001772 <SSD1306_draw_fast_vline+0x6a>
 8001734:	2b03      	cmp	r3, #3
 8001736:	d02e      	beq.n	8001796 <SSD1306_draw_fast_vline+0x8e>
 8001738:	2b01      	cmp	r3, #1
 800173a:	d140      	bne.n	80017be <SSD1306_draw_fast_vline+0xb6>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	4053      	eors	r3, r2
 8001746:	80fb      	strh	r3, [r7, #6]
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4053      	eors	r3, r2
 800174e:	80bb      	strh	r3, [r7, #4]
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4053      	eors	r3, r2
 8001756:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800175e:	b29b      	uxth	r3, r3
 8001760:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	80fb      	strh	r3, [r7, #6]
  			break;
 8001770:	e025      	b.n	80017be <SSD1306_draw_fast_vline+0xb6>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001778:	b29b      	uxth	r3, r3
 800177a:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	f1c3 031f 	rsb	r3, r3, #31
 8001782:	b29b      	uxth	r3, r3
 8001784:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8001786:	88ba      	ldrh	r2, [r7, #4]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b29b      	uxth	r3, r3
 8001792:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001794:	e013      	b.n	80017be <SSD1306_draw_fast_vline+0xb6>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	4053      	eors	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4053      	eors	r3, r2
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	4053      	eors	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	f1c3 031f 	rsb	r3, r3, #31
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	80bb      	strh	r3, [r7, #4]
  	    	break;
 80017bc:	bf00      	nop
	}

	if (bSwap)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <SSD1306_draw_fast_vline+0xd0>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 80017c4:	883b      	ldrh	r3, [r7, #0]
 80017c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017d2:	f7ff ff0b 	bl	80015ec <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 80017d6:	e008      	b.n	80017ea <SSD1306_draw_fast_vline+0xe2>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 80017d8:	883b      	ldrh	r3, [r7, #0]
 80017da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017e6:	f000 f805 	bl	80017f4 <SSD1306_draw_fast_vline_internal>
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
	...

080017f4 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80017f4:	b490      	push	{r4, r7}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f2c0 80d8 	blt.w	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	2b7f      	cmp	r3, #127	; 0x7f
 8001822:	f300 80d3 	bgt.w	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
	{
		// X coord in bounds?
		if (__y < 0)
 8001826:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	da06      	bge.n	800183c <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 800183c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001844:	4413      	add	r3, r2
 8001846:	2b20      	cmp	r3, #32
 8001848:	dd04      	ble.n	8001854 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	f1c3 0320 	rsb	r3, r3, #32
 8001850:	b29b      	uxth	r3, r3
 8001852:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f340 80b7 	ble.w	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	737b      	strb	r3, [r7, #13]
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <SSD1306_draw_fast_vline_internal+0x1e4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	7b7a      	ldrb	r2, [r7, #13]
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	01d1      	lsls	r1, r2, #7
 8001872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001876:	440a      	add	r2, r1
 8001878:	4413      	add	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d03f      	beq.n	800190a <SSD1306_draw_fast_vline_internal+0x116>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f1c3 0308 	rsb	r3, r3, #8
 8001890:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	4a51      	ldr	r2, [pc, #324]	; (80019dc <SSD1306_draw_fast_vline_internal+0x1e8>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 800189a:	7dfa      	ldrb	r2, [r7, #23]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20b      	bcs.n	80018ba <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	fa42 f303 	asr.w	r3, r2, r3
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 80018ba:	883b      	ldrh	r3, [r7, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d004      	beq.n	80018ca <SSD1306_draw_fast_vline_internal+0xd6>
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d017      	beq.n	80018f4 <SSD1306_draw_fast_vline_internal+0x100>
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <SSD1306_draw_fast_vline_internal+0xe6>
 80018c8:	e01c      	b.n	8001904 <SSD1306_draw_fast_vline_internal+0x110>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	701a      	strb	r2, [r3, #0]
						break;
 80018d8:	e014      	b.n	8001904 <SSD1306_draw_fast_vline_internal+0x110>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4013      	ands	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	701a      	strb	r2, [r3, #0]
						break;
 80018f2:	e007      	b.n	8001904 <SSD1306_draw_fast_vline_internal+0x110>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	4053      	eors	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	701a      	strb	r2, [r3, #0]
						break;
 8001902:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	3380      	adds	r3, #128	; 0x80
 8001908:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	429a      	cmp	r2, r3
 8001910:	d35c      	bcc.n	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
			{
				// More to go?
				h -= mod;
 8001912:	7dfa      	ldrb	r2, [r7, #23]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b07      	cmp	r3, #7
 800191e:	d925      	bls.n	800196c <SSD1306_draw_fast_vline_internal+0x178>
				{
					if (color == SSD1306_INVERSE)
 8001920:	883b      	ldrh	r3, [r7, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d10f      	bne.n	8001946 <SSD1306_draw_fast_vline_internal+0x152>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	43db      	mvns	r3, r3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3380      	adds	r3, #128	; 0x80
 8001936:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	3b08      	subs	r3, #8
 800193c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b07      	cmp	r3, #7
 8001942:	d8f0      	bhi.n	8001926 <SSD1306_draw_fast_vline_internal+0x132>
 8001944:	e012      	b.n	800196c <SSD1306_draw_fast_vline_internal+0x178>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8001946:	883b      	ldrh	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SSD1306_draw_fast_vline_internal+0x15c>
 800194c:	23ff      	movs	r3, #255	; 0xff
 800194e:	e000      	b.n	8001952 <SSD1306_draw_fast_vline_internal+0x15e>
 8001950:	2300      	movs	r3, #0
 8001952:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	7b3a      	ldrb	r2, [r7, #12]
 8001958:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	3380      	adds	r3, #128	; 0x80
 800195e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	3b08      	subs	r3, #8
 8001964:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d8f3      	bhi.n	8001954 <SSD1306_draw_fast_vline_internal+0x160>
					}
				}

				if (h)
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d02c      	beq.n	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <SSD1306_draw_fast_vline_internal+0x1ec>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8001982:	883b      	ldrh	r3, [r7, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d004      	beq.n	8001992 <SSD1306_draw_fast_vline_internal+0x19e>
 8001988:	2b02      	cmp	r3, #2
 800198a:	d017      	beq.n	80019bc <SSD1306_draw_fast_vline_internal+0x1c8>
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <SSD1306_draw_fast_vline_internal+0x1ae>
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001990:	e01c      	b.n	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf |= mask;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	4313      	orrs	r3, r2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	701a      	strb	r2, [r3, #0]
							break;
 80019a0:	e014      	b.n	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf &= ~mask;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25a      	sxtb	r2, r3
 80019a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	701a      	strb	r2, [r3, #0]
							break;
 80019ba:	e007      	b.n	80019cc <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf ^= mask;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	4053      	eors	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	701a      	strb	r2, [r3, #0]
							break;
 80019ca:	bf00      	nop
}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc90      	pop	{r4, r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200001fc 	.word	0x200001fc
 80019dc:	0800adc8 	.word	0x0800adc8
 80019e0:	0800add0 	.word	0x0800add0

080019e4 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 80019ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ee:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 80019f0:	2022      	movs	r0, #34	; 0x22
 80019f2:	f7ff fc81 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fc7e 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80019fc:	20ff      	movs	r0, #255	; 0xff
 80019fe:	f7ff fc7b 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001a02:	2021      	movs	r0, #33	; 0x21
 8001a04:	f7ff fc78 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fc75 	bl	80012f8 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001a0e:	207f      	movs	r0, #127	; 0x7f
 8001a10:	f7ff fc72 	bl	80012f8 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SSD1306_display_repaint+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2040      	movs	r0, #64	; 0x40
 8001a1e:	f7ff fc51 	bl	80012c4 <platform_write_dma>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001fc 	.word	0x200001fc

08001a30 <SSD1306_start_scroll_right>:
            Last row.
    @return None (void).
*/
/* To scroll the whole display, run: display.startscrollright(0x00, 0x0F) */
void SSD1306_start_scroll_right(uint8_t start, uint8_t stop)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
	SSD1306_send_com(SSD1306_RIGHT_HORIZONTAL_SCROLL);
 8001a40:	2026      	movs	r0, #38	; 0x26
 8001a42:	f7ff fc59 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fc56 	bl	80012f8 <SSD1306_send_com>

	SSD1306_send_com(start);
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fc52 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fc4f 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(stop);
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fc4b 	bl	80012f8 <SSD1306_send_com>

	SSD1306_send_com(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fc48 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001a68:	20ff      	movs	r0, #255	; 0xff
 8001a6a:	f7ff fc45 	bl	80012f8 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_ACTIVATE_SCROLL);
 8001a6e:	202f      	movs	r0, #47	; 0x2f
 8001a70:	f7ff fc42 	bl	80012f8 <SSD1306_send_com>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <SSD1306_set_rotation+0x1c>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	7013      	strb	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	20000200 	.word	0x20000200

08001a9c <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	return rotation;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <SSD1306_get_rotation+0x14>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000200 	.word	0x20000200

08001ab4 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <MX_ADC2_Init+0xb8>)
 8001ace:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b12:	2204      	movs	r2, #4
 8001b14:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b22:	4811      	ldr	r0, [pc, #68]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b24:	f000 fe3c 	bl	80027a0 <HAL_ADC_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001b2e:	f000 fbd7 	bl	80022e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_ADC2_Init+0xb4>)
 8001b50:	f001 f942 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001b5a:	f000 fbc1 	bl	80022e0 <Error_Handler>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000218 	.word	0x20000218
 8001b6c:	50000100 	.word	0x50000100

08001b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_ADC_MspInit+0x74>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d124      	bne.n	8001bdc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 ffaa 	bl	8003b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	50000100 	.word	0x50000100
 8001be8:	40021000 	.word	0x40021000

08001bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_DMA_Init+0x38>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <MX_DMA_Init+0x38>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6153      	str	r3, [r2, #20]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_DMA_Init+0x38>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200c      	movs	r0, #12
 8001c10:	f001 fd3d 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c14:	200c      	movs	r0, #12
 8001c16:	f001 fd56 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	6153      	str	r3, [r2, #20]
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6153      	str	r3, [r2, #20]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_GPIO_Init+0xc0>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_WHITE_Pin|GPIO_PIN_15|LD_o_Pin|LD_R_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 4113 	mov.w	r1, #37632	; 0x9300
 8001c8c:	4817      	ldr	r0, [pc, #92]	; (8001cec <MX_GPIO_Init+0xc4>)
 8001c8e:	f002 f8d9 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 f8d2 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PB15 PBPin PBPin */
  GPIO_InitStruct.Pin = LED_WHITE_Pin|GPIO_PIN_15|LD_o_Pin|LD_R_Pin;
 8001ca0:	f44f 4313 	mov.w	r3, #37632	; 0x9300
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_GPIO_Init+0xc4>)
 8001cba:	f001 ff39 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f001 ff29 	bl	8003b30 <HAL_GPIO_Init>

}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000400 	.word	0x48000400

08001cf0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_I2C1_Init+0x78>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001cfc:	f240 220b 	movw	r2, #523	; 0x20b
 8001d00:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d2e:	f002 f8a1 	bl	8003e74 <HAL_I2C_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d38:	f000 fad2 	bl	80022e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d40:	f003 fdd6 	bl	80058f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d4a:	f000 fac9 	bl	80022e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d52:	f003 fe18 	bl	8005986 <HAL_I2CEx_ConfigDigitalFilter>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d5c:	f000 fac0 	bl	80022e0 <Error_Handler>
  }

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200002ac 	.word	0x200002ac
 8001d68:	40005400 	.word	0x40005400

08001d6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <HAL_I2C_MspInit+0x120>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d17a      	bne.n	8001e84 <HAL_I2C_MspInit+0x118>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a3f      	ldr	r2, [pc, #252]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f001 fea7 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df2:	2304      	movs	r3, #4
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4825      	ldr	r0, [pc, #148]	; (8001e94 <HAL_I2C_MspInit+0x128>)
 8001dfe:	f001 fe97 	bl	8003b30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_I2C_MspInit+0x124>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_I2C_MspInit+0x130>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e22:	2210      	movs	r2, #16
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e4c:	4812      	ldr	r0, [pc, #72]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e4e:	f001 fc54 	bl	80036fa <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8001e58:	f000 fa42 	bl	80022e0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH2);
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_I2C_MspInit+0x134>)
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_I2C_MspInit+0x134>)
 8001e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e66:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_I2C_MspInit+0x12c>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	201f      	movs	r0, #31
 8001e7a:	f001 fc08 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e7e:	201f      	movs	r0, #31
 8001e80:	f001 fc21 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e84:	bf00      	nop
 8001e86:	3728      	adds	r7, #40	; 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	20000268 	.word	0x20000268
 8001e9c:	4002001c 	.word	0x4002001c
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea8:	f000 fbf2 	bl	8002690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f000 f822 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f7ff feba 	bl	8001c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb4:	f7ff fe9a 	bl	8001bec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eb8:	f000 fb46 	bl	8002548 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001ebc:	f7ff fdfa 	bl	8001ab4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001ec0:	f000 fad0 	bl	8002464 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001ec4:	f7ff ff14 	bl	8001cf0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_init();
 8001ec8:	f7ff fa26 	bl	8001318 <SSD1306_init>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) buff , sizeof(buff));
 8001ecc:	2206      	movs	r2, #6
 8001ece:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <main+0x44>)
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <main+0x48>)
 8001ed2:	f005 fd7d 	bl	80079d0 <HAL_UART_Receive_IT>
  init_oled();
 8001ed6:	f000 f923 	bl	8002120 <init_oled>
  HAL_TIM_Base_Start_IT(&htim2);
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <main+0x4c>)
 8001edc:	f005 f86c 	bl	8006fb8 <HAL_TIM_Base_Start_IT>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		handle_main();
 8001ee0:	f000 f95c 	bl	800219c <handle_main>
 8001ee4:	e7fc      	b.n	8001ee0 <main+0x3c>
 8001ee6:	bf00      	nop
 8001ee8:	200002fc 	.word	0x200002fc
 8001eec:	200003d8 	.word	0x200003d8
 8001ef0:	2000038c 	.word	0x2000038c

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001efe:	2228      	movs	r2, #40	; 0x28
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 fc58 	bl	80087b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
 8001f26:	615a      	str	r2, [r3, #20]
 8001f28:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f32:	2310      	movs	r3, #16
 8001f34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fd69 	bl	8005a20 <HAL_RCC_OscConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001f54:	f000 f9c4 	bl	80022e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f58:	230f      	movs	r3, #15
 8001f5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fc5b 	bl	8006830 <HAL_RCC_ClockConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001f80:	f000 f9ae 	bl	80022e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8001f84:	23a0      	movs	r3, #160	; 0xa0
 8001f86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f92:	463b      	mov	r3, r7
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fe81 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001fa0:	f000 f99e 	bl	80022e0 <Error_Handler>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3758      	adds	r7, #88	; 0x58
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <watering>:
/* USER CODE BEGIN 4 */

//Funkcja podlewania rośliny.
//Ustawia flagę pompy oraz pin na stan wysoki,
//do którego jest ona podłączona.
void watering(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb8:	4810      	ldr	r0, [pc, #64]	; (8001ffc <watering+0x50>)
 8001fba:	f001 ff43 	bl	8003e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <watering+0x50>)
 8001fc6:	f001 ff3d 	bl	8003e44 <HAL_GPIO_WritePin>
	//Informacja na wyświetlaczu o podlewaniu
	SSD1306_display_clear();
 8001fca:	f7ff fb01 	bl	80015d0 <SSD1306_display_clear>
	SSD1306_display_repaint();
 8001fce:	f7ff fd09 	bl	80019e4 <SSD1306_display_repaint>
	GFX_draw_string(0, 0, (unsigned char*) "WATERING", WHITE, BLACK, 1, 2);
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <watering+0x54>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff f8eb 	bl	80011c0 <GFX_draw_string>
	SSD1306_display_repaint();
 8001fea:	f7ff fcfb 	bl	80019e4 <SSD1306_display_repaint>
	pump_flag = 1;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <watering+0x58>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	48000400 	.word	0x48000400
 8002000:	0800a848 	.word	0x0800a848
 8002004:	200002f8 	.word	0x200002f8

08002008 <measuring>:

//Funkcja wykonująca pomiary, przekształcająca
//wilgotność gleby na procenty oraz wyświetlająca
//wyniki w bluetooth terminal.
void measuring(void) {
 8002008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af04      	add	r7, sp, #16
	//Odczytanie wilgotności gleby z czujnika M335
	HAL_ADC_Start(&hadc2);
 8002010:	4837      	ldr	r0, [pc, #220]	; (80020f0 <measuring+0xe8>)
 8002012:	f000 fd57 	bl	8002ac4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002016:	f04f 31ff 	mov.w	r1, #4294967295
 800201a:	4835      	ldr	r0, [pc, #212]	; (80020f0 <measuring+0xe8>)
 800201c:	f000 fe08 	bl	8002c30 <HAL_ADC_PollForConversion>
	moisture = HAL_ADC_GetValue(&hadc2);
 8002020:	4833      	ldr	r0, [pc, #204]	; (80020f0 <measuring+0xe8>)
 8002022:	f000 fecb 	bl	8002dbc <HAL_ADC_GetValue>
 8002026:	4603      	mov	r3, r0
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <measuring+0xec>)
 800202c:	801a      	strh	r2, [r3, #0]
	//Odczytanie temperatury i wilgotności z czujnika DHT11
	DHT_GetData(&DHT);
 800202e:	4832      	ldr	r0, [pc, #200]	; (80020f8 <measuring+0xf0>)
 8002030:	f7fe ff4c 	bl	8000ecc <DHT_GetData>
	percent_moisture = (1550 / (float) moisture - 0.5) * 100;
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <measuring+0xec>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002040:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80020fc <measuring+0xf4>
 8002044:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002048:	ee16 0a90 	vmov	r0, s13
 800204c:	f7fe fa8c 	bl	8000568 <__aeabi_f2d>
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <measuring+0xf8>)
 8002056:	f7fe f927 	bl	80002a8 <__aeabi_dsub>
 800205a:	4603      	mov	r3, r0
 800205c:	460c      	mov	r4, r1
 800205e:	4618      	mov	r0, r3
 8002060:	4621      	mov	r1, r4
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b27      	ldr	r3, [pc, #156]	; (8002104 <measuring+0xfc>)
 8002068:	f7fe fad6 	bl	8000618 <__aeabi_dmul>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	4618      	mov	r0, r3
 8002072:	4621      	mov	r1, r4
 8002074:	f7fe fda8 	bl	8000bc8 <__aeabi_d2f>
 8002078:	4602      	mov	r2, r0
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <measuring+0x100>)
 800207c:	601a      	str	r2, [r3, #0]
	//Wyświetlanie pomiarów na urządzeniu bluetooth
	sprintf(msg,
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <measuring+0x100>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa70 	bl	8000568 <__aeabi_f2d>
 8002088:	4680      	mov	r8, r0
 800208a:	4689      	mov	r9, r1
			"Moisture = %0.1f%%\r\nTemperature = %0.0f st.C\r\nHumidity = %0.0f%%\r\n\n",
			percent_moisture, DHT.Temperature, DHT.Humidity);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <measuring+0xf0>)
 800208e:	681b      	ldr	r3, [r3, #0]
	sprintf(msg,
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa69 	bl	8000568 <__aeabi_f2d>
 8002096:	4604      	mov	r4, r0
 8002098:	460d      	mov	r5, r1
			percent_moisture, DHT.Temperature, DHT.Humidity);
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <measuring+0xf0>)
 800209c:	685b      	ldr	r3, [r3, #4]
	sprintf(msg,
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa62 	bl	8000568 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020ac:	e9cd 4500 	strd	r4, r5, [sp]
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	4915      	ldr	r1, [pc, #84]	; (800210c <measuring+0x104>)
 80020b6:	4816      	ldr	r0, [pc, #88]	; (8002110 <measuring+0x108>)
 80020b8:	f007 f89a 	bl	80091f0 <siprintf>
	sprintf(msg_oled, "Moisture = %0.1f%%", percent_moisture);
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <measuring+0x100>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa51 	bl	8000568 <__aeabi_f2d>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	461a      	mov	r2, r3
 80020cc:	4623      	mov	r3, r4
 80020ce:	4911      	ldr	r1, [pc, #68]	; (8002114 <measuring+0x10c>)
 80020d0:	4811      	ldr	r0, [pc, #68]	; (8002118 <measuring+0x110>)
 80020d2:	f007 f88d 	bl	80091f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	223c      	movs	r2, #60	; 0x3c
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <measuring+0x108>)
 80020de:	480f      	ldr	r0, [pc, #60]	; (800211c <measuring+0x114>)
 80020e0:	f005 fbe2 	bl	80078a8 <HAL_UART_Transmit>
	handle_oled();
 80020e4:	f000 f840 	bl	8002168 <handle_oled>
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020f0:	20000218 	.word	0x20000218
 80020f4:	20000202 	.word	0x20000202
 80020f8:	20000340 	.word	0x20000340
 80020fc:	44c1c000 	.word	0x44c1c000
 8002100:	3fe00000 	.word	0x3fe00000
 8002104:	40590000 	.word	0x40590000
 8002108:	20000388 	.word	0x20000388
 800210c:	0800a854 	.word	0x0800a854
 8002110:	20000304 	.word	0x20000304
 8002114:	0800a898 	.word	0x0800a898
 8002118:	2000034c 	.word	0x2000034c
 800211c:	200003d8 	.word	0x200003d8

08002120 <init_oled>:

//Funkcja inicjalizująca wyświetlanie informacji na wyświetlaczu
//w momencie uruchomienia płytki
void init_oled(void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af04      	add	r7, sp, #16
	GFX_draw_string(0, 0, (unsigned char*) "Starting", WHITE, BLACK, 1, 2);
 8002126:	2302      	movs	r3, #2
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2301      	movs	r3, #1
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <init_oled+0x44>)
 8002136:	2100      	movs	r1, #0
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff f841 	bl	80011c0 <GFX_draw_string>
	SSD1306_start_scroll_right(0, 20);
 800213e:	2114      	movs	r1, #20
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fc75 	bl	8001a30 <SSD1306_start_scroll_right>
	SSD1306_display_repaint();
 8002146:	f7ff fc4d 	bl	80019e4 <SSD1306_display_repaint>
	HAL_Delay(3000);
 800214a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800214e:	f000 fb05 	bl	800275c <HAL_Delay>
	SSD1306_display_clear();
 8002152:	f7ff fa3d 	bl	80015d0 <SSD1306_display_clear>
	SSD1306_display_repaint();
 8002156:	f7ff fc45 	bl	80019e4 <SSD1306_display_repaint>
	measuring();
 800215a:	f7ff ff55 	bl	8002008 <measuring>
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	0800a8ac 	.word	0x0800a8ac

08002168 <handle_oled>:

//Funkcja wyświetlająca pomiar na wyświetlaczu
void handle_oled(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af04      	add	r7, sp, #16
	GFX_draw_string(0, 0, (char*) msg_oled, WHITE, BLACK, 1, 2);
 800216e:	2302      	movs	r3, #2
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <handle_oled+0x30>)
 800217e:	2100      	movs	r1, #0
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff f81d 	bl	80011c0 <GFX_draw_string>
	SSD1306_start_scroll_right(0, 20);
 8002186:	2114      	movs	r1, #20
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff fc51 	bl	8001a30 <SSD1306_start_scroll_right>
	SSD1306_display_repaint();
 800218e:	f7ff fc29 	bl	80019e4 <SSD1306_display_repaint>
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000034c 	.word	0x2000034c

0800219c <handle_main>:

//Funkcja główna obsługująca timer, pomiary oraz pompę do wody.
//Wyświetla również pomiary w aplikacji terminala bluetooth.
void handle_main(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	//Wykonanie pomiarów, jeśli flaga jest włączona
	if (measure_counter_flag) {
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <handle_main+0x38>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <handle_main+0x34>
		measuring();
 80021a8:	f7ff ff2e 	bl	8002008 <measuring>
		//Podlewanie, gdy wilgotność gleby spadnie poniżej 40%
		if (percent_moisture <= 40) {
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <handle_main+0x3c>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80021dc <handle_main+0x40>
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d801      	bhi.n	80021c4 <handle_main+0x28>
			watering();
 80021c0:	f7ff fef4 	bl	8001fac <watering>
		}
		measure_counter_flag = 0;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <handle_main+0x38>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <handle_main+0x44>)
 80021cc:	f004 fef4 	bl	8006fb8 <HAL_TIM_Base_Start_IT>
	}
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000386 	.word	0x20000386
 80021d8:	20000388 	.word	0x20000388
 80021dc:	42200000 	.word	0x42200000
 80021e0:	2000038c 	.word	0x2000038c

080021e4 <HAL_TIM_PeriodElapsedCallback>:

//Funkcja odpowiedzialna za timer, ustawia flagi w zależności
//od minionej liczby sekund.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d138      	bne.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x84>
		measure_counter++;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002200:	701a      	strb	r2, [r3, #0]

		//Warunek odpowiadający za wykonywanie pomiarów
		//po danym czasie
		if (measure_counter >= 200) {
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2bc7      	cmp	r3, #199	; 0xc7
 8002208:	d908      	bls.n	800221c <HAL_TIM_PeriodElapsedCallback+0x38>
			measure_counter_flag = 1;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
			measure_counter = 0;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f004 ff2a 	bl	8007070 <HAL_TIM_Base_Stop_IT>
		}
		//Warunek odpowiadający za uruchamianie pompy
		//i utrzymywanie jej wysokiego stanu przez dany czas
		if (pump_flag) {
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d021      	beq.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x84>
			pump_counter++;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800222e:	701a      	strb	r2, [r3, #0]
			if (pump_counter >= 1) {
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x84>
				pump_flag = 0;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
				pump_counter = 0;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800224c:	f001 fdfa 	bl	8003e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002256:	480a      	ldr	r0, [pc, #40]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002258:	f001 fdf4 	bl	8003e44 <HAL_GPIO_WritePin>
				SSD1306_display_clear();
 800225c:	f7ff f9b8 	bl	80015d0 <SSD1306_display_clear>
				SSD1306_display_repaint();
 8002260:	f7ff fbc0 	bl	80019e4 <SSD1306_display_repaint>
				handle_oled();
 8002264:	f7ff ff80 	bl	8002168 <handle_oled>
			}
		}
	}
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000348 	.word	0x20000348
 8002274:	20000386 	.word	0x20000386
 8002278:	200002f8 	.word	0x200002f8
 800227c:	20000349 	.word	0x20000349
 8002280:	48000400 	.word	0x48000400

08002284 <HAL_UART_RxCpltCallback>:

//Funkcja ustawiająca flagę, jeśli moduł UART jest gotowy
//na wykonywanie poleceń
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_UART_RxCpltCallback+0x48>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d116      	bne.n	80022c4 <HAL_UART_RxCpltCallback+0x40>
		if (strcmp(buff, "woda\r\n") == 0) {
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_UART_RxCpltCallback+0x4c>)
 8002298:	480e      	ldr	r0, [pc, #56]	; (80022d4 <HAL_UART_RxCpltCallback+0x50>)
 800229a:	f7fd ff99 	bl	80001d0 <strcmp>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x24>
			watering();
 80022a4:	f7ff fe82 	bl	8001fac <watering>
		}
		if (strcmp(buff, "dane\r\n") == 0) {
 80022a8:	490b      	ldr	r1, [pc, #44]	; (80022d8 <HAL_UART_RxCpltCallback+0x54>)
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <HAL_UART_RxCpltCallback+0x50>)
 80022ac:	f7fd ff90 	bl	80001d0 <strcmp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_UART_RxCpltCallback+0x36>
			measuring();
 80022b6:	f7ff fea7 	bl	8002008 <measuring>
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*) buff, sizeof(buff));
 80022ba:	2206      	movs	r2, #6
 80022bc:	4905      	ldr	r1, [pc, #20]	; (80022d4 <HAL_UART_RxCpltCallback+0x50>)
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <HAL_UART_RxCpltCallback+0x58>)
 80022c0:	f005 fb86 	bl	80079d0 <HAL_UART_Receive_IT>
	}
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40004400 	.word	0x40004400
 80022d0:	0800a8b8 	.word	0x0800a8b8
 80022d4:	200002fc 	.word	0x200002fc
 80022d8:	0800a8c0 	.word	0x0800a8c0
 80022dc:	200003d8 	.word	0x200003d8

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <Error_Handler+0x6>

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x44>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_MspInit+0x44>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6193      	str	r3, [r2, #24]
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_MspInit+0x44>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_MspInit+0x44>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_MspInit+0x44>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_MspInit+0x44>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800231e:	2007      	movs	r0, #7
 8002320:	f001 f9aa 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler+0x4>

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f000 f9ce 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel2_IRQHandler+0x10>)
 800238a:	f001 fad3 	bl	8003934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000268 	.word	0x20000268

08002398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM2_IRQHandler+0x10>)
 800239e:	f004 fe96 	bl	80070ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000038c 	.word	0x2000038c

080023ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <I2C1_EV_IRQHandler+0x10>)
 80023b2:	f001 fff9 	bl	80043a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002ac 	.word	0x200002ac

080023c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <USART2_IRQHandler+0x10>)
 80023c6:	f005 fb41 	bl	8007a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200003d8 	.word	0x200003d8

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f006 f9a6 	bl	8008754 <__errno>
 8002408:	4602      	mov	r2, r0
 800240a:	230c      	movs	r3, #12
 800240c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20003000 	.word	0x20003000
 8002434:	00000400 	.word	0x00000400
 8002438:	20000204 	.word	0x20000204
 800243c:	20000468 	.word	0x20000468

08002440 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_TIM2_Init+0x94>)
 8002484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002488:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <MX_TIM2_Init+0x94>)
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_TIM2_Init+0x94>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 216000000-1;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_TIM2_Init+0x94>)
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <MX_TIM2_Init+0x98>)
 800249a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_TIM2_Init+0x94>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_TIM2_Init+0x94>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <MX_TIM2_Init+0x94>)
 80024aa:	f004 fd2d 	bl	8006f08 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024b4:	f7ff ff14 	bl	80022e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <MX_TIM2_Init+0x94>)
 80024c6:	f004 ff21 	bl	800730c <HAL_TIM_ConfigClockSource>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024d0:	f7ff ff06 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_TIM2_Init+0x94>)
 80024e2:	f005 f907 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024ec:	f7ff fef8 	bl	80022e0 <Error_Handler>
  }

}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000038c 	.word	0x2000038c
 80024fc:	0cdfe5ff 	.word	0x0cdfe5ff

08002500 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d113      	bne.n	800253a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_TIM_Base_MspInit+0x44>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_TIM_Base_MspInit+0x44>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_TIM_Base_MspInit+0x44>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	201c      	movs	r0, #28
 8002530:	f001 f8ad 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002534:	201c      	movs	r0, #28
 8002536:	f001 f8c6 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <MX_USART2_UART_Init+0x5c>)
 8002550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_USART2_UART_Init+0x58>)
 800258c:	f005 f93e 	bl	800780c <HAL_UART_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002596:	f7ff fea3 	bl	80022e0 <Error_Handler>
  }

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200003d8 	.word	0x200003d8
 80025a4:	40004400 	.word	0x40004400

080025a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_UART_MspInit+0x8c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d130      	bne.n	800262c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	6153      	str	r3, [r2, #20]
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_UART_MspInit+0x90>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025fa:	230c      	movs	r3, #12
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260a:	2307      	movs	r3, #7
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f001 fa8a 	bl	8003b30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2026      	movs	r0, #38	; 0x26
 8002622:	f001 f834 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002626:	2026      	movs	r0, #38	; 0x26
 8002628:	f001 f84d 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40004400 	.word	0x40004400
 8002638:	40021000 	.word	0x40021000

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	; (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	; (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff feeb 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f006 f879 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7ff fc19 	bl	8001ea4 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002674:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002680:	0800b078 	.word	0x0800b078
  ldr r2, =_sbss
 8002684:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002688:	20000464 	.word	0x20000464

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_Init+0x28>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_Init+0x28>)
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 ffe9 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff fe1c 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000

080026bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f801 	bl	80036e2 <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 ffc9 	bl	800368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	20000008 	.word	0x20000008
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	2000045c 	.word	0x2000045c

08002744 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;  
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000045c 	.word	0x2000045c

0800275c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_Delay+0x40>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000008 	.word	0x20000008

080027a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b09a      	sub	sp, #104	; 0x68
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e172      	b.n	8002aa6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d176      	bne.n	80028c0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d152      	bne.n	8002880 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff f9bb 	bl	8001b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d13b      	bne.n	8002880 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fe05 	bl	8003418 <ADC_Disable>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d12f      	bne.n	8002880 <HAL_ADC_Init+0xe0>
 8002820:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12b      	bne.n	8002880 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002830:	f023 0302 	bic.w	r3, r3, #2
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800285a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800285c:	4b94      	ldr	r3, [pc, #592]	; (8002ab0 <HAL_ADC_Init+0x310>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_ADC_Init+0x314>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9a      	lsrs	r2, r3, #18
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002872:	e002      	b.n	800287a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	3b01      	subs	r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800289c:	d110      	bne.n	80028c0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f023 0312 	bic.w	r3, r3, #18
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 80df 	bne.w	8002a8c <HAL_ADC_Init+0x2ec>
 80028ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80da 	bne.w	8002a8c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80d2 	bne.w	8002a8c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_ADC_Init+0x318>)
 80028fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002904:	d102      	bne.n	800290c <HAL_ADC_Init+0x16c>
 8002906:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_ADC_Init+0x31c>)
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e002      	b.n	8002912 <HAL_ADC_Init+0x172>
 800290c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002910:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_ADC_Init+0x192>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x192>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_ADC_Init+0x194>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11c      	bne.n	8002972 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002938:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_ADC_Init+0x1ba>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADC_Init+0x1ba>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_ADC_Init+0x1bc>
 800295a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e5b      	ldrb	r3, [r3, #25]
 8002976:	035b      	lsls	r3, r3, #13
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800297c:	2a01      	cmp	r2, #1
 800297e:	d002      	beq.n	8002986 <HAL_ADC_Init+0x1e6>
 8002980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002984:	e000      	b.n	8002988 <HAL_ADC_Init+0x1e8>
 8002986:	2200      	movs	r2, #0
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4313      	orrs	r3, r2
 8002996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002998:	4313      	orrs	r3, r2
 800299a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d11b      	bne.n	80029de <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7e5b      	ldrb	r3, [r3, #25]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	045a      	lsls	r2, r3, #17
 80029b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	663b      	str	r3, [r7, #96]	; 0x60
 80029c0:	e00d      	b.n	80029de <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	4313      	orrs	r3, r2
 80029f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029f2:	4313      	orrs	r3, r2
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d114      	bne.n	8002a2e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	f023 0302 	bic.w	r3, r3, #2
 8002a16:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	039a      	lsls	r2, r3, #14
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_ADC_Init+0x320>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10c      	bne.n	8002a64 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f023 010f 	bic.w	r1, r3, #15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
 8002a62:	e007      	b.n	8002a74 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 020f 	bic.w	r2, r2, #15
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8a:	e00a      	b.n	8002aa2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f023 0312 	bic.w	r3, r3, #18
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002aa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3768      	adds	r7, #104	; 0x68
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	50000100 	.word	0x50000100
 8002ac0:	fff0c007 	.word	0xfff0c007

08002ac4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 809c 	bne.w	8002c18 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Start+0x2a>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e097      	b.n	8002c1e <HAL_ADC_Start+0x15a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fc30 	bl	800335c <ADC_Enable>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 8083 	bne.w	8002c0e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <HAL_ADC_Start+0x164>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_Start+0x6e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b30:	d115      	bne.n	8002b5e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d027      	beq.n	8002b9c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_Start+0xba>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_ADC_Start+0x168>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10e      	bne.n	8002b9c <HAL_ADC_Start+0xd8>
 8002b7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f023 0206 	bic.w	r2, r3, #6
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	221c      	movs	r2, #28
 8002bcc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_ADC_Start+0x164>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_ADC_Start+0x138>
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_ADC_Start+0x164>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d00a      	beq.n	8002bfc <HAL_ADC_Start+0x138>
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_ADC_Start+0x164>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2b09      	cmp	r3, #9
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_Start+0x138>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfa:	d10f      	bne.n	8002c1c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0204 	orr.w	r2, r2, #4
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e006      	b.n	8002c1c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	50000300 	.word	0x50000300
 8002c2c:	50000100 	.word	0x50000100

08002c30 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d102      	bne.n	8002c4c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c46:	2308      	movs	r3, #8
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e02e      	b.n	8002caa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_ADC_PollForConversion+0x188>)
 8002c4e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d112      	bne.n	8002c82 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d11d      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e096      	b.n	8002db0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e084      	b.n	8002db0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_ADC_PollForConversion+0x188>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADC_PollForConversion+0x90>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbe:	d104      	bne.n	8002cca <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002cd2:	f7ff fd37 	bl	8002744 <HAL_GetTick>
 8002cd6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cd8:	e01a      	b.n	8002d10 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d016      	beq.n	8002d10 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_ADC_PollForConversion+0xc8>
 8002ce8:	f7ff fd2c 	bl	8002744 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d20b      	bcs.n	8002d10 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e04f      	b.n	8002db0 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0dd      	beq.n	8002cda <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d131      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d12c      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d125      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d112      	bne.n	8002d84 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
 8002d82:	e00b      	b.n	8002d9c <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	50000300 	.word	0x50000300

08002dbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b09b      	sub	sp, #108	; 0x6c
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x22>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e2a5      	b.n	8003346 <HAL_ADC_ConfigChannel+0x56e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 8289 	bne.w	8003324 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d81c      	bhi.n	8002e54 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	231f      	movs	r3, #31
 8002e30:	4093      	lsls	r3, r2
 8002e32:	43db      	mvns	r3, r3
 8002e34:	4019      	ands	r1, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
 8002e52:	e063      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	d81e      	bhi.n	8002e9a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	3b1e      	subs	r3, #30
 8002e70:	221f      	movs	r2, #31
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4019      	ands	r1, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34
 8002e98:	e040      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b0e      	cmp	r3, #14
 8002ea0:	d81e      	bhi.n	8002ee0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	3b3c      	subs	r3, #60	; 0x3c
 8002eb6:	221f      	movs	r2, #31
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4019      	ands	r1, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	3b3c      	subs	r3, #60	; 0x3c
 8002ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ede:	e01d      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	3b5a      	subs	r3, #90	; 0x5a
 8002ef4:	221f      	movs	r2, #31
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4019      	ands	r1, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	3b5a      	subs	r3, #90	; 0x5a
 8002f10:	fa00 f203 	lsl.w	r2, r0, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 80e5 	bne.w	80030f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d91c      	bls.n	8002f6e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	3b1e      	subs	r3, #30
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	4019      	ands	r1, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6898      	ldr	r0, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b1e      	subs	r3, #30
 8002f60:	fa00 f203 	lsl.w	r2, r0, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	e019      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6959      	ldr	r1, [r3, #20]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2207      	movs	r2, #7
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4019      	ands	r1, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6898      	ldr	r0, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d84f      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x28c>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <HAL_ADC_ConfigChannel+0x1f4>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08003021 	.word	0x08003021
 8002fd8:	08003043 	.word	0x08003043
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fe2:	4b9e      	ldr	r3, [pc, #632]	; (800325c <HAL_ADC_ConfigChannel+0x484>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	0691      	lsls	r1, r2, #26
 8002fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ffc:	e07e      	b.n	80030fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003004:	4b95      	ldr	r3, [pc, #596]	; (800325c <HAL_ADC_ConfigChannel+0x484>)
 8003006:	4013      	ands	r3, r2
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	0691      	lsls	r1, r2, #26
 800300e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003010:	430a      	orrs	r2, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800301c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800301e:	e06d      	b.n	80030fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003026:	4b8d      	ldr	r3, [pc, #564]	; (800325c <HAL_ADC_ConfigChannel+0x484>)
 8003028:	4013      	ands	r3, r2
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	0691      	lsls	r1, r2, #26
 8003030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003032:	430a      	orrs	r2, r1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800303e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003040:	e05c      	b.n	80030fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003048:	4b84      	ldr	r3, [pc, #528]	; (800325c <HAL_ADC_ConfigChannel+0x484>)
 800304a:	4013      	ands	r3, r2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	0691      	lsls	r1, r2, #26
 8003052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003054:	430a      	orrs	r2, r1
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003060:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003062:	e04b      	b.n	80030fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	429a      	cmp	r2, r3
 8003076:	d107      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	069b      	lsls	r3, r3, #26
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	069b      	lsls	r3, r3, #26
 80030bc:	429a      	cmp	r2, r3
 80030be:	d107      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	069b      	lsls	r3, r3, #26
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d10a      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030f4:	e001      	b.n	80030fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80030fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_ADC_ConfigChannel+0x344>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x344>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_ADC_ConfigChannel+0x346>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 810b 	bne.w	800333a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d00f      	beq.n	800314c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800314a:	e049      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b09      	cmp	r3, #9
 800316c:	d91c      	bls.n	80031a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6999      	ldr	r1, [r3, #24]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	3b1b      	subs	r3, #27
 8003180:	2207      	movs	r2, #7
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	4019      	ands	r1, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6898      	ldr	r0, [r3, #8]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	3b1b      	subs	r3, #27
 800319a:	fa00 f203 	lsl.w	r2, r0, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	619a      	str	r2, [r3, #24]
 80031a6:	e01b      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6959      	ldr	r1, [r3, #20]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	2207      	movs	r2, #7
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	4019      	ands	r1, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6898      	ldr	r0, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_ADC_ConfigChannel+0x488>)
 80031e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031fc:	2b11      	cmp	r3, #17
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003210:	2b12      	cmp	r3, #18
 8003212:	f040 8092 	bne.w	800333a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 808b 	bne.w	800333a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d102      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x45c>
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_ADC_ConfigChannel+0x48c>)
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e002      	b.n	800323a <HAL_ADC_ConfigChannel+0x462>
 8003234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003238:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10f      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x490>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x490>
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <HAL_ADC_ConfigChannel+0x492>
 800325a:	bf00      	nop
 800325c:	83fff000 	.word	0x83fff000
 8003260:	50000300 	.word	0x50000300
 8003264:	50000100 	.word	0x50000100
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d150      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800326e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x4b8>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x4b8>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_ADC_ConfigChannel+0x4ba>
 8003290:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d13c      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d11d      	bne.n	80032da <HAL_ADC_ConfigChannel+0x502>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a6:	d118      	bne.n	80032da <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_ADC_ConfigChannel+0x57c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a27      	ldr	r2, [pc, #156]	; (8003358 <HAL_ADC_ConfigChannel+0x580>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9a      	lsrs	r2, r3, #18
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ca:	e002      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032d8:	e02e      	b.n	8003338 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d10b      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x522>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80032ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032f8:	e01e      	b.n	8003338 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b12      	cmp	r3, #18
 8003300:	d11a      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800330a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800330e:	e013      	b.n	8003338 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003322:	e00a      	b.n	800333a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003336:	e000      	b.n	800333a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003338:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003346:	4618      	mov	r0, r3
 8003348:	376c      	adds	r7, #108	; 0x6c
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000
 8003358:	431bde83 	.word	0x431bde83

0800335c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <ADC_Enable+0x2c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <ADC_Enable+0x2c>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <ADC_Enable+0x2e>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d13c      	bne.n	8003408 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <ADC_Enable+0xb8>)
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e028      	b.n	800340a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033c8:	f7ff f9bc 	bl	8002744 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ce:	e014      	b.n	80033fa <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d0:	f7ff f9b8 	bl	8002744 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d90d      	bls.n	80033fa <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e007      	b.n	800340a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d1e3      	bne.n	80033d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	8000003f 	.word	0x8000003f

08003418 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <ADC_Disable+0x2c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <ADC_Disable+0x2c>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <ADC_Disable+0x2e>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d040      	beq.n	80034cc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030d 	and.w	r3, r3, #13
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10f      	bne.n	8003478 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0202 	orr.w	r2, r2, #2
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2203      	movs	r2, #3
 800346e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003470:	f7ff f968 	bl	8002744 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003476:	e022      	b.n	80034be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01c      	b.n	80034ce <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003494:	f7ff f956 	bl	8002744 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d90d      	bls.n	80034be <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e007      	b.n	80034ce <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d0e3      	beq.n	8003494 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f4:	4013      	ands	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	60d3      	str	r3, [r2, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <__NVIC_GetPriorityGrouping+0x18>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 0307 	and.w	r3, r3, #7
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	2b00      	cmp	r3, #0
 800354c:	db0b      	blt.n	8003566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <__NVIC_EnableIRQ+0x38>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2001      	movs	r0, #1
 800355e:	fa00 f202 	lsl.w	r2, r0, r2
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000e100 	.word	0xe000e100

08003578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	490c      	ldr	r1, [pc, #48]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3b04      	subs	r3, #4
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f1c3 0307 	rsb	r3, r3, #7
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	bf28      	it	cs
 80035ea:	2304      	movcs	r3, #4
 80035ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d902      	bls.n	80035fc <NVIC_EncodePriority+0x30>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3b03      	subs	r3, #3
 80035fa:	e000      	b.n	80035fe <NVIC_EncodePriority+0x32>
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	401a      	ands	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003614:	f04f 31ff 	mov.w	r1, #4294967295
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43d9      	mvns	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	4313      	orrs	r3, r2
         );
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003644:	d301      	bcc.n	800364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003646:	2301      	movs	r3, #1
 8003648:	e00f      	b.n	800366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <SysTick_Config+0x40>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003652:	210f      	movs	r1, #15
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f7ff ff8e 	bl	8003578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SysTick_Config+0x40>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SysTick_Config+0x40>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff29 	bl	80034d8 <__NVIC_SetPriorityGrouping>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff3e 	bl	8003520 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff8e 	bl	80035cc <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5d 	bl	8003578 <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff31 	bl	800353c <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa2 	bl	8003634 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e037      	b.n	8003780 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003726:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800372a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9c4 	bl	8003af0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}  
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_DMA_Start_IT+0x20>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e04a      	b.n	800383e <HAL_DMA_Start_IT+0xb6>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d13a      	bne.n	8003830 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f958 	bl	8003a94 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 020e 	orr.w	r2, r2, #14
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e00f      	b.n	800381e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 020a 	orr.w	r2, r2, #10
 800380c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0204 	bic.w	r2, r2, #4
 800381c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e005      	b.n	800383c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800383c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003854:	2b02      	cmp	r3, #2
 8003856:	d008      	beq.n	800386a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e020      	b.n	80038ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 020e 	bic.w	r2, r2, #14
 8003878:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d005      	beq.n	80038da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e027      	b.n	800392a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 020e 	bic.w	r2, r2, #14
 80038e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
    } 
  }
  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2204      	movs	r2, #4
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d024      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x72>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01f      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	2104      	movs	r1, #4
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d06a      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	e065      	b.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2202      	movs	r2, #2
 80039ac:	409a      	lsls	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xdc>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 020a 	bic.w	r2, r2, #10
 80039dc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2102      	movs	r1, #2
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d035      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a0e:	e030      	b.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2208      	movs	r2, #8
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d028      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 020e 	bic.w	r2, r2, #14
 8003a38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f202 	lsl.w	r2, r1, r2
 8003a48:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
    }
  }
}  
 8003a70:	e7ff      	b.n	8003a72 <HAL_DMA_IRQHandler+0x13e>
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d108      	bne.n	8003ad4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ad2:	e007      	b.n	8003ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <DMA_CalcBaseAndBitshift+0x34>)
 8003b00:	4413      	add	r3, r2
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <DMA_CalcBaseAndBitshift+0x38>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <DMA_CalcBaseAndBitshift+0x3c>)
 8003b14:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	bffdfff8 	.word	0xbffdfff8
 8003b28:	cccccccd 	.word	0xcccccccd
 8003b2c:	40020000 	.word	0x40020000

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b3e:	e14e      	b.n	8003dde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8140 	beq.w	8003dd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d00b      	beq.n	8003b78 <HAL_GPIO_Init+0x48>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d007      	beq.n	8003b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6c:	2b11      	cmp	r3, #17
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b12      	cmp	r3, #18
 8003b76:	d130      	bne.n	8003bda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bae:	2201      	movs	r2, #1
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0201 	and.w	r2, r3, #1
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	2203      	movs	r2, #3
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0xea>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b12      	cmp	r3, #18
 8003c18:	d123      	bne.n	8003c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	08da      	lsrs	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3208      	adds	r2, #8
 8003c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	220f      	movs	r2, #15
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	6939      	ldr	r1, [r7, #16]
 8003c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 809a 	beq.w	8003dd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca4:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <HAL_GPIO_Init+0x2cc>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a54      	ldr	r2, [pc, #336]	; (8003dfc <HAL_GPIO_Init+0x2cc>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6193      	str	r3, [r2, #24]
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <HAL_GPIO_Init+0x2cc>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cbc:	4a50      	ldr	r2, [pc, #320]	; (8003e00 <HAL_GPIO_Init+0x2d0>)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	220f      	movs	r2, #15
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ce6:	d013      	beq.n	8003d10 <HAL_GPIO_Init+0x1e0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a46      	ldr	r2, [pc, #280]	; (8003e04 <HAL_GPIO_Init+0x2d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00d      	beq.n	8003d0c <HAL_GPIO_Init+0x1dc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a45      	ldr	r2, [pc, #276]	; (8003e08 <HAL_GPIO_Init+0x2d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <HAL_GPIO_Init+0x1d8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <HAL_GPIO_Init+0x2dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_GPIO_Init+0x1d4>
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x1e2>
 8003d04:	2305      	movs	r3, #5
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x1e2>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x1e2>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x1e2>
 8003d10:	2300      	movs	r3, #0
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d22:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_GPIO_Init+0x2d0>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d54:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_GPIO_Init+0x2e0>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f aea9 	bne.w	8003b40 <HAL_GPIO_Init+0x10>
  }
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40010000 	.word	0x40010000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	48000800 	.word	0x48000800
 8003e0c:	48000c00 	.word	0x48000c00
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e001      	b.n	8003e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
 8003e50:	4613      	mov	r3, r2
 8003e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e54:	787b      	ldrb	r3, [r7, #1]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e081      	b.n	8003f8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd ff66 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e006      	b.n	8003efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d104      	bne.n	8003f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	ea42 0103 	orr.w	r1, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	813b      	strh	r3, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	f040 80f9 	bne.w	80041ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x34>
 8003fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0ed      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Mem_Write+0x4e>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e0e6      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fea:	f7fe fbab 	bl	8002744 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f001 fa64 	bl	80054ca <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d1      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2221      	movs	r2, #33	; 0x21
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2240      	movs	r2, #64	; 0x40
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004034:	88f8      	ldrh	r0, [r7, #6]
 8004036:	893a      	ldrh	r2, [r7, #8]
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	4603      	mov	r3, r0
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fd07 	bl	8004a58 <I2C_RequestMemoryWrite>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0a9      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2bff      	cmp	r3, #255	; 0xff
 8004064:	d90e      	bls.n	8004084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	b2da      	uxtb	r2, r3
 8004072:	8979      	ldrh	r1, [r7, #10]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f001 fb47 	bl	8005710 <I2C_TransferConfig>
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f001 fb36 	bl	8005710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f001 fa4e 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e07b      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d034      	beq.n	800415c <HAL_I2C_Mem_Write+0x1c8>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d130      	bne.n	800415c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f001 f9e0 	bl	80054ca <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04d      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2bff      	cmp	r3, #255	; 0xff
 800411c:	d90e      	bls.n	800413c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	22ff      	movs	r2, #255	; 0xff
 8004122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	b2da      	uxtb	r2, r3
 800412a:	8979      	ldrh	r1, [r7, #10]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f001 faeb 	bl	8005710 <I2C_TransferConfig>
 800413a:	e00f      	b.n	800415c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	2300      	movs	r3, #0
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f001 fada 	bl	8005710 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d19e      	bne.n	80040a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f001 fa2d 	bl	80055ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e01a      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2220      	movs	r2, #32
 8004180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_I2C_Mem_Write+0x224>)
 800418e:	400b      	ands	r3, r1
 8004190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	fe00e800 	.word	0xfe00e800

080041bc <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 80d5 	bne.w	800438e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_I2C_Mem_Write_DMA+0x34>
 80041ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0c9      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420a:	d101      	bne.n	8004210 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
 800420e:	e0bf      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_I2C_Mem_Write_DMA+0x62>
 800421a:	2302      	movs	r3, #2
 800421c:	e0b8      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004226:	f7fe fa8d 	bl	8002744 <HAL_GetTick>
 800422a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2221      	movs	r2, #33	; 0x21
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a51      	ldr	r2, [pc, #324]	; (8004398 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a51      	ldr	r2, [pc, #324]	; (800439c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	2bff      	cmp	r3, #255	; 0xff
 8004262:	d906      	bls.n	8004272 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800426a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e007      	b.n	8004282 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800427c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004280:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004282:	88f8      	ldrh	r0, [r7, #6]
 8004284:	893a      	ldrh	r2, [r7, #8]
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2319      	movs	r3, #25
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4603      	mov	r3, r0
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fbe0 	bl	8004a58 <I2C_RequestMemoryWrite>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e072      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4a39      	ldr	r2, [pc, #228]	; (80043a4 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	2200      	movs	r2, #0
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3328      	adds	r3, #40	; 0x28
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	f7ff fa50 	bl	8003788 <HAL_DMA_Start_IT>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d139      	bne.n	8004366 <HAL_I2C_Mem_Write_DMA+0x1aa>
 80042f2:	e013      	b.n	800431c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e039      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f001 f9f0 	bl	8005710 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800434a:	2110      	movs	r1, #16
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f001 fa0d 	bl	800576c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004360:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e014      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f043 0210 	orr.w	r2, r3, #16
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	ffff0000 	.word	0xffff0000
 800439c:	080046b3 	.word	0x080046b3
 80043a0:	080053cb 	.word	0x080053cb
 80043a4:	08005461 	.word	0x08005461

080043a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
  }
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
 8004438:	4613      	mov	r3, r2
 800443a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <I2C_Slave_ISR_IT+0x24>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0ec      	b.n	80046aa <I2C_Slave_ISR_IT+0x1fe>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <I2C_Slave_ISR_IT+0x4c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044f0:	6939      	ldr	r1, [r7, #16]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fcee 	bl	8004ed4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d04d      	beq.n	80045a0 <I2C_Slave_ISR_IT+0xf4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d047      	beq.n	80045a0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d128      	bne.n	800456c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b28      	cmp	r3, #40	; 0x28
 8004524:	d108      	bne.n	8004538 <I2C_Slave_ISR_IT+0x8c>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800452c:	d104      	bne.n	8004538 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fdd9 	bl	80050e8 <I2C_ITListenCplt>
 8004536:	e032      	b.n	800459e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b29      	cmp	r3, #41	; 0x29
 8004542:	d10e      	bne.n	8004562 <I2C_Slave_ISR_IT+0xb6>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454a:	d00a      	beq.n	8004562 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2210      	movs	r2, #16
 8004552:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 ff14 	bl	8005382 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fb91 	bl	8004c82 <I2C_ITSlaveSeqCplt>
 8004560:	e01d      	b.n	800459e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2210      	movs	r2, #16
 8004568:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800456a:	e096      	b.n	800469a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <I2C_Slave_ISR_IT+0xe4>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800458c:	f040 8085 	bne.w	800469a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	4619      	mov	r1, r3
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fdfc 	bl	8005194 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800459c:	e07d      	b.n	800469a <I2C_Slave_ISR_IT+0x1ee>
 800459e:	e07c      	b.n	800469a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d030      	beq.n	800460e <I2C_Slave_ISR_IT+0x162>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02a      	beq.n	800460e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d14f      	bne.n	800469e <I2C_Slave_ISR_IT+0x1f2>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004604:	d04b      	beq.n	800469e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fb3b 	bl	8004c82 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800460c:	e047      	b.n	800469e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004626:	6939      	ldr	r1, [r7, #16]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fa69 	bl	8004b00 <I2C_ITAddrCplt>
 800462e:	e037      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d031      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02b      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
 8004682:	e00d      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468a:	d002      	beq.n	8004692 <I2C_Slave_ISR_IT+0x1e6>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 faf5 	bl	8004c82 <I2C_ITSlaveSeqCplt>
 8004698:	e002      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800469e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <I2C_Master_ISR_DMA+0x1a>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0e1      	b.n	8004890 <I2C_Master_ISR_DMA+0x1de>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d017      	beq.n	8004710 <I2C_Master_ISR_DMA+0x5e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2210      	movs	r2, #16
 80046f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004700:	2120      	movs	r1, #32
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f001 f832 	bl	800576c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fe3a 	bl	8005382 <I2C_Flush_TXDR>
 800470e:	e0ba      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d072      	beq.n	8004802 <I2C_Master_ISR_DMA+0x150>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d06c      	beq.n	8004802 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04e      	beq.n	80047e0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2bff      	cmp	r3, #255	; 0xff
 8004758:	d906      	bls.n	8004768 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22ff      	movs	r2, #255	; 0xff
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e010      	b.n	800478a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800477a:	d003      	beq.n	8004784 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e002      	b.n	800478a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004788:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	b2da      	uxtb	r2, r3
 8004790:	8a79      	ldrh	r1, [r7, #18]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 ffb9 	bl	8005710 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d108      	bne.n	80047ce <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047cc:	e05b      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047de:	e052      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ee:	d003      	beq.n	80047f8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fa09 	bl	8004c08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047f6:	e046      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fcca 	bl	8005194 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004800:	e041      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d029      	beq.n	8004862 <I2C_Master_ISR_DMA+0x1b0>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d023      	beq.n	8004862 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d119      	bne.n	8004858 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004832:	d027      	beq.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800484c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800484e:	e019      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f9d9 	bl	8004c08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004856:	e015      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fc9a 	bl	8005194 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004860:	e010      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa5f 	bl	8004d40 <I2C_ITMasterCplt>
 8004882:	e000      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004884:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <I2C_Slave_ISR_DMA+0x24>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0c9      	b.n	8004a50 <I2C_Slave_ISR_DMA+0x1b8>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <I2C_Slave_ISR_DMA+0x4c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 faf8 	bl	8004ed4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 809a 	beq.w	8004a26 <I2C_Slave_ISR_DMA+0x18e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8093 	beq.w	8004a26 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0b9b      	lsrs	r3, r3, #14
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0bdb      	lsrs	r3, r3, #15
 8004910:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004914:	2b00      	cmp	r3, #0
 8004916:	d07f      	beq.n	8004a18 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0bdb      	lsrs	r3, r3, #15
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004938:	2301      	movs	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0b9b      	lsrs	r3, r3, #14
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d128      	bne.n	80049b8 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b28      	cmp	r3, #40	; 0x28
 8004970:	d108      	bne.n	8004984 <I2C_Slave_ISR_DMA+0xec>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004978:	d104      	bne.n	8004984 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fbb3 	bl	80050e8 <I2C_ITListenCplt>
 8004982:	e048      	b.n	8004a16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b29      	cmp	r3, #41	; 0x29
 800498e:	d10e      	bne.n	80049ae <I2C_Slave_ISR_DMA+0x116>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004996:	d00a      	beq.n	80049ae <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2210      	movs	r2, #16
 800499e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fcee 	bl	8005382 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f96b 	bl	8004c82 <I2C_ITSlaveSeqCplt>
 80049ac:	e033      	b.n	8004a16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80049b6:	e034      	b.n	8004a22 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <I2C_Slave_ISR_DMA+0x14a>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049e0:	d11f      	bne.n	8004a22 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b21      	cmp	r3, #33	; 0x21
 80049e6:	d002      	beq.n	80049ee <I2C_Slave_ISR_DMA+0x156>
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b29      	cmp	r3, #41	; 0x29
 80049ec:	d103      	bne.n	80049f6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2221      	movs	r2, #33	; 0x21
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
 80049f4:	e008      	b.n	8004a08 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	2b22      	cmp	r3, #34	; 0x22
 80049fa:	d002      	beq.n	8004a02 <I2C_Slave_ISR_DMA+0x16a>
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004a00:	d102      	bne.n	8004a08 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2222      	movs	r2, #34	; 0x22
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fbc0 	bl	8005194 <I2C_ITError>
      if (treatdmanack == 1U)
 8004a14:	e005      	b.n	8004a22 <I2C_Slave_ISR_DMA+0x18a>
 8004a16:	e004      	b.n	8004a22 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a20:	e011      	b.n	8004a46 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004a22:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a24:	e00f      	b.n	8004a46 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <I2C_Slave_ISR_DMA+0x1ae>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f85d 	bl	8004b00 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <I2C_RequestMemoryWrite+0xa4>)
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fe45 	bl	8005710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	69b9      	ldr	r1, [r7, #24]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fd5d 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02c      	b.n	8004af4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa0:	893b      	ldrh	r3, [r7, #8]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aaa:	e015      	b.n	8004ad8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fd43 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e012      	b.n	8004af4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fcf1 	bl	80054ca <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	80002000 	.word	0x80002000

08004b00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b16:	2b28      	cmp	r3, #40	; 0x28
 8004b18:	d16a      	bne.n	8004bf0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b38:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b46:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b54:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d138      	bne.n	8004bd0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004b5e:	897b      	ldrh	r3, [r7, #10]
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	89bb      	ldrh	r3, [r7, #12]
 8004b66:	4053      	eors	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11c      	bne.n	8004bac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b72:	897b      	ldrh	r3, [r7, #10]
 8004b74:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d13b      	bne.n	8004c00 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2208      	movs	r2, #8
 8004b94:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b9e:	89ba      	ldrh	r2, [r7, #12]
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fc41 	bl	800442c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004baa:	e029      	b.n	8004c00 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004bac:	893b      	ldrh	r3, [r7, #8]
 8004bae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fe3d 	bl	8005834 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bc2:	89ba      	ldrh	r2, [r7, #12]
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fc2f 	bl	800442c <HAL_I2C_AddrCallback>
}
 8004bce:	e017      	b.n	8004c00 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fe2d 	bl	8005834 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004be2:	89ba      	ldrh	r2, [r7, #12]
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fc1f 	bl	800442c <HAL_I2C_AddrCallback>
}
 8004bee:	e007      	b.n	8004c00 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b21      	cmp	r3, #33	; 0x21
 8004c22:	d115      	bne.n	8004c50 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2211      	movs	r2, #17
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c38:	2101      	movs	r1, #1
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fdfa 	bl	8005834 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fbc7 	bl	80043dc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c4e:	e014      	b.n	8004c7a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2212      	movs	r2, #18
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c64:	2102      	movs	r1, #2
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fde4 	bl	8005834 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fbbb 	bl	80043f0 <HAL_I2C_MasterRxCpltCallback>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	0b9b      	lsrs	r3, r3, #14
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e00d      	b.n	8004cd4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	0bdb      	lsrs	r3, r3, #15
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b29      	cmp	r3, #41	; 0x29
 8004cde:	d112      	bne.n	8004d06 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2228      	movs	r2, #40	; 0x28
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2221      	movs	r2, #33	; 0x21
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fd9f 	bl	8005834 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff fb80 	bl	8004404 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d04:	e017      	b.n	8004d36 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d111      	bne.n	8004d36 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2228      	movs	r2, #40	; 0x28
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2222      	movs	r2, #34	; 0x22
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d20:	2102      	movs	r1, #2
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd86 	bl	8005834 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fb71 	bl	8004418 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2220      	movs	r2, #32
 8004d54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b21      	cmp	r3, #33	; 0x21
 8004d60:	d107      	bne.n	8004d72 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d62:	2101      	movs	r1, #1
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd65 	bl	8005834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2211      	movs	r2, #17
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d70:	e00c      	b.n	8004d8c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b22      	cmp	r3, #34	; 0x22
 8004d7c:	d106      	bne.n	8004d8c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d7e:	2102      	movs	r1, #2
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fd57 	bl	8005834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2212      	movs	r2, #18
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b4d      	ldr	r3, [pc, #308]	; (8004ecc <I2C_ITMasterCplt+0x18c>)
 8004d98:	400b      	ands	r3, r1
 8004d9a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4a      	ldr	r2, [pc, #296]	; (8004ed0 <I2C_ITMasterCplt+0x190>)
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2210      	movs	r2, #16
 8004dba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b60      	cmp	r3, #96	; 0x60
 8004dd2:	d10b      	bne.n	8004dec <I2C_ITMasterCplt+0xac>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004dea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fac8 	bl	8005382 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d002      	beq.n	8004e0a <I2C_ITMasterCplt+0xca>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9bf 	bl	8005194 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e16:	e054      	b.n	8004ec2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b21      	cmp	r3, #33	; 0x21
 8004e22:	d124      	bne.n	8004e6e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d10b      	bne.n	8004e56 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fb04 	bl	800445c <HAL_I2C_MemTxCpltCallback>
}
 8004e54:	e035      	b.n	8004ec2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fab8 	bl	80043dc <HAL_I2C_MasterTxCpltCallback>
}
 8004e6c:	e029      	b.n	8004ec2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b22      	cmp	r3, #34	; 0x22
 8004e78:	d123      	bne.n	8004ec2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d10b      	bne.n	8004eac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fae3 	bl	8004470 <HAL_I2C_MemRxCpltCallback>
}
 8004eaa:	e00a      	b.n	8004ec2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff fa97 	bl	80043f0 <HAL_I2C_MasterRxCpltCallback>
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	fe00e800 	.word	0xfe00e800
 8004ed0:	ffff0000 	.word	0xffff0000

08004ed4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b21      	cmp	r3, #33	; 0x21
 8004efe:	d002      	beq.n	8004f06 <I2C_ITSlaveCplt+0x32>
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b29      	cmp	r3, #41	; 0x29
 8004f04:	d108      	bne.n	8004f18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004f06:	f248 0101 	movw	r1, #32769	; 0x8001
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fc92 	bl	8005834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2221      	movs	r2, #33	; 0x21
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
 8004f16:	e00d      	b.n	8004f34 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b22      	cmp	r3, #34	; 0x22
 8004f1c:	d002      	beq.n	8004f24 <I2C_ITSlaveCplt+0x50>
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d107      	bne.n	8004f34 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004f24:	f248 0102 	movw	r1, #32770	; 0x8002
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fc83 	bl	8005834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2222      	movs	r2, #34	; 0x22
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b64      	ldr	r3, [pc, #400]	; (80050e0 <I2C_ITSlaveCplt+0x20c>)
 8004f50:	400b      	ands	r3, r1
 8004f52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa14 	bl	8005382 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	0b9b      	lsrs	r3, r3, #14
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d013      	beq.n	8004f8e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d020      	beq.n	8004fc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f8c:	e018      	b.n	8004fc0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	0bdb      	lsrs	r3, r3, #15
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0304 	bic.w	r3, r3, #4
 8004fd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8a7 	bl	8005194 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b28      	cmp	r3, #40	; 0x28
 8005050:	d141      	bne.n	80050d6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005052:	6979      	ldr	r1, [r7, #20]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f847 	bl	80050e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800505a:	e03c      	b.n	80050d6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005064:	d014      	beq.n	8005090 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe0b 	bl	8004c82 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <I2C_ITSlaveCplt+0x210>)
 8005070:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff f9dd 	bl	8004448 <HAL_I2C_ListenCpltCallback>
}
 800508e:	e022      	b.n	80050d6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b22      	cmp	r3, #34	; 0x22
 800509a:	d10e      	bne.n	80050ba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff f9b0 	bl	8004418 <HAL_I2C_SlaveRxCpltCallback>
}
 80050b8:	e00d      	b.n	80050d6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff f997 	bl	8004404 <HAL_I2C_SlaveTxCpltCallback>
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	fe00e800 	.word	0xfe00e800
 80050e4:	ffff0000 	.word	0xffff0000

080050e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a26      	ldr	r2, [pc, #152]	; (8005190 <I2C_ITListenCplt+0xa8>)
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d022      	beq.n	8005166 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f043 0204 	orr.w	r2, r3, #4
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005166:	f248 0103 	movw	r1, #32771	; 0x8003
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fb62 	bl	8005834 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff f961 	bl	8004448 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	ffff0000 	.word	0xffff0000

08005194 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a5d      	ldr	r2, [pc, #372]	; (8005328 <I2C_ITError+0x194>)
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b28      	cmp	r3, #40	; 0x28
 80051ca:	d005      	beq.n	80051d8 <I2C_ITError+0x44>
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b29      	cmp	r3, #41	; 0x29
 80051d0:	d002      	beq.n	80051d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b2a      	cmp	r3, #42	; 0x2a
 80051d6:	d10b      	bne.n	80051f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051d8:	2103      	movs	r1, #3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb2a 	bl	8005834 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2228      	movs	r2, #40	; 0x28
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a50      	ldr	r2, [pc, #320]	; (800532c <I2C_ITError+0x198>)
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34
 80051ee:	e011      	b.n	8005214 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb1d 	bl	8005834 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b60      	cmp	r3, #96	; 0x60
 8005204:	d003      	beq.n	800520e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d039      	beq.n	8005296 <I2C_ITError+0x102>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b11      	cmp	r3, #17
 8005226:	d002      	beq.n	800522e <I2C_ITError+0x9a>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b21      	cmp	r3, #33	; 0x21
 800522c:	d133      	bne.n	8005296 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523c:	d107      	bne.n	800524e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800524c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fc11 	bl	8003a7a <HAL_DMA_GetState>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d017      	beq.n	800528e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	4a33      	ldr	r2, [pc, #204]	; (8005330 <I2C_ITError+0x19c>)
 8005264:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fb20 	bl	80038b8 <HAL_DMA_Abort_IT>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04d      	beq.n	800531a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800528c:	e045      	b.n	800531a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f850 	bl	8005334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005294:	e041      	b.n	800531a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d039      	beq.n	8005312 <I2C_ITError+0x17e>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d002      	beq.n	80052aa <I2C_ITError+0x116>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b22      	cmp	r3, #34	; 0x22
 80052a8:	d133      	bne.n	8005312 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	d107      	bne.n	80052ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fbd3 	bl	8003a7a <HAL_DMA_GetState>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d017      	beq.n	800530a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	4a14      	ldr	r2, [pc, #80]	; (8005330 <I2C_ITError+0x19c>)
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe fae2 	bl	80038b8 <HAL_DMA_Abort_IT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d011      	beq.n	800531e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005304:	4610      	mov	r0, r2
 8005306:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005308:	e009      	b.n	800531e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f812 	bl	8005334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005310:	e005      	b.n	800531e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f80e 	bl	8005334 <I2C_TreatErrorCallback>
  }
}
 8005318:	e002      	b.n	8005320 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800531e:	bf00      	nop
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	ffff0000 	.word	0xffff0000
 800532c:	080044ad 	.word	0x080044ad
 8005330:	0800548f 	.word	0x0800548f

08005334 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d10e      	bne.n	8005366 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff f89a 	bl	8004498 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005364:	e009      	b.n	800537a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff f885 	bl	8004484 <HAL_I2C_ErrorCallback>
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d103      	bne.n	80053a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2200      	movs	r2, #0
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d007      	beq.n	80053be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	619a      	str	r2, [r3, #24]
  }
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053e6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80053f2:	2120      	movs	r1, #32
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f9b9 	bl	800576c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80053fa:	e02d      	b.n	8005458 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2bff      	cmp	r3, #255	; 0xff
 8005412:	d903      	bls.n	800541c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
 800541a:	e004      	b.n	8005426 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	4619      	mov	r1, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3328      	adds	r3, #40	; 0x28
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	f7fe f9a4 	bl	8003788 <HAL_DMA_Start_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005446:	2110      	movs	r1, #16
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fea3 	bl	8005194 <I2C_ITError>
}
 800544e:	e003      	b.n	8005458 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005450:	2140      	movs	r1, #64	; 0x40
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f98a 	bl	800576c <I2C_Enable_IRQ>
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800547e:	2110      	movs	r1, #16
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fe87 	bl	8005194 <I2C_ITError>
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	2200      	movs	r2, #0
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	2200      	movs	r2, #0
 80054ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff ff39 	bl	8005334 <I2C_TreatErrorCallback>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054da:	e022      	b.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d01e      	beq.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fd f92e 	bl	8002744 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d113      	bne.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	429a      	cmp	r2, r3
 800553e:	d0cd      	beq.n	80054dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005556:	e02c      	b.n	80055b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f871 	bl	8005644 <I2C_IsAcknowledgeFailed>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e02a      	b.n	80055c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d01e      	beq.n	80055b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005574:	f7fd f8e6 	bl	8002744 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d113      	bne.n	80055b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e007      	b.n	80055c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d1cb      	bne.n	8005558 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055d6:	e028      	b.n	800562a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f831 	bl	8005644 <I2C_IsAcknowledgeFailed>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e026      	b.n	800563a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fd f8aa 	bl	8002744 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e007      	b.n	800563a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b20      	cmp	r3, #32
 8005636:	d1cf      	bne.n	80055d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b10      	cmp	r3, #16
 800565c:	d151      	bne.n	8005702 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565e:	e022      	b.n	80056a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d01e      	beq.n	80056a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005668:	f7fd f86c 	bl	8002744 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	d302      	bcc.n	800567e <I2C_IsAcknowledgeFailed+0x3a>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d113      	bne.n	80056a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e02e      	b.n	8005704 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d1d5      	bne.n	8005660 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2220      	movs	r2, #32
 80056c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fe5c 	bl	8005382 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <I2C_IsAcknowledgeFailed+0xc8>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	fe00e800 	.word	0xfe00e800

08005710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	817b      	strh	r3, [r7, #10]
 800571e:	4613      	mov	r3, r2
 8005720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	0d5b      	lsrs	r3, r3, #21
 800572c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <I2C_TransferConfig+0x58>)
 8005732:	430b      	orrs	r3, r1
 8005734:	43db      	mvns	r3, r3
 8005736:	ea02 0103 	and.w	r1, r2, r3
 800573a:	897b      	ldrh	r3, [r7, #10]
 800573c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005740:	7a7b      	ldrb	r3, [r7, #9]
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	431a      	orrs	r2, r3
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	431a      	orrs	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	03ff63ff 	.word	0x03ff63ff

0800576c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	4a2a      	ldr	r2, [pc, #168]	; (800582c <I2C_Enable_IRQ+0xc0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800578a:	4a29      	ldr	r2, [pc, #164]	; (8005830 <I2C_Enable_IRQ+0xc4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d11d      	bne.n	80057cc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005794:	2b00      	cmp	r3, #0
 8005796:	da03      	bge.n	80057a0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800579e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d103      	bne.n	80057ae <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80057ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d103      	bne.n	80057bc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d125      	bne.n	800580e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057ca:	e020      	b.n	800580e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da03      	bge.n	80057dc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80057da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80057ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80057fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005800:	887b      	ldrh	r3, [r7, #2]
 8005802:	2b20      	cmp	r3, #32
 8005804:	d103      	bne.n	800580e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f043 0320 	orr.w	r3, r3, #32
 800580c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	080046b3 	.word	0x080046b3
 8005830:	08004899 	.word	0x08004899

08005834 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005844:	887b      	ldrh	r3, [r7, #2]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00f      	beq.n	800586e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005854:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005862:	2b28      	cmp	r3, #40	; 0x28
 8005864:	d003      	beq.n	800586e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800586c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800586e:	887b      	ldrh	r3, [r7, #2]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00f      	beq.n	8005898 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800587e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800588c:	2b28      	cmp	r3, #40	; 0x28
 800588e:	d003      	beq.n	8005898 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005896:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800589c:	2b00      	cmp	r3, #0
 800589e:	da03      	bge.n	80058a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d103      	bne.n	80058b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058b6:	887b      	ldrh	r3, [r7, #2]
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d103      	bne.n	80058c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d103      	bne.n	80058d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6819      	ldr	r1, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	43da      	mvns	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	400a      	ands	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b20      	cmp	r3, #32
 8005904:	d138      	bne.n	8005978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005910:	2302      	movs	r3, #2
 8005912:	e032      	b.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	; 0x24
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b20      	cmp	r3, #32
 800599a:	d139      	bne.n	8005a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e033      	b.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	; 0x24
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f000 bef4 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 816a 	beq.w	8005d1e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a4a:	4bb3      	ldr	r3, [pc, #716]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a56:	4bb0      	ldr	r3, [pc, #704]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d159      	bne.n	8005b16 <HAL_RCC_OscConfig+0xf6>
 8005a62:	4bad      	ldr	r3, [pc, #692]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6e:	d152      	bne.n	8005b16 <HAL_RCC_OscConfig+0xf6>
 8005a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a88:	fab3 f383 	clz	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d102      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x82>
 8005a9c:	4b9e      	ldr	r3, [pc, #632]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	e015      	b.n	8005ace <HAL_RCC_OscConfig+0xae>
 8005aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005abe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005aca:	4b93      	ldr	r3, [pc, #588]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ad2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005ad6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005ada:	fa92 f2a2 	rbit	r2, r2
 8005ade:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005ae2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005ae6:	fab2 f282 	clz	r2, r2
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	f042 0220 	orr.w	r2, r2, #32
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f002 021f 	and.w	r2, r2, #31
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f202 	lsl.w	r2, r1, r2
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 810c 	beq.w	8005d1c <HAL_RCC_OscConfig+0x2fc>
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 8106 	bne.w	8005d1c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f000 be86 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d106      	bne.n	8005b30 <HAL_RCC_OscConfig+0x110>
 8005b22:	4b7d      	ldr	r3, [pc, #500]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a7c      	ldr	r2, [pc, #496]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e030      	b.n	8005b92 <HAL_RCC_OscConfig+0x172>
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x134>
 8005b3a:	4b77      	ldr	r3, [pc, #476]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a76      	ldr	r2, [pc, #472]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b74      	ldr	r3, [pc, #464]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a73      	ldr	r2, [pc, #460]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e01e      	b.n	8005b92 <HAL_RCC_OscConfig+0x172>
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b5e:	d10c      	bne.n	8005b7a <HAL_RCC_OscConfig+0x15a>
 8005b60:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6c      	ldr	r2, [pc, #432]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a69      	ldr	r2, [pc, #420]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e00b      	b.n	8005b92 <HAL_RCC_OscConfig+0x172>
 8005b7a:	4b67      	ldr	r3, [pc, #412]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a66      	ldr	r2, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b64      	ldr	r3, [pc, #400]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a63      	ldr	r2, [pc, #396]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b92:	4b61      	ldr	r3, [pc, #388]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f023 020f 	bic.w	r2, r3, #15
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	495d      	ldr	r1, [pc, #372]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d059      	beq.n	8005c64 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fc fdc8 	bl	8002744 <HAL_GetTick>
 8005bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bba:	f7fc fdc3 	bl	8002744 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d902      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	f000 be29 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
 8005bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005be4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be8:	fab3 f383 	clz	r3, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <HAL_RCC_OscConfig+0x1e2>
 8005bfc:	4b46      	ldr	r3, [pc, #280]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	e015      	b.n	8005c2e <HAL_RCC_OscConfig+0x20e>
 8005c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c06:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005c0e:	fa93 f3a3 	rbit	r3, r3
 8005c12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005c1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c32:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005c36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005c3a:	fa92 f2a2 	rbit	r2, r2
 8005c3e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005c42:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005c46:	fab2 f282 	clz	r2, r2
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	f042 0220 	orr.w	r2, r2, #32
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	f002 021f 	and.w	r2, r2, #31
 8005c56:	2101      	movs	r1, #1
 8005c58:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ab      	beq.n	8005bba <HAL_RCC_OscConfig+0x19a>
 8005c62:	e05c      	b.n	8005d1e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fc fd6e 	bl	8002744 <HAL_GetTick>
 8005c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6c:	e00a      	b.n	8005c84 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c6e:	f7fc fd69 	bl	8002744 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	; 0x64
 8005c7c:	d902      	bls.n	8005c84 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	f000 bdcf 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
 8005c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c88:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005c90:	fa93 f3a3 	rbit	r3, r3
 8005c94:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005c98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9c:	fab3 f383 	clz	r3, r3
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d102      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x296>
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	e015      	b.n	8005ce2 <HAL_RCC_OscConfig+0x2c2>
 8005cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005cd2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <HAL_RCC_OscConfig+0x2f8>)
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ce6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005cea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005cee:	fa92 f2a2 	rbit	r2, r2
 8005cf2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005cf6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005cfa:	fab2 f282 	clz	r2, r2
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	f042 0220 	orr.w	r2, r2, #32
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	f002 021f 	and.w	r2, r2, #31
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ab      	bne.n	8005c6e <HAL_RCC_OscConfig+0x24e>
 8005d16:	e002      	b.n	8005d1e <HAL_RCC_OscConfig+0x2fe>
 8005d18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 816f 	beq.w	800600c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d2e:	4bd0      	ldr	r3, [pc, #832]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d3a:	4bcd      	ldr	r3, [pc, #820]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d16c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x400>
 8005d46:	4bca      	ldr	r3, [pc, #808]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d166      	bne.n	8005e20 <HAL_RCC_OscConfig+0x400>
 8005d52:	2302      	movs	r3, #2
 8005d54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005d64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d68:	fab3 f383 	clz	r3, r3
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCC_OscConfig+0x362>
 8005d7c:	4bbc      	ldr	r3, [pc, #752]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	e013      	b.n	8005daa <HAL_RCC_OscConfig+0x38a>
 8005d82:	2302      	movs	r3, #2
 8005d84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d88:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005d94:	2302      	movs	r3, #2
 8005d96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005d9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d9e:	fa93 f3a3 	rbit	r3, r3
 8005da2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005da6:	4bb2      	ldr	r3, [pc, #712]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2202      	movs	r2, #2
 8005dac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005db0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005db4:	fa92 f2a2 	rbit	r2, r2
 8005db8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005dbc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005dc0:	fab2 f282 	clz	r2, r2
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f042 0220 	orr.w	r2, r2, #32
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	f002 021f 	and.w	r2, r2, #31
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_RCC_OscConfig+0x3cc>
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d002      	beq.n	8005dec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f000 bd1b 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dec:	4ba0      	ldr	r3, [pc, #640]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	21f8      	movs	r1, #248	; 0xf8
 8005dfc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e00:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005e04:	fa91 f1a1 	rbit	r1, r1
 8005e08:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005e0c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005e10:	fab1 f181 	clz	r1, r1
 8005e14:	b2c9      	uxtb	r1, r1
 8005e16:	408b      	lsls	r3, r1
 8005e18:	4995      	ldr	r1, [pc, #596]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1e:	e0f5      	b.n	800600c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8085 	beq.w	8005f36 <HAL_RCC_OscConfig+0x516>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005e3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e42:	fab3 f383 	clz	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	461a      	mov	r2, r3
 8005e54:	2301      	movs	r3, #1
 8005e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fc fc74 	bl	8002744 <HAL_GetTick>
 8005e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e60:	e00a      	b.n	8005e78 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e62:	f7fc fc6f 	bl	8002744 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d902      	bls.n	8005e78 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	f000 bcd5 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005e82:	fa93 f3a3 	rbit	r3, r3
 8005e86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005e8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8e:	fab3 f383 	clz	r3, r3
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x488>
 8005ea2:	4b73      	ldr	r3, [pc, #460]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	e013      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4b0>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005eb2:	fa93 f3a3 	rbit	r3, r3
 8005eb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005eba:	2302      	movs	r3, #2
 8005ebc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005ec0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005ec4:	fa93 f3a3 	rbit	r3, r3
 8005ec8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005ecc:	4b68      	ldr	r3, [pc, #416]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005ed6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005eda:	fa92 f2a2 	rbit	r2, r2
 8005ede:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005ee2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005ee6:	fab2 f282 	clz	r2, r2
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	f042 0220 	orr.w	r2, r2, #32
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	f002 021f 	and.w	r2, r2, #31
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0af      	beq.n	8005e62 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	4b5b      	ldr	r3, [pc, #364]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	21f8      	movs	r1, #248	; 0xf8
 8005f12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f1a:	fa91 f1a1 	rbit	r1, r1
 8005f1e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005f22:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005f26:	fab1 f181 	clz	r1, r1
 8005f2a:	b2c9      	uxtb	r1, r1
 8005f2c:	408b      	lsls	r3, r1
 8005f2e:	4950      	ldr	r1, [pc, #320]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	600b      	str	r3, [r1, #0]
 8005f34:	e06a      	b.n	800600c <HAL_RCC_OscConfig+0x5ec>
 8005f36:	2301      	movs	r3, #1
 8005f38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f40:	fa93 f3a3 	rbit	r3, r3
 8005f44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005f48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4c:	fab3 f383 	clz	r3, r3
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fc fbef 	bl	8002744 <HAL_GetTick>
 8005f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f6c:	f7fc fbea 	bl	8002744 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d902      	bls.n	8005f82 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	f000 bc50 	b.w	8006822 <HAL_RCC_OscConfig+0xe02>
 8005f82:	2302      	movs	r3, #2
 8005f84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f8c:	fa93 f3a3 	rbit	r3, r3
 8005f90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f98:	fab3 f383 	clz	r3, r3
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d102      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x592>
 8005fac:	4b30      	ldr	r3, [pc, #192]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	e013      	b.n	8005fda <HAL_RCC_OscConfig+0x5ba>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fbc:	fa93 f3a3 	rbit	r3, r3
 8005fc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005fca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fce:	fa93 f3a3 	rbit	r3, r3
 8005fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fd6:	4b26      	ldr	r3, [pc, #152]	; (8006070 <HAL_RCC_OscConfig+0x650>)
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005fe0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005fe4:	fa92 f2a2 	rbit	r2, r2
 8005fe8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005fec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ff0:	fab2 f282 	clz	r2, r2
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	f042 0220 	orr.w	r2, r2, #32
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	f002 021f 	and.w	r2, r2, #31
 8006000:	2101      	movs	r1, #1
 8006002:	fa01 f202 	lsl.w	r2, r1, r2
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1af      	bne.n	8005f6c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80da 	beq.w	80061d0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800601c:	1d3b      	adds	r3, r7, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d069      	beq.n	80060fa <HAL_RCC_OscConfig+0x6da>
 8006026:	2301      	movs	r3, #1
 8006028:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603c:	fab3 f383 	clz	r3, r3
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_OscConfig+0x654>)
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	461a      	mov	r2, r3
 800604c:	2301      	movs	r3, #1
 800604e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006050:	f7fc fb78 	bl	8002744 <HAL_GetTick>
 8006054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006058:	e00e      	b.n	8006078 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605a:	f7fc fb73 	bl	8002744 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d906      	bls.n	8006078 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e3d9      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	10908120 	.word	0x10908120
 8006078:	2302      	movs	r3, #2
 800607a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800608a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800608e:	2202      	movs	r2, #2
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	fa93 f2a3 	rbit	r2, r3
 800609c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80060a6:	2202      	movs	r2, #2
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	fa93 f2a3 	rbit	r2, r3
 80060b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80060b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ba:	4ba5      	ldr	r3, [pc, #660]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80060bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80060c2:	2102      	movs	r1, #2
 80060c4:	6019      	str	r1, [r3, #0]
 80060c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	fa93 f1a3 	rbit	r1, r3
 80060d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80060d4:	6019      	str	r1, [r3, #0]
  return result;
 80060d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	fab3 f383 	clz	r3, r3
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0b0      	beq.n	800605a <HAL_RCC_OscConfig+0x63a>
 80060f8:	e06a      	b.n	80061d0 <HAL_RCC_OscConfig+0x7b0>
 80060fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	fa93 f2a3 	rbit	r2, r3
 800610c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006110:	601a      	str	r2, [r3, #0]
  return result;
 8006112:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006116:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	4b8c      	ldr	r3, [pc, #560]	; (8006354 <HAL_RCC_OscConfig+0x934>)
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612c:	f7fc fb0a 	bl	8002744 <HAL_GetTick>
 8006130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006134:	e009      	b.n	800614a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006136:	f7fc fb05 	bl	8002744 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e36b      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 800614a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800614e:	2202      	movs	r2, #2
 8006150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006152:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fa93 f2a3 	rbit	r2, r3
 800615c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006166:	2202      	movs	r2, #2
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	fa93 f2a3 	rbit	r2, r3
 8006174:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800617e:	2202      	movs	r2, #2
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	fa93 f2a3 	rbit	r2, r3
 800618c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006190:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006192:	4b6f      	ldr	r3, [pc, #444]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 8006194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006196:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800619a:	2102      	movs	r1, #2
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f1a3 	rbit	r1, r3
 80061a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061ac:	6019      	str	r1, [r3, #0]
  return result;
 80061ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1b2      	bne.n	8006136 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d0:	1d3b      	adds	r3, r7, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8158 	beq.w	8006490 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e6:	4b5a      	ldr	r3, [pc, #360]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d112      	bne.n	8006218 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f2:	4b57      	ldr	r3, [pc, #348]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	4a56      	ldr	r2, [pc, #344]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	61d3      	str	r3, [r2, #28]
 80061fe:	4b54      	ldr	r3, [pc, #336]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006218:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <HAL_RCC_OscConfig+0x938>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11a      	bne.n	800625a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006224:	4b4c      	ldr	r3, [pc, #304]	; (8006358 <HAL_RCC_OscConfig+0x938>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4b      	ldr	r2, [pc, #300]	; (8006358 <HAL_RCC_OscConfig+0x938>)
 800622a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006230:	f7fc fa88 	bl	8002744 <HAL_GetTick>
 8006234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	e009      	b.n	800624e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623a:	f7fc fa83 	bl	8002744 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	; 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e2e9      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624e:	4b42      	ldr	r3, [pc, #264]	; (8006358 <HAL_RCC_OscConfig+0x938>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ef      	beq.n	800623a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d106      	bne.n	8006272 <HAL_RCC_OscConfig+0x852>
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	4a39      	ldr	r2, [pc, #228]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6213      	str	r3, [r2, #32]
 8006270:	e02f      	b.n	80062d2 <HAL_RCC_OscConfig+0x8b2>
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10c      	bne.n	8006296 <HAL_RCC_OscConfig+0x876>
 800627c:	4b34      	ldr	r3, [pc, #208]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6213      	str	r3, [r2, #32]
 8006288:	4b31      	ldr	r3, [pc, #196]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6213      	str	r3, [r2, #32]
 8006294:	e01d      	b.n	80062d2 <HAL_RCC_OscConfig+0x8b2>
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b05      	cmp	r3, #5
 800629e:	d10c      	bne.n	80062ba <HAL_RCC_OscConfig+0x89a>
 80062a0:	4b2b      	ldr	r3, [pc, #172]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062a6:	f043 0304 	orr.w	r3, r3, #4
 80062aa:	6213      	str	r3, [r2, #32]
 80062ac:	4b28      	ldr	r3, [pc, #160]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6213      	str	r3, [r2, #32]
 80062b8:	e00b      	b.n	80062d2 <HAL_RCC_OscConfig+0x8b2>
 80062ba:	4b25      	ldr	r3, [pc, #148]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	4a24      	ldr	r2, [pc, #144]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	6213      	str	r3, [r2, #32]
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	4a21      	ldr	r2, [pc, #132]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 80062cc:	f023 0304 	bic.w	r3, r3, #4
 80062d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062d2:	1d3b      	adds	r3, r7, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d06b      	beq.n	80063b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062dc:	f7fc fa32 	bl	8002744 <HAL_GetTick>
 80062e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e4:	e00b      	b.n	80062fe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f7fc fa2d 	bl	8002744 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e291      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 80062fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006302:	2202      	movs	r2, #2
 8006304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	fa93 f2a3 	rbit	r2, r3
 8006310:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800631a:	2202      	movs	r2, #2
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	fa93 f2a3 	rbit	r2, r3
 8006328:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800632c:	601a      	str	r2, [r3, #0]
  return result;
 800632e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006332:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006334:	fab3 f383 	clz	r3, r3
 8006338:	b2db      	uxtb	r3, r3
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f043 0302 	orr.w	r3, r3, #2
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d109      	bne.n	800635c <HAL_RCC_OscConfig+0x93c>
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <HAL_RCC_OscConfig+0x930>)
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	e014      	b.n	8006378 <HAL_RCC_OscConfig+0x958>
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	10908120 	.word	0x10908120
 8006358:	40007000 	.word	0x40007000
 800635c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006360:	2202      	movs	r2, #2
 8006362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006364:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	fa93 f2a3 	rbit	r2, r3
 800636e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	4bbb      	ldr	r3, [pc, #748]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800637c:	2102      	movs	r1, #2
 800637e:	6011      	str	r1, [r2, #0]
 8006380:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	fa92 f1a2 	rbit	r1, r2
 800638a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800638e:	6011      	str	r1, [r2, #0]
  return result;
 8006390:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	fab2 f282 	clz	r2, r2
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	f002 021f 	and.w	r2, r2, #31
 80063a6:	2101      	movs	r1, #1
 80063a8:	fa01 f202 	lsl.w	r2, r1, r2
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d099      	beq.n	80062e6 <HAL_RCC_OscConfig+0x8c6>
 80063b2:	e063      	b.n	800647c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b4:	f7fc f9c6 	bl	8002744 <HAL_GetTick>
 80063b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063bc:	e00b      	b.n	80063d6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fc f9c1 	bl	8002744 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e225      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 80063d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80063da:	2202      	movs	r2, #2
 80063dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	fa93 f2a3 	rbit	r2, r3
 80063e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80063f2:	2202      	movs	r2, #2
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	fa93 f2a3 	rbit	r2, r3
 8006400:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006404:	601a      	str	r2, [r3, #0]
  return result;
 8006406:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800640a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f043 0302 	orr.w	r3, r3, #2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d102      	bne.n	8006426 <HAL_RCC_OscConfig+0xa06>
 8006420:	4b90      	ldr	r3, [pc, #576]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	e00d      	b.n	8006442 <HAL_RCC_OscConfig+0xa22>
 8006426:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800642a:	2202      	movs	r2, #2
 800642c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	fa93 f2a3 	rbit	r2, r3
 8006438:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	4b89      	ldr	r3, [pc, #548]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006446:	2102      	movs	r1, #2
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	fa92 f1a2 	rbit	r1, r2
 8006454:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006458:	6011      	str	r1, [r2, #0]
  return result;
 800645a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	fab2 f282 	clz	r2, r2
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	f002 021f 	and.w	r2, r2, #31
 8006470:	2101      	movs	r1, #1
 8006472:	fa01 f202 	lsl.w	r2, r1, r2
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1a0      	bne.n	80063be <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800647c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006480:	2b01      	cmp	r3, #1
 8006482:	d105      	bne.n	8006490 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006484:	4b77      	ldr	r3, [pc, #476]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4a76      	ldr	r2, [pc, #472]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 800648a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 81c2 	beq.w	8006820 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800649c:	4b71      	ldr	r3, [pc, #452]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	f000 819c 	beq.w	80067e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	f040 8114 	bne.w	80066de <HAL_RCC_OscConfig+0xcbe>
 80064b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	fa93 f2a3 	rbit	r2, r3
 80064ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80064ce:	601a      	str	r2, [r3, #0]
  return result;
 80064d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80064d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7fc f92a 	bl	8002744 <HAL_GetTick>
 80064f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f4:	e009      	b.n	800650a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f6:	f7fc f925 	bl	8002744 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e18b      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 800650a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800650e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006514:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	fa93 f2a3 	rbit	r2, r3
 800651e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006522:	601a      	str	r2, [r3, #0]
  return result;
 8006524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800652a:	fab3 f383 	clz	r3, r3
 800652e:	b2db      	uxtb	r3, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d102      	bne.n	8006544 <HAL_RCC_OscConfig+0xb24>
 800653e:	4b49      	ldr	r3, [pc, #292]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	e01b      	b.n	800657c <HAL_RCC_OscConfig+0xb5c>
 8006544:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800654c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fa93 f2a3 	rbit	r2, r3
 8006558:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	fa93 f2a3 	rbit	r2, r3
 8006572:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	fa92 f1a2 	rbit	r1, r2
 8006590:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006594:	6011      	str	r1, [r2, #0]
  return result;
 8006596:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	fab2 f282 	clz	r2, r2
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	f042 0220 	orr.w	r2, r2, #32
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	f002 021f 	and.w	r2, r2, #31
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f202 	lsl.w	r2, r1, r2
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d19e      	bne.n	80064f6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	430b      	orrs	r3, r1
 80065ce:	4925      	ldr	r1, [pc, #148]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80065d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	fa93 f2a3 	rbit	r2, r3
 80065e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80065ec:	601a      	str	r2, [r3, #0]
  return result;
 80065ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80065f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f4:	fab3 f383 	clz	r3, r3
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	461a      	mov	r2, r3
 8006606:	2301      	movs	r3, #1
 8006608:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fc f89b 	bl	8002744 <HAL_GetTick>
 800660e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006612:	e009      	b.n	8006628 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006614:	f7fc f896 	bl	8002744 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e0fc      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 8006628:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800662c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	fa93 f2a3 	rbit	r2, r3
 800663c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006640:	601a      	str	r2, [r3, #0]
  return result;
 8006642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006646:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	b2db      	uxtb	r3, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d105      	bne.n	8006668 <HAL_RCC_OscConfig+0xc48>
 800665c:	4b01      	ldr	r3, [pc, #4]	; (8006664 <HAL_RCC_OscConfig+0xc44>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	e01e      	b.n	80066a0 <HAL_RCC_OscConfig+0xc80>
 8006662:	bf00      	nop
 8006664:	40021000 	.word	0x40021000
 8006668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800666c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	fa93 f2a3 	rbit	r2, r3
 800667c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	fa93 f2a3 	rbit	r2, r3
 8006696:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	4b63      	ldr	r3, [pc, #396]	; (800682c <HAL_RCC_OscConfig+0xe0c>)
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80066a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066a8:	6011      	str	r1, [r2, #0]
 80066aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	fa92 f1a2 	rbit	r1, r2
 80066b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80066b8:	6011      	str	r1, [r2, #0]
  return result;
 80066ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	fab2 f282 	clz	r2, r2
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	f042 0220 	orr.w	r2, r2, #32
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	f002 021f 	and.w	r2, r2, #31
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f202 	lsl.w	r2, r1, r2
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d09b      	beq.n	8006614 <HAL_RCC_OscConfig+0xbf4>
 80066dc:	e0a0      	b.n	8006820 <HAL_RCC_OscConfig+0xe00>
 80066de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	fa93 f2a3 	rbit	r2, r3
 80066f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066f6:	601a      	str	r2, [r3, #0]
  return result;
 80066f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fe:	fab3 f383 	clz	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006708:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	461a      	mov	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fc f816 	bl	8002744 <HAL_GetTick>
 8006718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800671c:	e009      	b.n	8006732 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800671e:	f7fc f811 	bl	8002744 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e077      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
 8006732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800673a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	fa93 f2a3 	rbit	r2, r3
 8006746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674a:	601a      	str	r2, [r3, #0]
  return result;
 800674c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006750:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006752:	fab3 f383 	clz	r3, r3
 8006756:	b2db      	uxtb	r3, r3
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d102      	bne.n	800676c <HAL_RCC_OscConfig+0xd4c>
 8006766:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_RCC_OscConfig+0xe0c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	e01b      	b.n	80067a4 <HAL_RCC_OscConfig+0xd84>
 800676c:	f107 0320 	add.w	r3, r7, #32
 8006770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006776:	f107 0320 	add.w	r3, r7, #32
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	fa93 f2a3 	rbit	r2, r3
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	fa93 f2a3 	rbit	r2, r3
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCC_OscConfig+0xe0c>)
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f107 0210 	add.w	r2, r7, #16
 80067a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	f107 0210 	add.w	r2, r7, #16
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	fa92 f1a2 	rbit	r1, r2
 80067b8:	f107 020c 	add.w	r2, r7, #12
 80067bc:	6011      	str	r1, [r2, #0]
  return result;
 80067be:	f107 020c 	add.w	r2, r7, #12
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	fab2 f282 	clz	r2, r2
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	f042 0220 	orr.w	r2, r2, #32
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	f002 021f 	and.w	r2, r2, #31
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f202 	lsl.w	r2, r1, r2
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d19e      	bne.n	800671e <HAL_RCC_OscConfig+0xcfe>
 80067e0:	e01e      	b.n	8006820 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e2:	1d3b      	adds	r3, r7, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e018      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <HAL_RCC_OscConfig+0xe0c>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80067f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80067fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	429a      	cmp	r2, r3
 8006808:	d108      	bne.n	800681c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800680a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800680e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006812:	1d3b      	adds	r3, r7, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000

08006830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b09e      	sub	sp, #120	; 0x78
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e162      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006848:	4b90      	ldr	r3, [pc, #576]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d910      	bls.n	8006878 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b8d      	ldr	r3, [pc, #564]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 0207 	bic.w	r2, r3, #7
 800685e:	498b      	ldr	r1, [pc, #556]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006866:	4b89      	ldr	r3, [pc, #548]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e14a      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006884:	4b82      	ldr	r3, [pc, #520]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	497f      	ldr	r1, [pc, #508]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006892:	4313      	orrs	r3, r2
 8006894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80dc 	beq.w	8006a5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d13c      	bne.n	8006926 <HAL_RCC_ClockConfig+0xf6>
 80068ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b4:	fa93 f3a3 	rbit	r3, r3
 80068b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80068ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068bc:	fab3 f383 	clz	r3, r3
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xa6>
 80068d0:	4b6f      	ldr	r3, [pc, #444]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	e00f      	b.n	80068f6 <HAL_RCC_ClockConfig+0xc6>
 80068d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068de:	fa93 f3a3 	rbit	r3, r3
 80068e2:	667b      	str	r3, [r7, #100]	; 0x64
 80068e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ec:	fa93 f3a3 	rbit	r3, r3
 80068f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f2:	4b67      	ldr	r3, [pc, #412]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80068fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068fe:	fa92 f2a2 	rbit	r2, r2
 8006902:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006906:	fab2 f282 	clz	r2, r2
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	f042 0220 	orr.w	r2, r2, #32
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	f002 021f 	and.w	r2, r2, #31
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f202 	lsl.w	r2, r1, r2
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d17b      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0f3      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d13c      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x178>
 800692e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006932:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006936:	fa93 f3a3 	rbit	r3, r3
 800693a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	fab3 f383 	clz	r3, r3
 8006942:	b2db      	uxtb	r3, r3
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d102      	bne.n	8006958 <HAL_RCC_ClockConfig+0x128>
 8006952:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	e00f      	b.n	8006978 <HAL_RCC_ClockConfig+0x148>
 8006958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800695c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006960:	fa93 f3a3 	rbit	r3, r3
 8006964:	647b      	str	r3, [r7, #68]	; 0x44
 8006966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800696a:	643b      	str	r3, [r7, #64]	; 0x40
 800696c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696e:	fa93 f3a3 	rbit	r3, r3
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	4b46      	ldr	r3, [pc, #280]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800697c:	63ba      	str	r2, [r7, #56]	; 0x38
 800697e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006980:	fa92 f2a2 	rbit	r2, r2
 8006984:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006988:	fab2 f282 	clz	r2, r2
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	f042 0220 	orr.w	r2, r2, #32
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	f002 021f 	and.w	r2, r2, #31
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f202 	lsl.w	r2, r1, r2
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d13a      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0b2      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
 80069a8:	2302      	movs	r3, #2
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	fa93 f3a3 	rbit	r3, r3
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b6:	fab3 f383 	clz	r3, r3
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x1a0>
 80069ca:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	e00d      	b.n	80069ec <HAL_RCC_ClockConfig+0x1bc>
 80069d0:	2302      	movs	r3, #2
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	fa93 f3a3 	rbit	r3, r3
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
 80069dc:	2302      	movs	r3, #2
 80069de:	623b      	str	r3, [r7, #32]
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	fa93 f3a3 	rbit	r3, r3
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	4b29      	ldr	r3, [pc, #164]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2202      	movs	r2, #2
 80069ee:	61ba      	str	r2, [r7, #24]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	fa92 f2a2 	rbit	r2, r2
 80069f6:	617a      	str	r2, [r7, #20]
  return result;
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	fab2 f282 	clz	r2, r2
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	f042 0220 	orr.w	r2, r2, #32
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	f002 021f 	and.w	r2, r2, #31
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e079      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f023 0203 	bic.w	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	491a      	ldr	r1, [pc, #104]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fb fe8a 	bl	8002744 <HAL_GetTick>
 8006a30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a34:	f7fb fe86 	bl	8002744 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e061      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_RCC_ClockConfig+0x260>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f003 020c 	and.w	r2, r3, #12
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d1eb      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d214      	bcs.n	8006a94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 0207 	bic.w	r2, r3, #7
 8006a72:	4906      	ldr	r1, [pc, #24]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <HAL_RCC_ClockConfig+0x25c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e040      	b.n	8006b0e <HAL_RCC_ClockConfig+0x2de>
 8006a8c:	40022000 	.word	0x40022000
 8006a90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <HAL_RCC_ClockConfig+0x2e8>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	491a      	ldr	r1, [pc, #104]	; (8006b18 <HAL_RCC_ClockConfig+0x2e8>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006abe:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <HAL_RCC_ClockConfig+0x2e8>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4912      	ldr	r1, [pc, #72]	; (8006b18 <HAL_RCC_ClockConfig+0x2e8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ad2:	f000 f829 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <HAL_RCC_ClockConfig+0x2e8>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae0:	22f0      	movs	r2, #240	; 0xf0
 8006ae2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	fa92 f2a2 	rbit	r2, r2
 8006aea:	60fa      	str	r2, [r7, #12]
  return result;
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	fab2 f282 	clz	r2, r2
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	40d3      	lsrs	r3, r2
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <HAL_RCC_ClockConfig+0x2ec>)
 8006af8:	5cd3      	ldrb	r3, [r2, r3]
 8006afa:	fa21 f303 	lsr.w	r3, r1, r3
 8006afe:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <HAL_RCC_ClockConfig+0x2f0>)
 8006b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_RCC_ClockConfig+0x2f4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fb fdd8 	bl	80026bc <HAL_InitTick>
  
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3778      	adds	r7, #120	; 0x78
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	0800add8 	.word	0x0800add8
 8006b20:	20000000 	.word	0x20000000
 8006b24:	20000004 	.word	0x20000004

08006b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b08b      	sub	sp, #44	; 0x2c
 8006b2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006b42:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d002      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x30>
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0x36>
 8006b56:	e03c      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8006b5a:	623b      	str	r3, [r7, #32]
      break;
 8006b5c:	e03c      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006b64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006b68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	fa92 f2a2 	rbit	r2, r2
 8006b70:	607a      	str	r2, [r7, #4]
  return result;
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	fab2 f282 	clz	r2, r2
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	40d3      	lsrs	r3, r2
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006b7e:	5cd3      	ldrb	r3, [r2, r3]
 8006b80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006b82:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	220f      	movs	r2, #15
 8006b8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	fa92 f2a2 	rbit	r2, r2
 8006b94:	60fa      	str	r2, [r7, #12]
  return result;
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	fab2 f282 	clz	r2, r2
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	40d3      	lsrs	r3, r2
 8006ba0:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bb0:	4a0e      	ldr	r2, [pc, #56]	; (8006bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc0:	e004      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	623b      	str	r3, [r7, #32]
      break;
 8006bd0:	e002      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8006bd4:	623b      	str	r3, [r7, #32]
      break;
 8006bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	372c      	adds	r7, #44	; 0x2c
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000
 8006bec:	007a1200 	.word	0x007a1200
 8006bf0:	0800adf0 	.word	0x0800adf0
 8006bf4:	0800ae00 	.word	0x0800ae00
 8006bf8:	003d0900 	.word	0x003d0900

08006bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c00:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000000 	.word	0x20000000

08006c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006c1a:	f7ff ffef 	bl	8006bfc <HAL_RCC_GetHCLKFreq>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006c2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	fa92 f2a2 	rbit	r2, r2
 8006c34:	603a      	str	r2, [r7, #0]
  return result;
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	fab2 f282 	clz	r2, r2
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	40d3      	lsrs	r3, r2
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006c42:	5cd3      	ldrb	r3, [r2, r3]
 8006c44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40021000 	.word	0x40021000
 8006c54:	0800ade8 	.word	0x0800ade8

08006c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006c5e:	f7ff ffcd 	bl	8006bfc <HAL_RCC_GetHCLKFreq>
 8006c62:	4601      	mov	r1, r0
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006c6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006c70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	fa92 f2a2 	rbit	r2, r2
 8006c78:	603a      	str	r2, [r7, #0]
  return result;
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	fab2 f282 	clz	r2, r2
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	40d3      	lsrs	r3, r2
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006c86:	5cd3      	ldrb	r3, [r2, r3]
 8006c88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40021000 	.word	0x40021000
 8006c98:	0800ade8 	.word	0x0800ade8

08006c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b092      	sub	sp, #72	; 0x48
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 80cd 	beq.w	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc0:	4b8e      	ldr	r3, [pc, #568]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10e      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ccc:	4b8b      	ldr	r3, [pc, #556]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4a8a      	ldr	r2, [pc, #552]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	61d3      	str	r3, [r2, #28]
 8006cd8:	4b88      	ldr	r3, [pc, #544]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b82      	ldr	r3, [pc, #520]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a81      	ldr	r2, [pc, #516]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fb fd1f 	bl	8002744 <HAL_GetTick>
 8006d06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7fb fd1b 	bl	8002744 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b64      	cmp	r3, #100	; 0x64
 8006d16:	d901      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e0ea      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b78      	ldr	r3, [pc, #480]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d28:	4b74      	ldr	r3, [pc, #464]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07d      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d076      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d46:	4b6d      	ldr	r3, [pc, #436]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	fa93 f3a3 	rbit	r3, r3
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d60:	fab3 f383 	clz	r3, r3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	4b66      	ldr	r3, [pc, #408]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	461a      	mov	r2, r3
 8006d70:	2301      	movs	r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	fa93 f3a3 	rbit	r3, r3
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4b5d      	ldr	r3, [pc, #372]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	461a      	mov	r2, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d98:	4a58      	ldr	r2, [pc, #352]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d045      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fb fccc 	bl	8002744 <HAL_GetTick>
 8006dac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db0:	f7fb fcc8 	bl	8002744 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e095      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	fa93 f3a3 	rbit	r3, r3
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	fa93 f3a3 	rbit	r3, r3
 8006ddc:	61fb      	str	r3, [r7, #28]
  return result;
 8006dde:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de0:	fab3 f383 	clz	r3, r3
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f043 0302 	orr.w	r3, r3, #2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d102      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006df4:	4b41      	ldr	r3, [pc, #260]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	e007      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	fa93 f3a3 	rbit	r3, r3
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	4b3d      	ldr	r3, [pc, #244]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	613a      	str	r2, [r7, #16]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	fa92 f2a2 	rbit	r2, r2
 8006e14:	60fa      	str	r2, [r7, #12]
  return result;
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	fab2 f282 	clz	r2, r2
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	f002 021f 	and.w	r2, r2, #31
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0bd      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006e34:	4b31      	ldr	r3, [pc, #196]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	492e      	ldr	r1, [pc, #184]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4e:	4b2b      	ldr	r3, [pc, #172]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e58:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e66:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f023 0203 	bic.w	r2, r3, #3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	4922      	ldr	r1, [pc, #136]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f023 0210 	bic.w	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	491a      	ldr	r1, [pc, #104]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ea2:	4b16      	ldr	r3, [pc, #88]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	4913      	ldr	r1, [pc, #76]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006ec0:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	490b      	ldr	r1, [pc, #44]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	4904      	ldr	r1, [pc, #16]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3748      	adds	r7, #72	; 0x48
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40007000 	.word	0x40007000
 8006f04:	10908100 	.word	0x10908100

08006f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e049      	b.n	8006fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb fae6 	bl	8002500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f000 fac2 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d001      	beq.n	8006fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e040      	b.n	8007052 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_TIM_Base_Start_IT+0xa8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffa:	d009      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a18      	ldr	r2, [pc, #96]	; (8007064 <HAL_TIM_Base_Start_IT+0xac>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_TIM_Base_Start_IT+0xb0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d115      	bne.n	800703c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	4b15      	ldr	r3, [pc, #84]	; (800706c <HAL_TIM_Base_Start_IT+0xb4>)
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d015      	beq.n	800704e <HAL_TIM_Base_Start_IT+0x96>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007028:	d011      	beq.n	800704e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	e008      	b.n	800704e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	e000      	b.n	8007050 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40000400 	.word	0x40000400
 8007068:	40014000 	.word	0x40014000
 800706c:	00010007 	.word	0x00010007

08007070 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <HAL_TIM_Base_Stop_IT+0x48>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f240 4344 	movw	r3, #1092	; 0x444
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_Base_Stop_IT+0x48>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d122      	bne.n	800712a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d11b      	bne.n	800712a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 0202 	mvn.w	r2, #2
 80070fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f9be 	bl	8007492 <HAL_TIM_IC_CaptureCallback>
 8007116:	e005      	b.n	8007124 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9b0 	bl	800747e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9c1 	bl	80074a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b04      	cmp	r3, #4
 8007136:	d122      	bne.n	800717e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d11b      	bne.n	800717e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f06f 0204 	mvn.w	r2, #4
 800714e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f994 	bl	8007492 <HAL_TIM_IC_CaptureCallback>
 800716a:	e005      	b.n	8007178 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f986 	bl	800747e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f997 	bl	80074a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b08      	cmp	r3, #8
 800718a:	d122      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b08      	cmp	r3, #8
 8007198:	d11b      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f06f 0208 	mvn.w	r2, #8
 80071a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2204      	movs	r2, #4
 80071a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f96a 	bl	8007492 <HAL_TIM_IC_CaptureCallback>
 80071be:	e005      	b.n	80071cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f95c 	bl	800747e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f96d 	bl	80074a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d122      	bne.n	8007226 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d11b      	bne.n	8007226 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f06f 0210 	mvn.w	r2, #16
 80071f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2208      	movs	r2, #8
 80071fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f940 	bl	8007492 <HAL_TIM_IC_CaptureCallback>
 8007212:	e005      	b.n	8007220 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f932 	bl	800747e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f943 	bl	80074a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10e      	bne.n	8007252 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f06f 0201 	mvn.w	r2, #1
 800724a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fa ffc9 	bl	80021e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d10e      	bne.n	800727e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d107      	bne.n	800727e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fab3 	bl	80077e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 faa6 	bl	80077f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d10e      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f8f1 	bl	80074ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d10e      	bne.n	8007304 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d107      	bne.n	8007304 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0220 	mvn.w	r2, #32
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa66 	bl	80077d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIM_ConfigClockSource+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e0a8      	b.n	8007476 <HAL_TIM_ConfigClockSource+0x16a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800734e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d067      	beq.n	8007430 <HAL_TIM_ConfigClockSource+0x124>
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d80b      	bhi.n	800737c <HAL_TIM_ConfigClockSource+0x70>
 8007364:	2b10      	cmp	r3, #16
 8007366:	d073      	beq.n	8007450 <HAL_TIM_ConfigClockSource+0x144>
 8007368:	2b10      	cmp	r3, #16
 800736a:	d802      	bhi.n	8007372 <HAL_TIM_ConfigClockSource+0x66>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d06f      	beq.n	8007450 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007370:	e078      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007372:	2b20      	cmp	r3, #32
 8007374:	d06c      	beq.n	8007450 <HAL_TIM_ConfigClockSource+0x144>
 8007376:	2b30      	cmp	r3, #48	; 0x30
 8007378:	d06a      	beq.n	8007450 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800737a:	e073      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800737c:	2b70      	cmp	r3, #112	; 0x70
 800737e:	d00d      	beq.n	800739c <HAL_TIM_ConfigClockSource+0x90>
 8007380:	2b70      	cmp	r3, #112	; 0x70
 8007382:	d804      	bhi.n	800738e <HAL_TIM_ConfigClockSource+0x82>
 8007384:	2b50      	cmp	r3, #80	; 0x50
 8007386:	d033      	beq.n	80073f0 <HAL_TIM_ConfigClockSource+0xe4>
 8007388:	2b60      	cmp	r3, #96	; 0x60
 800738a:	d041      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800738c:	e06a      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800738e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007392:	d066      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x156>
 8007394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007398:	d017      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800739a:	e063      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6899      	ldr	r1, [r3, #8]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f000 f982 	bl	80076b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	609a      	str	r2, [r3, #8]
      break;
 80073c8:	e04c      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6899      	ldr	r1, [r3, #8]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f000 f96b 	bl	80076b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ec:	609a      	str	r2, [r3, #8]
      break;
 80073ee:	e039      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6859      	ldr	r1, [r3, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f000 f8df 	bl	80075c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2150      	movs	r1, #80	; 0x50
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f938 	bl	800767e <TIM_ITRx_SetConfig>
      break;
 800740e:	e029      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	6859      	ldr	r1, [r3, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	461a      	mov	r2, r3
 800741e:	f000 f8fe 	bl	800761e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2160      	movs	r1, #96	; 0x60
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f928 	bl	800767e <TIM_ITRx_SetConfig>
      break;
 800742e:	e019      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	461a      	mov	r2, r3
 800743e:	f000 f8bf 	bl	80075c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2140      	movs	r1, #64	; 0x40
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f918 	bl	800767e <TIM_ITRx_SetConfig>
      break;
 800744e:	e009      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f000 f90f 	bl	800767e <TIM_ITRx_SetConfig>
        break;
 8007460:	e000      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a32      	ldr	r2, [pc, #200]	; (80075ac <TIM_Base_SetConfig+0xdc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d007      	beq.n	80074f8 <TIM_Base_SetConfig+0x28>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0x28>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a2f      	ldr	r2, [pc, #188]	; (80075b0 <TIM_Base_SetConfig+0xe0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a27      	ldr	r2, [pc, #156]	; (80075ac <TIM_Base_SetConfig+0xdc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <TIM_Base_SetConfig+0x6a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d00f      	beq.n	800753a <TIM_Base_SetConfig+0x6a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <TIM_Base_SetConfig+0xe0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00b      	beq.n	800753a <TIM_Base_SetConfig+0x6a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <TIM_Base_SetConfig+0xe4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d007      	beq.n	800753a <TIM_Base_SetConfig+0x6a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a22      	ldr	r2, [pc, #136]	; (80075b8 <TIM_Base_SetConfig+0xe8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_Base_SetConfig+0x6a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a21      	ldr	r2, [pc, #132]	; (80075bc <TIM_Base_SetConfig+0xec>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d108      	bne.n	800754c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <TIM_Base_SetConfig+0xdc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0xc0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a0e      	ldr	r2, [pc, #56]	; (80075b4 <TIM_Base_SetConfig+0xe4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0xc0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a0d      	ldr	r2, [pc, #52]	; (80075b8 <TIM_Base_SetConfig+0xe8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0xc0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a0c      	ldr	r2, [pc, #48]	; (80075bc <TIM_Base_SetConfig+0xec>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d103      	bne.n	8007598 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	615a      	str	r2, [r3, #20]
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	40012c00 	.word	0x40012c00
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800

080075c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0201 	bic.w	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 030a 	bic.w	r3, r3, #10
 80075fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800761e:	b480      	push	{r7}
 8007620:	b087      	sub	sp, #28
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f023 0210 	bic.w	r2, r3, #16
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	031b      	lsls	r3, r3, #12
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800765a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	f043 0307 	orr.w	r3, r3, #7
 80076a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	021a      	lsls	r2, r3, #8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4313      	orrs	r3, r2
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	609a      	str	r2, [r3, #8]
}
 80076e8:	bf00      	nop
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e054      	b.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d108      	bne.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800773c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00e      	beq.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007774:	d009      	beq.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d004      	beq.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a11      	ldr	r2, [pc, #68]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d10c      	bne.n	80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	4313      	orrs	r3, r2
 800779a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40014000 	.word	0x40014000

080077d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e040      	b.n	80078a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fa feba 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2224      	movs	r2, #36	; 0x24
 8007838:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fb1e 	bl	8007e8c <UART_SetConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e022      	b.n	80078a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fc4a 	bl	80080fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcd1 	bl	8008240 <UART_CheckIdleState>
 800789e:	4603      	mov	r3, r0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078bc:	2b20      	cmp	r3, #32
 80078be:	f040 8082 	bne.w	80079c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_UART_Transmit+0x26>
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e07a      	b.n	80079c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_UART_Transmit+0x38>
 80078dc:	2302      	movs	r3, #2
 80078de:	e073      	b.n	80079c8 <HAL_UART_Transmit+0x120>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2221      	movs	r2, #33	; 0x21
 80078f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078f6:	f7fa ff25 	bl	8002744 <HAL_GetTick>
 80078fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	88fa      	ldrh	r2, [r7, #6]
 8007900:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	88fa      	ldrh	r2, [r7, #6]
 8007908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d108      	bne.n	8007928 <HAL_UART_Transmit+0x80>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e003      	b.n	8007930 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007938:	e02d      	b.n	8007996 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2200      	movs	r2, #0
 8007942:	2180      	movs	r1, #128	; 0x80
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fcc4 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e039      	b.n	80079c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007966:	b292      	uxth	r2, r2
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	3302      	adds	r3, #2
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	e008      	b.n	8007984 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	b292      	uxth	r2, r2
 800797c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	3301      	adds	r3, #1
 8007982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1cb      	bne.n	800793a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2200      	movs	r2, #0
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fc90 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e005      	b.n	80079c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079c6:	2302      	movs	r3, #2
  }
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d12c      	bne.n	8007a40 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_UART_Receive_IT+0x22>
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e025      	b.n	8007a42 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_UART_Receive_IT+0x34>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e01e      	b.n	8007a42 <HAL_UART_Receive_IT+0x72>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a2e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fcc8 	bl	80083cc <UART_Start_Receive_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	e000      	b.n	8007a42 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007a40:	2302      	movs	r3, #2
  }
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a72:	4013      	ands	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d113      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d009      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 81cd 	beq.w	8007e34 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
      }
      return;
 8007aa2:	e1c7      	b.n	8007e34 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 80e3 	beq.w	8007c72 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4ba5      	ldr	r3, [pc, #660]	; (8007d50 <HAL_UART_IRQHandler+0x304>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80d8 	beq.w	8007c72 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_UART_IRQHandler+0xa2>
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae4:	f043 0201 	orr.w	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <HAL_UART_IRQHandler+0xce>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2202      	movs	r2, #2
 8007b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b10:	f043 0204 	orr.w	r2, r3, #4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <HAL_UART_IRQHandler+0xfa>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2204      	movs	r2, #4
 8007b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3c:	f043 0202 	orr.w	r2, r3, #2
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d015      	beq.n	8007b7c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2208      	movs	r2, #8
 8007b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b72:	f043 0208 	orr.w	r2, r3, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d011      	beq.n	8007baa <HAL_UART_IRQHandler+0x15e>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8141 	beq.w	8007e38 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b40      	cmp	r3, #64	; 0x40
 8007bee:	d004      	beq.n	8007bfa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d031      	beq.n	8007c5e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fc6e 	bl	80084dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d123      	bne.n	8007c56 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c1c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d013      	beq.n	8007c4e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2a:	4a4a      	ldr	r2, [pc, #296]	; (8007d54 <HAL_UART_IRQHandler+0x308>)
 8007c2c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fb fe40 	bl	80038b8 <HAL_DMA_Abort_IT>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d017      	beq.n	8007c6e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	e00f      	b.n	8007c6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f906 	bl	8007e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c54:	e00b      	b.n	8007c6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f902 	bl	8007e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5c:	e007      	b.n	8007c6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8fe 	bl	8007e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007c6c:	e0e4      	b.n	8007e38 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6e:	bf00      	nop
    return;
 8007c70:	e0e2      	b.n	8007e38 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f040 80a7 	bne.w	8007dca <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a1 	beq.w	8007dca <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 809b 	beq.w	8007dca <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2210      	movs	r2, #16
 8007c9a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d156      	bne.n	8007d58 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007cb4:	893b      	ldrh	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80c0 	beq.w	8007e3c <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cc2:	893a      	ldrh	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	f080 80b9 	bcs.w	8007e3c <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	893a      	ldrh	r2, [r7, #8]
 8007cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d02a      	beq.n	8007d32 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d0a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0210 	bic.w	r2, r2, #16
 8007d26:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fb fd8a 	bl	8003846 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f894 	bl	8007e74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d4c:	e076      	b.n	8007e3c <HAL_UART_IRQHandler+0x3f0>
 8007d4e:	bf00      	nop
 8007d50:	04000120 	.word	0x04000120
 8007d54:	0800853b 	.word	0x0800853b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d064      	beq.n	8007e40 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8007d76:	897b      	ldrh	r3, [r7, #10]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d061      	beq.n	8007e40 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0210 	bic.w	r2, r2, #16
 8007dbc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dbe:	897b      	ldrh	r3, [r7, #10]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f856 	bl	8007e74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dc8:	e03a      	b.n	8007e40 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00d      	beq.n	8007df0 <HAL_UART_IRQHandler+0x3a4>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fca9 	bl	8008740 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dee:	e02a      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
    }
    return;
 8007e14:	e016      	b.n	8007e44 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb9b 	bl	8008566 <UART_EndTransmit_IT>
    return;
 8007e30:	bf00      	nop
 8007e32:	e008      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
      return;
 8007e34:	bf00      	nop
 8007e36:	e006      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
    return;
 8007e38:	bf00      	nop
 8007e3a:	e004      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
      return;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
      return;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_UART_IRQHandler+0x3fa>
    return;
 8007e44:	bf00      	nop
  }

}
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b8b      	ldr	r3, [pc, #556]	; (80080e4 <UART_SetConfig+0x258>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a79      	ldr	r2, [pc, #484]	; (80080e8 <UART_SetConfig+0x25c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d121      	bne.n	8007f4c <UART_SetConfig+0xc0>
 8007f08:	4b78      	ldr	r3, [pc, #480]	; (80080ec <UART_SetConfig+0x260>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d817      	bhi.n	8007f44 <UART_SetConfig+0xb8>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x90>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f3f 	.word	0x08007f3f
 8007f28:	08007f33 	.word	0x08007f33
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e01e      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f32:	2302      	movs	r3, #2
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e01b      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e018      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f3e:	2308      	movs	r3, #8
 8007f40:	77fb      	strb	r3, [r7, #31]
 8007f42:	e015      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f44:	2310      	movs	r3, #16
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	bf00      	nop
 8007f4a:	e011      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a67      	ldr	r2, [pc, #412]	; (80080f0 <UART_SetConfig+0x264>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d102      	bne.n	8007f5c <UART_SetConfig+0xd0>
 8007f56:	2300      	movs	r3, #0
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e009      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a64      	ldr	r2, [pc, #400]	; (80080f4 <UART_SetConfig+0x268>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d102      	bne.n	8007f6c <UART_SetConfig+0xe0>
 8007f66:	2300      	movs	r3, #0
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e001      	b.n	8007f70 <UART_SetConfig+0xe4>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f78:	d15c      	bne.n	8008034 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d828      	bhi.n	8007fd2 <UART_SetConfig+0x146>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0xfc>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fd3 	.word	0x08007fd3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08007fd3 	.word	0x08007fd3
 8007fa4:	08007fd3 	.word	0x08007fd3
 8007fa8:	08007fcb 	.word	0x08007fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fe fe32 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	61b8      	str	r0, [r7, #24]
        break;
 8007fb2:	e013      	b.n	8007fdc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb4:	f7fe fe50 	bl	8006c58 <HAL_RCC_GetPCLK2Freq>
 8007fb8:	61b8      	str	r0, [r7, #24]
        break;
 8007fba:	e00f      	b.n	8007fdc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fbc:	4b4e      	ldr	r3, [pc, #312]	; (80080f8 <UART_SetConfig+0x26c>)
 8007fbe:	61bb      	str	r3, [r7, #24]
        break;
 8007fc0:	e00c      	b.n	8007fdc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fe fdb1 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8007fc6:	61b8      	str	r0, [r7, #24]
        break;
 8007fc8:	e008      	b.n	8007fdc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fce:	61bb      	str	r3, [r7, #24]
        break;
 8007fd0:	e004      	b.n	8007fdc <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8007fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d074      	beq.n	80080cc <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	005a      	lsls	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	441a      	add	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d916      	bls.n	800802e <UART_SetConfig+0x1a2>
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008006:	d212      	bcs.n	800802e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f023 030f 	bic.w	r3, r3, #15
 8008010:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	b29a      	uxth	r2, r3
 800801e:	89fb      	ldrh	r3, [r7, #14]
 8008020:	4313      	orrs	r3, r2
 8008022:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	89fa      	ldrh	r2, [r7, #14]
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	e04e      	b.n	80080cc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	77bb      	strb	r3, [r7, #30]
 8008032:	e04b      	b.n	80080cc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008034:	7ffb      	ldrb	r3, [r7, #31]
 8008036:	2b08      	cmp	r3, #8
 8008038:	d827      	bhi.n	800808a <UART_SetConfig+0x1fe>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x1b4>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008065 	.word	0x08008065
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008075 	.word	0x08008075
 800804c:	0800808b 	.word	0x0800808b
 8008050:	0800807b 	.word	0x0800807b
 8008054:	0800808b 	.word	0x0800808b
 8008058:	0800808b 	.word	0x0800808b
 800805c:	0800808b 	.word	0x0800808b
 8008060:	08008083 	.word	0x08008083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fe fdd6 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8008068:	61b8      	str	r0, [r7, #24]
        break;
 800806a:	e013      	b.n	8008094 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800806c:	f7fe fdf4 	bl	8006c58 <HAL_RCC_GetPCLK2Freq>
 8008070:	61b8      	str	r0, [r7, #24]
        break;
 8008072:	e00f      	b.n	8008094 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008074:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <UART_SetConfig+0x26c>)
 8008076:	61bb      	str	r3, [r7, #24]
        break;
 8008078:	e00c      	b.n	8008094 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807a:	f7fe fd55 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 800807e:	61b8      	str	r0, [r7, #24]
        break;
 8008080:	e008      	b.n	8008094 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008086:	61bb      	str	r3, [r7, #24]
        break;
 8008088:	e004      	b.n	8008094 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	77bb      	strb	r3, [r7, #30]
        break;
 8008092:	bf00      	nop
    }

    if (pclk != 0U)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d018      	beq.n	80080cc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	085a      	lsrs	r2, r3, #1
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	441a      	add	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2b0f      	cmp	r3, #15
 80080b4:	d908      	bls.n	80080c8 <UART_SetConfig+0x23c>
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d204      	bcs.n	80080c8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e001      	b.n	80080cc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	efff69f3 	.word	0xefff69f3
 80080e8:	40013800 	.word	0x40013800
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40004400 	.word	0x40004400
 80080f4:	40004800 	.word	0x40004800
 80080f8:	007a1200 	.word	0x007a1200

080080fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01a      	beq.n	8008212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081fa:	d10a      	bne.n	8008212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008250:	f7fa fa78 	bl	8002744 <HAL_GetTick>
 8008254:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b08      	cmp	r3, #8
 8008262:	d10e      	bne.n	8008282 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f82d 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e023      	b.n	80082ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d10e      	bne.n	80082ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f817 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e00d      	b.n	80082ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	e05e      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d05a      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ec:	f7fa fa2a 	bl	8002744 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d302      	bcc.n	8008302 <UART_WaitOnFlagUntilTimeout+0x30>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11b      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008310:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e043      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d02c      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008356:	d124      	bne.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008370:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2220      	movs	r2, #32
 8008386:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e00f      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4013      	ands	r3, r2
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d091      	beq.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fe:	d10e      	bne.n	800841e <UART_Start_Receive_IT+0x52>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <UART_Start_Receive_IT+0x48>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800840e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008412:	e02d      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	; 0xff
 8008418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800841c:	e028      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <UART_Start_Receive_IT+0x76>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <UART_Start_Receive_IT+0x6c>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008436:	e01b      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	227f      	movs	r2, #127	; 0x7f
 800843c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008440:	e016      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844a:	d10d      	bne.n	8008468 <UART_Start_Receive_IT+0x9c>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <UART_Start_Receive_IT+0x92>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	227f      	movs	r2, #127	; 0x7f
 8008458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800845c:	e008      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	223f      	movs	r2, #63	; 0x3f
 8008462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008466:	e003      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2222      	movs	r2, #34	; 0x22
 800847c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0201 	orr.w	r2, r2, #1
 800848c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d107      	bne.n	80084a8 <UART_Start_Receive_IT+0xdc>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a0c      	ldr	r2, [pc, #48]	; (80084d4 <UART_Start_Receive_IT+0x108>)
 80084a4:	665a      	str	r2, [r3, #100]	; 0x64
 80084a6:	e002      	b.n	80084ae <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <UART_Start_Receive_IT+0x10c>)
 80084ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80084c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	0800866d 	.word	0x0800866d
 80084d8:	08008599 	.word	0x08008599

080084dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0210 	bic.w	r2, r2, #16
 800851a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff fc81 	bl	8007e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fc5e 	bl	8007e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ac:	2b22      	cmp	r3, #34	; 0x22
 80085ae:	d151      	bne.n	8008654 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085b6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085b8:	89bb      	ldrh	r3, [r7, #12]
 80085ba:	b2d9      	uxtb	r1, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c4:	400a      	ands	r2, r1
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085da:	b29b      	uxth	r3, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d138      	bne.n	8008664 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008600:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10f      	bne.n	8008646 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0210 	bic.w	r2, r2, #16
 8008634:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fc18 	bl	8007e74 <HAL_UARTEx_RxEventCallback>
 8008644:	e002      	b.n	800864c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7f9 fe1c 	bl	8002284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008652:	e007      	b.n	8008664 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699a      	ldr	r2, [r3, #24]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0208 	orr.w	r2, r2, #8
 8008662:	619a      	str	r2, [r3, #24]
}
 8008664:	bf00      	nop
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800867a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008680:	2b22      	cmp	r3, #34	; 0x22
 8008682:	d151      	bne.n	8008728 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800868a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008692:	89ba      	ldrh	r2, [r7, #12]
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	4013      	ands	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	1c9a      	adds	r2, r3, #2
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d138      	bne.n	8008738 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086d4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10f      	bne.n	800871a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0210 	bic.w	r2, r2, #16
 8008708:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fbae 	bl	8007e74 <HAL_UARTEx_RxEventCallback>
 8008718:	e002      	b.n	8008720 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7f9 fdb2 	bl	8002284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008726:	e007      	b.n	8008738 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0208 	orr.w	r2, r2, #8
 8008736:	619a      	str	r2, [r3, #24]
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <__errno>:
 8008754:	4b01      	ldr	r3, [pc, #4]	; (800875c <__errno+0x8>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	2000000c 	.word	0x2000000c

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4e0d      	ldr	r6, [pc, #52]	; (8008798 <__libc_init_array+0x38>)
 8008764:	4c0d      	ldr	r4, [pc, #52]	; (800879c <__libc_init_array+0x3c>)
 8008766:	1ba4      	subs	r4, r4, r6
 8008768:	10a4      	asrs	r4, r4, #2
 800876a:	2500      	movs	r5, #0
 800876c:	42a5      	cmp	r5, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	4e0b      	ldr	r6, [pc, #44]	; (80087a0 <__libc_init_array+0x40>)
 8008772:	4c0c      	ldr	r4, [pc, #48]	; (80087a4 <__libc_init_array+0x44>)
 8008774:	f002 f85c 	bl	800a830 <_init>
 8008778:	1ba4      	subs	r4, r4, r6
 800877a:	10a4      	asrs	r4, r4, #2
 800877c:	2500      	movs	r5, #0
 800877e:	42a5      	cmp	r5, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008788:	4798      	blx	r3
 800878a:	3501      	adds	r5, #1
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008792:	4798      	blx	r3
 8008794:	3501      	adds	r5, #1
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	0800b070 	.word	0x0800b070
 800879c:	0800b070 	.word	0x0800b070
 80087a0:	0800b070 	.word	0x0800b070
 80087a4:	0800b074 	.word	0x0800b074

080087a8 <malloc>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <malloc+0xc>)
 80087aa:	4601      	mov	r1, r0
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	f000 b859 	b.w	8008864 <_malloc_r>
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c

080087b8 <memset>:
 80087b8:	4402      	add	r2, r0
 80087ba:	4603      	mov	r3, r0
 80087bc:	4293      	cmp	r3, r2
 80087be:	d100      	bne.n	80087c2 <memset+0xa>
 80087c0:	4770      	bx	lr
 80087c2:	f803 1b01 	strb.w	r1, [r3], #1
 80087c6:	e7f9      	b.n	80087bc <memset+0x4>

080087c8 <_free_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4605      	mov	r5, r0
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d045      	beq.n	800885c <_free_r+0x94>
 80087d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d4:	1f0c      	subs	r4, r1, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfb8      	it	lt
 80087da:	18e4      	addlt	r4, r4, r3
 80087dc:	f001 fb85 	bl	8009eea <__malloc_lock>
 80087e0:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <_free_r+0x98>)
 80087e2:	6813      	ldr	r3, [r2, #0]
 80087e4:	4610      	mov	r0, r2
 80087e6:	b933      	cbnz	r3, 80087f6 <_free_r+0x2e>
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	6014      	str	r4, [r2, #0]
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f2:	f001 bb7b 	b.w	8009eec <__malloc_unlock>
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	d90c      	bls.n	8008814 <_free_r+0x4c>
 80087fa:	6821      	ldr	r1, [r4, #0]
 80087fc:	1862      	adds	r2, r4, r1
 80087fe:	4293      	cmp	r3, r2
 8008800:	bf04      	itt	eq
 8008802:	681a      	ldreq	r2, [r3, #0]
 8008804:	685b      	ldreq	r3, [r3, #4]
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	bf04      	itt	eq
 800880a:	1852      	addeq	r2, r2, r1
 800880c:	6022      	streq	r2, [r4, #0]
 800880e:	6004      	str	r4, [r0, #0]
 8008810:	e7ec      	b.n	80087ec <_free_r+0x24>
 8008812:	4613      	mov	r3, r2
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	b10a      	cbz	r2, 800881c <_free_r+0x54>
 8008818:	42a2      	cmp	r2, r4
 800881a:	d9fa      	bls.n	8008812 <_free_r+0x4a>
 800881c:	6819      	ldr	r1, [r3, #0]
 800881e:	1858      	adds	r0, r3, r1
 8008820:	42a0      	cmp	r0, r4
 8008822:	d10b      	bne.n	800883c <_free_r+0x74>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	4401      	add	r1, r0
 8008828:	1858      	adds	r0, r3, r1
 800882a:	4282      	cmp	r2, r0
 800882c:	6019      	str	r1, [r3, #0]
 800882e:	d1dd      	bne.n	80087ec <_free_r+0x24>
 8008830:	6810      	ldr	r0, [r2, #0]
 8008832:	6852      	ldr	r2, [r2, #4]
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	4401      	add	r1, r0
 8008838:	6019      	str	r1, [r3, #0]
 800883a:	e7d7      	b.n	80087ec <_free_r+0x24>
 800883c:	d902      	bls.n	8008844 <_free_r+0x7c>
 800883e:	230c      	movs	r3, #12
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	e7d3      	b.n	80087ec <_free_r+0x24>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	1821      	adds	r1, r4, r0
 8008848:	428a      	cmp	r2, r1
 800884a:	bf04      	itt	eq
 800884c:	6811      	ldreq	r1, [r2, #0]
 800884e:	6852      	ldreq	r2, [r2, #4]
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	bf04      	itt	eq
 8008854:	1809      	addeq	r1, r1, r0
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	605c      	str	r4, [r3, #4]
 800885a:	e7c7      	b.n	80087ec <_free_r+0x24>
 800885c:	bd38      	pop	{r3, r4, r5, pc}
 800885e:	bf00      	nop
 8008860:	20000208 	.word	0x20000208

08008864 <_malloc_r>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	1ccd      	adds	r5, r1, #3
 8008868:	f025 0503 	bic.w	r5, r5, #3
 800886c:	3508      	adds	r5, #8
 800886e:	2d0c      	cmp	r5, #12
 8008870:	bf38      	it	cc
 8008872:	250c      	movcc	r5, #12
 8008874:	2d00      	cmp	r5, #0
 8008876:	4606      	mov	r6, r0
 8008878:	db01      	blt.n	800887e <_malloc_r+0x1a>
 800887a:	42a9      	cmp	r1, r5
 800887c:	d903      	bls.n	8008886 <_malloc_r+0x22>
 800887e:	230c      	movs	r3, #12
 8008880:	6033      	str	r3, [r6, #0]
 8008882:	2000      	movs	r0, #0
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	f001 fb30 	bl	8009eea <__malloc_lock>
 800888a:	4a21      	ldr	r2, [pc, #132]	; (8008910 <_malloc_r+0xac>)
 800888c:	6814      	ldr	r4, [r2, #0]
 800888e:	4621      	mov	r1, r4
 8008890:	b991      	cbnz	r1, 80088b8 <_malloc_r+0x54>
 8008892:	4c20      	ldr	r4, [pc, #128]	; (8008914 <_malloc_r+0xb0>)
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	b91b      	cbnz	r3, 80088a0 <_malloc_r+0x3c>
 8008898:	4630      	mov	r0, r6
 800889a:	f000 fc99 	bl	80091d0 <_sbrk_r>
 800889e:	6020      	str	r0, [r4, #0]
 80088a0:	4629      	mov	r1, r5
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 fc94 	bl	80091d0 <_sbrk_r>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d124      	bne.n	80088f6 <_malloc_r+0x92>
 80088ac:	230c      	movs	r3, #12
 80088ae:	6033      	str	r3, [r6, #0]
 80088b0:	4630      	mov	r0, r6
 80088b2:	f001 fb1b 	bl	8009eec <__malloc_unlock>
 80088b6:	e7e4      	b.n	8008882 <_malloc_r+0x1e>
 80088b8:	680b      	ldr	r3, [r1, #0]
 80088ba:	1b5b      	subs	r3, r3, r5
 80088bc:	d418      	bmi.n	80088f0 <_malloc_r+0x8c>
 80088be:	2b0b      	cmp	r3, #11
 80088c0:	d90f      	bls.n	80088e2 <_malloc_r+0x7e>
 80088c2:	600b      	str	r3, [r1, #0]
 80088c4:	50cd      	str	r5, [r1, r3]
 80088c6:	18cc      	adds	r4, r1, r3
 80088c8:	4630      	mov	r0, r6
 80088ca:	f001 fb0f 	bl	8009eec <__malloc_unlock>
 80088ce:	f104 000b 	add.w	r0, r4, #11
 80088d2:	1d23      	adds	r3, r4, #4
 80088d4:	f020 0007 	bic.w	r0, r0, #7
 80088d8:	1ac3      	subs	r3, r0, r3
 80088da:	d0d3      	beq.n	8008884 <_malloc_r+0x20>
 80088dc:	425a      	negs	r2, r3
 80088de:	50e2      	str	r2, [r4, r3]
 80088e0:	e7d0      	b.n	8008884 <_malloc_r+0x20>
 80088e2:	428c      	cmp	r4, r1
 80088e4:	684b      	ldr	r3, [r1, #4]
 80088e6:	bf16      	itet	ne
 80088e8:	6063      	strne	r3, [r4, #4]
 80088ea:	6013      	streq	r3, [r2, #0]
 80088ec:	460c      	movne	r4, r1
 80088ee:	e7eb      	b.n	80088c8 <_malloc_r+0x64>
 80088f0:	460c      	mov	r4, r1
 80088f2:	6849      	ldr	r1, [r1, #4]
 80088f4:	e7cc      	b.n	8008890 <_malloc_r+0x2c>
 80088f6:	1cc4      	adds	r4, r0, #3
 80088f8:	f024 0403 	bic.w	r4, r4, #3
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d005      	beq.n	800890c <_malloc_r+0xa8>
 8008900:	1a21      	subs	r1, r4, r0
 8008902:	4630      	mov	r0, r6
 8008904:	f000 fc64 	bl	80091d0 <_sbrk_r>
 8008908:	3001      	adds	r0, #1
 800890a:	d0cf      	beq.n	80088ac <_malloc_r+0x48>
 800890c:	6025      	str	r5, [r4, #0]
 800890e:	e7db      	b.n	80088c8 <_malloc_r+0x64>
 8008910:	20000208 	.word	0x20000208
 8008914:	2000020c 	.word	0x2000020c

08008918 <__cvt>:
 8008918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	ec55 4b10 	vmov	r4, r5, d0
 8008920:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008922:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008926:	2d00      	cmp	r5, #0
 8008928:	460e      	mov	r6, r1
 800892a:	4691      	mov	r9, r2
 800892c:	4619      	mov	r1, r3
 800892e:	bfb8      	it	lt
 8008930:	4622      	movlt	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	f027 0720 	bic.w	r7, r7, #32
 8008938:	bfbb      	ittet	lt
 800893a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800893e:	461d      	movlt	r5, r3
 8008940:	2300      	movge	r3, #0
 8008942:	232d      	movlt	r3, #45	; 0x2d
 8008944:	bfb8      	it	lt
 8008946:	4614      	movlt	r4, r2
 8008948:	2f46      	cmp	r7, #70	; 0x46
 800894a:	700b      	strb	r3, [r1, #0]
 800894c:	d004      	beq.n	8008958 <__cvt+0x40>
 800894e:	2f45      	cmp	r7, #69	; 0x45
 8008950:	d100      	bne.n	8008954 <__cvt+0x3c>
 8008952:	3601      	adds	r6, #1
 8008954:	2102      	movs	r1, #2
 8008956:	e000      	b.n	800895a <__cvt+0x42>
 8008958:	2103      	movs	r1, #3
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	ab02      	add	r3, sp, #8
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4632      	mov	r2, r6
 8008964:	4653      	mov	r3, sl
 8008966:	ec45 4b10 	vmov	d0, r4, r5
 800896a:	f000 fced 	bl	8009348 <_dtoa_r>
 800896e:	2f47      	cmp	r7, #71	; 0x47
 8008970:	4680      	mov	r8, r0
 8008972:	d102      	bne.n	800897a <__cvt+0x62>
 8008974:	f019 0f01 	tst.w	r9, #1
 8008978:	d026      	beq.n	80089c8 <__cvt+0xb0>
 800897a:	2f46      	cmp	r7, #70	; 0x46
 800897c:	eb08 0906 	add.w	r9, r8, r6
 8008980:	d111      	bne.n	80089a6 <__cvt+0x8e>
 8008982:	f898 3000 	ldrb.w	r3, [r8]
 8008986:	2b30      	cmp	r3, #48	; 0x30
 8008988:	d10a      	bne.n	80089a0 <__cvt+0x88>
 800898a:	2200      	movs	r2, #0
 800898c:	2300      	movs	r3, #0
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f8a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008996:	b918      	cbnz	r0, 80089a0 <__cvt+0x88>
 8008998:	f1c6 0601 	rsb	r6, r6, #1
 800899c:	f8ca 6000 	str.w	r6, [sl]
 80089a0:	f8da 3000 	ldr.w	r3, [sl]
 80089a4:	4499      	add	r9, r3
 80089a6:	2200      	movs	r2, #0
 80089a8:	2300      	movs	r3, #0
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7f8 f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 80089b2:	b938      	cbnz	r0, 80089c4 <__cvt+0xac>
 80089b4:	2230      	movs	r2, #48	; 0x30
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	454b      	cmp	r3, r9
 80089ba:	d205      	bcs.n	80089c8 <__cvt+0xb0>
 80089bc:	1c59      	adds	r1, r3, #1
 80089be:	9103      	str	r1, [sp, #12]
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	e7f8      	b.n	80089b6 <__cvt+0x9e>
 80089c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089cc:	eba3 0308 	sub.w	r3, r3, r8
 80089d0:	4640      	mov	r0, r8
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	b004      	add	sp, #16
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080089da <__exponent>:
 80089da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089dc:	2900      	cmp	r1, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	bfba      	itte	lt
 80089e2:	4249      	neglt	r1, r1
 80089e4:	232d      	movlt	r3, #45	; 0x2d
 80089e6:	232b      	movge	r3, #43	; 0x2b
 80089e8:	2909      	cmp	r1, #9
 80089ea:	f804 2b02 	strb.w	r2, [r4], #2
 80089ee:	7043      	strb	r3, [r0, #1]
 80089f0:	dd20      	ble.n	8008a34 <__exponent+0x5a>
 80089f2:	f10d 0307 	add.w	r3, sp, #7
 80089f6:	461f      	mov	r7, r3
 80089f8:	260a      	movs	r6, #10
 80089fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80089fe:	fb06 1115 	mls	r1, r6, r5, r1
 8008a02:	3130      	adds	r1, #48	; 0x30
 8008a04:	2d09      	cmp	r5, #9
 8008a06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008a0e:	4629      	mov	r1, r5
 8008a10:	dc09      	bgt.n	8008a26 <__exponent+0x4c>
 8008a12:	3130      	adds	r1, #48	; 0x30
 8008a14:	3b02      	subs	r3, #2
 8008a16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008a1a:	42bb      	cmp	r3, r7
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	d304      	bcc.n	8008a2a <__exponent+0x50>
 8008a20:	1a10      	subs	r0, r2, r0
 8008a22:	b003      	add	sp, #12
 8008a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a26:	4613      	mov	r3, r2
 8008a28:	e7e7      	b.n	80089fa <__exponent+0x20>
 8008a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2e:	f804 2b01 	strb.w	r2, [r4], #1
 8008a32:	e7f2      	b.n	8008a1a <__exponent+0x40>
 8008a34:	2330      	movs	r3, #48	; 0x30
 8008a36:	4419      	add	r1, r3
 8008a38:	7083      	strb	r3, [r0, #2]
 8008a3a:	1d02      	adds	r2, r0, #4
 8008a3c:	70c1      	strb	r1, [r0, #3]
 8008a3e:	e7ef      	b.n	8008a20 <__exponent+0x46>

08008a40 <_printf_float>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	b08d      	sub	sp, #52	; 0x34
 8008a46:	460c      	mov	r4, r1
 8008a48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	461f      	mov	r7, r3
 8008a50:	4605      	mov	r5, r0
 8008a52:	f001 fa31 	bl	8009eb8 <_localeconv_r>
 8008a56:	6803      	ldr	r3, [r0, #0]
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fbc2 	bl	80001e4 <strlen>
 8008a60:	2300      	movs	r3, #0
 8008a62:	930a      	str	r3, [sp, #40]	; 0x28
 8008a64:	f8d8 3000 	ldr.w	r3, [r8]
 8008a68:	9005      	str	r0, [sp, #20]
 8008a6a:	3307      	adds	r3, #7
 8008a6c:	f023 0307 	bic.w	r3, r3, #7
 8008a70:	f103 0208 	add.w	r2, r3, #8
 8008a74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a78:	f8d4 b000 	ldr.w	fp, [r4]
 8008a7c:	f8c8 2000 	str.w	r2, [r8]
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a90:	9307      	str	r3, [sp, #28]
 8008a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a96:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9a:	4ba7      	ldr	r3, [pc, #668]	; (8008d38 <_printf_float+0x2f8>)
 8008a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aa0:	f7f8 f854 	bl	8000b4c <__aeabi_dcmpun>
 8008aa4:	bb70      	cbnz	r0, 8008b04 <_printf_float+0xc4>
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aaa:	4ba3      	ldr	r3, [pc, #652]	; (8008d38 <_printf_float+0x2f8>)
 8008aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ab0:	f7f8 f82e 	bl	8000b10 <__aeabi_dcmple>
 8008ab4:	bb30      	cbnz	r0, 8008b04 <_printf_float+0xc4>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f8 f81d 	bl	8000afc <__aeabi_dcmplt>
 8008ac2:	b110      	cbz	r0, 8008aca <_printf_float+0x8a>
 8008ac4:	232d      	movs	r3, #45	; 0x2d
 8008ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aca:	4a9c      	ldr	r2, [pc, #624]	; (8008d3c <_printf_float+0x2fc>)
 8008acc:	4b9c      	ldr	r3, [pc, #624]	; (8008d40 <_printf_float+0x300>)
 8008ace:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008ad2:	bf8c      	ite	hi
 8008ad4:	4690      	movhi	r8, r2
 8008ad6:	4698      	movls	r8, r3
 8008ad8:	2303      	movs	r3, #3
 8008ada:	f02b 0204 	bic.w	r2, fp, #4
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	6022      	str	r2, [r4, #0]
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	9700      	str	r7, [sp, #0]
 8008ae8:	4633      	mov	r3, r6
 8008aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008aec:	4621      	mov	r1, r4
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 f9e6 	bl	8008ec0 <_printf_common>
 8008af4:	3001      	adds	r0, #1
 8008af6:	f040 808d 	bne.w	8008c14 <_printf_float+0x1d4>
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	b00d      	add	sp, #52	; 0x34
 8008b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b04:	4642      	mov	r2, r8
 8008b06:	464b      	mov	r3, r9
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f8 f81e 	bl	8000b4c <__aeabi_dcmpun>
 8008b10:	b110      	cbz	r0, 8008b18 <_printf_float+0xd8>
 8008b12:	4a8c      	ldr	r2, [pc, #560]	; (8008d44 <_printf_float+0x304>)
 8008b14:	4b8c      	ldr	r3, [pc, #560]	; (8008d48 <_printf_float+0x308>)
 8008b16:	e7da      	b.n	8008ace <_printf_float+0x8e>
 8008b18:	6861      	ldr	r1, [r4, #4]
 8008b1a:	1c4b      	adds	r3, r1, #1
 8008b1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008b20:	a80a      	add	r0, sp, #40	; 0x28
 8008b22:	d13e      	bne.n	8008ba2 <_printf_float+0x162>
 8008b24:	2306      	movs	r3, #6
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b2e:	ab09      	add	r3, sp, #36	; 0x24
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	ec49 8b10 	vmov	d0, r8, r9
 8008b36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b3a:	6022      	str	r2, [r4, #0]
 8008b3c:	f8cd a004 	str.w	sl, [sp, #4]
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4628      	mov	r0, r5
 8008b44:	f7ff fee8 	bl	8008918 <__cvt>
 8008b48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008b4c:	2b47      	cmp	r3, #71	; 0x47
 8008b4e:	4680      	mov	r8, r0
 8008b50:	d109      	bne.n	8008b66 <_printf_float+0x126>
 8008b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b54:	1cd8      	adds	r0, r3, #3
 8008b56:	db02      	blt.n	8008b5e <_printf_float+0x11e>
 8008b58:	6862      	ldr	r2, [r4, #4]
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	dd47      	ble.n	8008bee <_printf_float+0x1ae>
 8008b5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b62:	fa5f fa8a 	uxtb.w	sl, sl
 8008b66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6c:	d824      	bhi.n	8008bb8 <_printf_float+0x178>
 8008b6e:	3901      	subs	r1, #1
 8008b70:	4652      	mov	r2, sl
 8008b72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b76:	9109      	str	r1, [sp, #36]	; 0x24
 8008b78:	f7ff ff2f 	bl	80089da <__exponent>
 8008b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b7e:	1813      	adds	r3, r2, r0
 8008b80:	2a01      	cmp	r2, #1
 8008b82:	4681      	mov	r9, r0
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	dc02      	bgt.n	8008b8e <_printf_float+0x14e>
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	07d1      	lsls	r1, r2, #31
 8008b8c:	d501      	bpl.n	8008b92 <_printf_float+0x152>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6123      	str	r3, [r4, #16]
 8008b92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0a5      	beq.n	8008ae6 <_printf_float+0xa6>
 8008b9a:	232d      	movs	r3, #45	; 0x2d
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba0:	e7a1      	b.n	8008ae6 <_printf_float+0xa6>
 8008ba2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ba6:	f000 8177 	beq.w	8008e98 <_printf_float+0x458>
 8008baa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008bae:	d1bb      	bne.n	8008b28 <_printf_float+0xe8>
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	d1b9      	bne.n	8008b28 <_printf_float+0xe8>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e7b6      	b.n	8008b26 <_printf_float+0xe6>
 8008bb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008bbc:	d119      	bne.n	8008bf2 <_printf_float+0x1b2>
 8008bbe:	2900      	cmp	r1, #0
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	dd0c      	ble.n	8008bde <_printf_float+0x19e>
 8008bc4:	6121      	str	r1, [r4, #16]
 8008bc6:	b913      	cbnz	r3, 8008bce <_printf_float+0x18e>
 8008bc8:	6822      	ldr	r2, [r4, #0]
 8008bca:	07d2      	lsls	r2, r2, #31
 8008bcc:	d502      	bpl.n	8008bd4 <_printf_float+0x194>
 8008bce:	3301      	adds	r3, #1
 8008bd0:	440b      	add	r3, r1
 8008bd2:	6123      	str	r3, [r4, #16]
 8008bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8008bd8:	f04f 0900 	mov.w	r9, #0
 8008bdc:	e7d9      	b.n	8008b92 <_printf_float+0x152>
 8008bde:	b913      	cbnz	r3, 8008be6 <_printf_float+0x1a6>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	07d0      	lsls	r0, r2, #31
 8008be4:	d501      	bpl.n	8008bea <_printf_float+0x1aa>
 8008be6:	3302      	adds	r3, #2
 8008be8:	e7f3      	b.n	8008bd2 <_printf_float+0x192>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7f1      	b.n	8008bd2 <_printf_float+0x192>
 8008bee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008bf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	db05      	blt.n	8008c06 <_printf_float+0x1c6>
 8008bfa:	6822      	ldr	r2, [r4, #0]
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	07d1      	lsls	r1, r2, #31
 8008c00:	d5e8      	bpl.n	8008bd4 <_printf_float+0x194>
 8008c02:	3301      	adds	r3, #1
 8008c04:	e7e5      	b.n	8008bd2 <_printf_float+0x192>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfd4      	ite	le
 8008c0a:	f1c3 0302 	rsble	r3, r3, #2
 8008c0e:	2301      	movgt	r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	e7de      	b.n	8008bd2 <_printf_float+0x192>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	055a      	lsls	r2, r3, #21
 8008c18:	d407      	bmi.n	8008c2a <_printf_float+0x1ea>
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	d12b      	bne.n	8008c80 <_printf_float+0x240>
 8008c28:	e767      	b.n	8008afa <_printf_float+0xba>
 8008c2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008c2e:	f240 80dc 	bls.w	8008dea <_printf_float+0x3aa>
 8008c32:	2200      	movs	r2, #0
 8008c34:	2300      	movs	r3, #0
 8008c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c3a:	f7f7 ff55 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d033      	beq.n	8008caa <_printf_float+0x26a>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4a41      	ldr	r2, [pc, #260]	; (8008d4c <_printf_float+0x30c>)
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f43f af54 	beq.w	8008afa <_printf_float+0xba>
 8008c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c56:	429a      	cmp	r2, r3
 8008c58:	db02      	blt.n	8008c60 <_printf_float+0x220>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	07d8      	lsls	r0, r3, #31
 8008c5e:	d50f      	bpl.n	8008c80 <_printf_float+0x240>
 8008c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af45 	beq.w	8008afa <_printf_float+0xba>
 8008c70:	f04f 0800 	mov.w	r8, #0
 8008c74:	f104 091a 	add.w	r9, r4, #26
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	dc09      	bgt.n	8008c94 <_printf_float+0x254>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	f100 8103 	bmi.w	8008e8e <_printf_float+0x44e>
 8008c88:	68e0      	ldr	r0, [r4, #12]
 8008c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8c:	4298      	cmp	r0, r3
 8008c8e:	bfb8      	it	lt
 8008c90:	4618      	movlt	r0, r3
 8008c92:	e734      	b.n	8008afe <_printf_float+0xbe>
 8008c94:	2301      	movs	r3, #1
 8008c96:	464a      	mov	r2, r9
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f af2b 	beq.w	8008afa <_printf_float+0xba>
 8008ca4:	f108 0801 	add.w	r8, r8, #1
 8008ca8:	e7e6      	b.n	8008c78 <_printf_float+0x238>
 8008caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dc2b      	bgt.n	8008d08 <_printf_float+0x2c8>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <_printf_float+0x30c>)
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	47b8      	blx	r7
 8008cba:	3001      	adds	r0, #1
 8008cbc:	f43f af1d 	beq.w	8008afa <_printf_float+0xba>
 8008cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc2:	b923      	cbnz	r3, 8008cce <_printf_float+0x28e>
 8008cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc6:	b913      	cbnz	r3, 8008cce <_printf_float+0x28e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d5d8      	bpl.n	8008c80 <_printf_float+0x240>
 8008cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f af0e 	beq.w	8008afa <_printf_float+0xba>
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	f104 0a1a 	add.w	sl, r4, #26
 8008ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce8:	425b      	negs	r3, r3
 8008cea:	454b      	cmp	r3, r9
 8008cec:	dc01      	bgt.n	8008cf2 <_printf_float+0x2b2>
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	e794      	b.n	8008c1c <_printf_float+0x1dc>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4652      	mov	r2, sl
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f43f aefc 	beq.w	8008afa <_printf_float+0xba>
 8008d02:	f109 0901 	add.w	r9, r9, #1
 8008d06:	e7ee      	b.n	8008ce6 <_printf_float+0x2a6>
 8008d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	bfa8      	it	ge
 8008d10:	461a      	movge	r2, r3
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	4691      	mov	r9, r2
 8008d16:	dd07      	ble.n	8008d28 <_printf_float+0x2e8>
 8008d18:	4613      	mov	r3, r2
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f aee9 	beq.w	8008afa <_printf_float+0xba>
 8008d28:	f104 031a 	add.w	r3, r4, #26
 8008d2c:	f04f 0b00 	mov.w	fp, #0
 8008d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	e015      	b.n	8008d64 <_printf_float+0x324>
 8008d38:	7fefffff 	.word	0x7fefffff
 8008d3c:	0800ae14 	.word	0x0800ae14
 8008d40:	0800ae10 	.word	0x0800ae10
 8008d44:	0800ae1c 	.word	0x0800ae1c
 8008d48:	0800ae18 	.word	0x0800ae18
 8008d4c:	0800ae20 	.word	0x0800ae20
 8008d50:	2301      	movs	r3, #1
 8008d52:	9a06      	ldr	r2, [sp, #24]
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f aecd 	beq.w	8008afa <_printf_float+0xba>
 8008d60:	f10b 0b01 	add.w	fp, fp, #1
 8008d64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008d68:	ebaa 0309 	sub.w	r3, sl, r9
 8008d6c:	455b      	cmp	r3, fp
 8008d6e:	dcef      	bgt.n	8008d50 <_printf_float+0x310>
 8008d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d74:	429a      	cmp	r2, r3
 8008d76:	44d0      	add	r8, sl
 8008d78:	db15      	blt.n	8008da6 <_printf_float+0x366>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	07da      	lsls	r2, r3, #31
 8008d7e:	d412      	bmi.n	8008da6 <_printf_float+0x366>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d84:	eba3 020a 	sub.w	r2, r3, sl
 8008d88:	eba3 0a01 	sub.w	sl, r3, r1
 8008d8c:	4592      	cmp	sl, r2
 8008d8e:	bfa8      	it	ge
 8008d90:	4692      	movge	sl, r2
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	dc0e      	bgt.n	8008db6 <_printf_float+0x376>
 8008d98:	f04f 0800 	mov.w	r8, #0
 8008d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da0:	f104 091a 	add.w	r9, r4, #26
 8008da4:	e019      	b.n	8008dda <_printf_float+0x39a>
 8008da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	d1e5      	bne.n	8008d80 <_printf_float+0x340>
 8008db4:	e6a1      	b.n	8008afa <_printf_float+0xba>
 8008db6:	4653      	mov	r3, sl
 8008db8:	4642      	mov	r2, r8
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d1e9      	bne.n	8008d98 <_printf_float+0x358>
 8008dc4:	e699      	b.n	8008afa <_printf_float+0xba>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	464a      	mov	r2, r9
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae92 	beq.w	8008afa <_printf_float+0xba>
 8008dd6:	f108 0801 	add.w	r8, r8, #1
 8008dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dde:	1a9b      	subs	r3, r3, r2
 8008de0:	eba3 030a 	sub.w	r3, r3, sl
 8008de4:	4543      	cmp	r3, r8
 8008de6:	dcee      	bgt.n	8008dc6 <_printf_float+0x386>
 8008de8:	e74a      	b.n	8008c80 <_printf_float+0x240>
 8008dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dec:	2a01      	cmp	r2, #1
 8008dee:	dc01      	bgt.n	8008df4 <_printf_float+0x3b4>
 8008df0:	07db      	lsls	r3, r3, #31
 8008df2:	d53a      	bpl.n	8008e6a <_printf_float+0x42a>
 8008df4:	2301      	movs	r3, #1
 8008df6:	4642      	mov	r2, r8
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f43f ae7b 	beq.w	8008afa <_printf_float+0xba>
 8008e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f108 0801 	add.w	r8, r8, #1
 8008e14:	f43f ae71 	beq.w	8008afa <_printf_float+0xba>
 8008e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e24:	2300      	movs	r3, #0
 8008e26:	f7f7 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e2a:	b9c8      	cbnz	r0, 8008e60 <_printf_float+0x420>
 8008e2c:	4653      	mov	r3, sl
 8008e2e:	4642      	mov	r2, r8
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	47b8      	blx	r7
 8008e36:	3001      	adds	r0, #1
 8008e38:	d10e      	bne.n	8008e58 <_printf_float+0x418>
 8008e3a:	e65e      	b.n	8008afa <_printf_float+0xba>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4652      	mov	r2, sl
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f ae57 	beq.w	8008afa <_printf_float+0xba>
 8008e4c:	f108 0801 	add.w	r8, r8, #1
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	3b01      	subs	r3, #1
 8008e54:	4543      	cmp	r3, r8
 8008e56:	dcf1      	bgt.n	8008e3c <_printf_float+0x3fc>
 8008e58:	464b      	mov	r3, r9
 8008e5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e5e:	e6de      	b.n	8008c1e <_printf_float+0x1de>
 8008e60:	f04f 0800 	mov.w	r8, #0
 8008e64:	f104 0a1a 	add.w	sl, r4, #26
 8008e68:	e7f2      	b.n	8008e50 <_printf_float+0x410>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e7df      	b.n	8008e2e <_printf_float+0x3ee>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	464a      	mov	r2, r9
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f ae3e 	beq.w	8008afa <_printf_float+0xba>
 8008e7e:	f108 0801 	add.w	r8, r8, #1
 8008e82:	68e3      	ldr	r3, [r4, #12]
 8008e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	dcf0      	bgt.n	8008e6e <_printf_float+0x42e>
 8008e8c:	e6fc      	b.n	8008c88 <_printf_float+0x248>
 8008e8e:	f04f 0800 	mov.w	r8, #0
 8008e92:	f104 0919 	add.w	r9, r4, #25
 8008e96:	e7f4      	b.n	8008e82 <_printf_float+0x442>
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	f43f ae8b 	beq.w	8008bb4 <_printf_float+0x174>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ea4:	ab09      	add	r3, sp, #36	; 0x24
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	ec49 8b10 	vmov	d0, r8, r9
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	f8cd a004 	str.w	sl, [sp, #4]
 8008eb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7ff fd2e 	bl	8008918 <__cvt>
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	e648      	b.n	8008b52 <_printf_float+0x112>

08008ec0 <_printf_common>:
 8008ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	4691      	mov	r9, r2
 8008ec6:	461f      	mov	r7, r3
 8008ec8:	688a      	ldr	r2, [r1, #8]
 8008eca:	690b      	ldr	r3, [r1, #16]
 8008ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	bfb8      	it	lt
 8008ed4:	4613      	movlt	r3, r2
 8008ed6:	f8c9 3000 	str.w	r3, [r9]
 8008eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ede:	4606      	mov	r6, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	b112      	cbz	r2, 8008eea <_printf_common+0x2a>
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	f8c9 3000 	str.w	r3, [r9]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	0699      	lsls	r1, r3, #26
 8008eee:	bf42      	ittt	mi
 8008ef0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ef4:	3302      	addmi	r3, #2
 8008ef6:	f8c9 3000 	strmi.w	r3, [r9]
 8008efa:	6825      	ldr	r5, [r4, #0]
 8008efc:	f015 0506 	ands.w	r5, r5, #6
 8008f00:	d107      	bne.n	8008f12 <_printf_common+0x52>
 8008f02:	f104 0a19 	add.w	sl, r4, #25
 8008f06:	68e3      	ldr	r3, [r4, #12]
 8008f08:	f8d9 2000 	ldr.w	r2, [r9]
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	42ab      	cmp	r3, r5
 8008f10:	dc28      	bgt.n	8008f64 <_printf_common+0xa4>
 8008f12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	3300      	adds	r3, #0
 8008f1a:	bf18      	it	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	0692      	lsls	r2, r2, #26
 8008f20:	d42d      	bmi.n	8008f7e <_printf_common+0xbe>
 8008f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f26:	4639      	mov	r1, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	47c0      	blx	r8
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d020      	beq.n	8008f72 <_printf_common+0xb2>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	68e5      	ldr	r5, [r4, #12]
 8008f34:	f8d9 2000 	ldr.w	r2, [r9]
 8008f38:	f003 0306 	and.w	r3, r3, #6
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	bf08      	it	eq
 8008f40:	1aad      	subeq	r5, r5, r2
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	bf0c      	ite	eq
 8008f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f4c:	2500      	movne	r5, #0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bfc4      	itt	gt
 8008f52:	1a9b      	subgt	r3, r3, r2
 8008f54:	18ed      	addgt	r5, r5, r3
 8008f56:	f04f 0900 	mov.w	r9, #0
 8008f5a:	341a      	adds	r4, #26
 8008f5c:	454d      	cmp	r5, r9
 8008f5e:	d11a      	bne.n	8008f96 <_printf_common+0xd6>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e008      	b.n	8008f76 <_printf_common+0xb6>
 8008f64:	2301      	movs	r3, #1
 8008f66:	4652      	mov	r2, sl
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d103      	bne.n	8008f7a <_printf_common+0xba>
 8008f72:	f04f 30ff 	mov.w	r0, #4294967295
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	e7c3      	b.n	8008f06 <_printf_common+0x46>
 8008f7e:	18e1      	adds	r1, r4, r3
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	2030      	movs	r0, #48	; 0x30
 8008f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f88:	4422      	add	r2, r4
 8008f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f92:	3302      	adds	r3, #2
 8008f94:	e7c5      	b.n	8008f22 <_printf_common+0x62>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4622      	mov	r2, r4
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	47c0      	blx	r8
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d0e6      	beq.n	8008f72 <_printf_common+0xb2>
 8008fa4:	f109 0901 	add.w	r9, r9, #1
 8008fa8:	e7d8      	b.n	8008f5c <_printf_common+0x9c>
	...

08008fac <_printf_i>:
 8008fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	7e09      	ldrb	r1, [r1, #24]
 8008fb8:	b085      	sub	sp, #20
 8008fba:	296e      	cmp	r1, #110	; 0x6e
 8008fbc:	4617      	mov	r7, r2
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	4698      	mov	r8, r3
 8008fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fc4:	f000 80b3 	beq.w	800912e <_printf_i+0x182>
 8008fc8:	d822      	bhi.n	8009010 <_printf_i+0x64>
 8008fca:	2963      	cmp	r1, #99	; 0x63
 8008fcc:	d036      	beq.n	800903c <_printf_i+0x90>
 8008fce:	d80a      	bhi.n	8008fe6 <_printf_i+0x3a>
 8008fd0:	2900      	cmp	r1, #0
 8008fd2:	f000 80b9 	beq.w	8009148 <_printf_i+0x19c>
 8008fd6:	2958      	cmp	r1, #88	; 0x58
 8008fd8:	f000 8083 	beq.w	80090e2 <_printf_i+0x136>
 8008fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008fe4:	e032      	b.n	800904c <_printf_i+0xa0>
 8008fe6:	2964      	cmp	r1, #100	; 0x64
 8008fe8:	d001      	beq.n	8008fee <_printf_i+0x42>
 8008fea:	2969      	cmp	r1, #105	; 0x69
 8008fec:	d1f6      	bne.n	8008fdc <_printf_i+0x30>
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	0605      	lsls	r5, r0, #24
 8008ff4:	f103 0104 	add.w	r1, r3, #4
 8008ff8:	d52a      	bpl.n	8009050 <_printf_i+0xa4>
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6011      	str	r1, [r2, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	da03      	bge.n	800900a <_printf_i+0x5e>
 8009002:	222d      	movs	r2, #45	; 0x2d
 8009004:	425b      	negs	r3, r3
 8009006:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800900a:	486f      	ldr	r0, [pc, #444]	; (80091c8 <_printf_i+0x21c>)
 800900c:	220a      	movs	r2, #10
 800900e:	e039      	b.n	8009084 <_printf_i+0xd8>
 8009010:	2973      	cmp	r1, #115	; 0x73
 8009012:	f000 809d 	beq.w	8009150 <_printf_i+0x1a4>
 8009016:	d808      	bhi.n	800902a <_printf_i+0x7e>
 8009018:	296f      	cmp	r1, #111	; 0x6f
 800901a:	d020      	beq.n	800905e <_printf_i+0xb2>
 800901c:	2970      	cmp	r1, #112	; 0x70
 800901e:	d1dd      	bne.n	8008fdc <_printf_i+0x30>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	f043 0320 	orr.w	r3, r3, #32
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	e003      	b.n	8009032 <_printf_i+0x86>
 800902a:	2975      	cmp	r1, #117	; 0x75
 800902c:	d017      	beq.n	800905e <_printf_i+0xb2>
 800902e:	2978      	cmp	r1, #120	; 0x78
 8009030:	d1d4      	bne.n	8008fdc <_printf_i+0x30>
 8009032:	2378      	movs	r3, #120	; 0x78
 8009034:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009038:	4864      	ldr	r0, [pc, #400]	; (80091cc <_printf_i+0x220>)
 800903a:	e055      	b.n	80090e8 <_printf_i+0x13c>
 800903c:	6813      	ldr	r3, [r2, #0]
 800903e:	1d19      	adds	r1, r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6011      	str	r1, [r2, #0]
 8009044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800904c:	2301      	movs	r3, #1
 800904e:	e08c      	b.n	800916a <_printf_i+0x1be>
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6011      	str	r1, [r2, #0]
 8009054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009058:	bf18      	it	ne
 800905a:	b21b      	sxthne	r3, r3
 800905c:	e7cf      	b.n	8008ffe <_printf_i+0x52>
 800905e:	6813      	ldr	r3, [r2, #0]
 8009060:	6825      	ldr	r5, [r4, #0]
 8009062:	1d18      	adds	r0, r3, #4
 8009064:	6010      	str	r0, [r2, #0]
 8009066:	0628      	lsls	r0, r5, #24
 8009068:	d501      	bpl.n	800906e <_printf_i+0xc2>
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	e002      	b.n	8009074 <_printf_i+0xc8>
 800906e:	0668      	lsls	r0, r5, #25
 8009070:	d5fb      	bpl.n	800906a <_printf_i+0xbe>
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	4854      	ldr	r0, [pc, #336]	; (80091c8 <_printf_i+0x21c>)
 8009076:	296f      	cmp	r1, #111	; 0x6f
 8009078:	bf14      	ite	ne
 800907a:	220a      	movne	r2, #10
 800907c:	2208      	moveq	r2, #8
 800907e:	2100      	movs	r1, #0
 8009080:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009084:	6865      	ldr	r5, [r4, #4]
 8009086:	60a5      	str	r5, [r4, #8]
 8009088:	2d00      	cmp	r5, #0
 800908a:	f2c0 8095 	blt.w	80091b8 <_printf_i+0x20c>
 800908e:	6821      	ldr	r1, [r4, #0]
 8009090:	f021 0104 	bic.w	r1, r1, #4
 8009094:	6021      	str	r1, [r4, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d13d      	bne.n	8009116 <_printf_i+0x16a>
 800909a:	2d00      	cmp	r5, #0
 800909c:	f040 808e 	bne.w	80091bc <_printf_i+0x210>
 80090a0:	4665      	mov	r5, ip
 80090a2:	2a08      	cmp	r2, #8
 80090a4:	d10b      	bne.n	80090be <_printf_i+0x112>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	07db      	lsls	r3, r3, #31
 80090aa:	d508      	bpl.n	80090be <_printf_i+0x112>
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	6862      	ldr	r2, [r4, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	bfde      	ittt	le
 80090b4:	2330      	movle	r3, #48	; 0x30
 80090b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090be:	ebac 0305 	sub.w	r3, ip, r5
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	f8cd 8000 	str.w	r8, [sp]
 80090c8:	463b      	mov	r3, r7
 80090ca:	aa03      	add	r2, sp, #12
 80090cc:	4621      	mov	r1, r4
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7ff fef6 	bl	8008ec0 <_printf_common>
 80090d4:	3001      	adds	r0, #1
 80090d6:	d14d      	bne.n	8009174 <_printf_i+0x1c8>
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	b005      	add	sp, #20
 80090de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090e2:	4839      	ldr	r0, [pc, #228]	; (80091c8 <_printf_i+0x21c>)
 80090e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090e8:	6813      	ldr	r3, [r2, #0]
 80090ea:	6821      	ldr	r1, [r4, #0]
 80090ec:	1d1d      	adds	r5, r3, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6015      	str	r5, [r2, #0]
 80090f2:	060a      	lsls	r2, r1, #24
 80090f4:	d50b      	bpl.n	800910e <_printf_i+0x162>
 80090f6:	07ca      	lsls	r2, r1, #31
 80090f8:	bf44      	itt	mi
 80090fa:	f041 0120 	orrmi.w	r1, r1, #32
 80090fe:	6021      	strmi	r1, [r4, #0]
 8009100:	b91b      	cbnz	r3, 800910a <_printf_i+0x15e>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	f022 0220 	bic.w	r2, r2, #32
 8009108:	6022      	str	r2, [r4, #0]
 800910a:	2210      	movs	r2, #16
 800910c:	e7b7      	b.n	800907e <_printf_i+0xd2>
 800910e:	064d      	lsls	r5, r1, #25
 8009110:	bf48      	it	mi
 8009112:	b29b      	uxthmi	r3, r3
 8009114:	e7ef      	b.n	80090f6 <_printf_i+0x14a>
 8009116:	4665      	mov	r5, ip
 8009118:	fbb3 f1f2 	udiv	r1, r3, r2
 800911c:	fb02 3311 	mls	r3, r2, r1, r3
 8009120:	5cc3      	ldrb	r3, [r0, r3]
 8009122:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009126:	460b      	mov	r3, r1
 8009128:	2900      	cmp	r1, #0
 800912a:	d1f5      	bne.n	8009118 <_printf_i+0x16c>
 800912c:	e7b9      	b.n	80090a2 <_printf_i+0xf6>
 800912e:	6813      	ldr	r3, [r2, #0]
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	6961      	ldr	r1, [r4, #20]
 8009134:	1d18      	adds	r0, r3, #4
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	0628      	lsls	r0, r5, #24
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	d501      	bpl.n	8009142 <_printf_i+0x196>
 800913e:	6019      	str	r1, [r3, #0]
 8009140:	e002      	b.n	8009148 <_printf_i+0x19c>
 8009142:	066a      	lsls	r2, r5, #25
 8009144:	d5fb      	bpl.n	800913e <_printf_i+0x192>
 8009146:	8019      	strh	r1, [r3, #0]
 8009148:	2300      	movs	r3, #0
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	4665      	mov	r5, ip
 800914e:	e7b9      	b.n	80090c4 <_printf_i+0x118>
 8009150:	6813      	ldr	r3, [r2, #0]
 8009152:	1d19      	adds	r1, r3, #4
 8009154:	6011      	str	r1, [r2, #0]
 8009156:	681d      	ldr	r5, [r3, #0]
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	2100      	movs	r1, #0
 800915c:	4628      	mov	r0, r5
 800915e:	f7f7 f84f 	bl	8000200 <memchr>
 8009162:	b108      	cbz	r0, 8009168 <_printf_i+0x1bc>
 8009164:	1b40      	subs	r0, r0, r5
 8009166:	6060      	str	r0, [r4, #4]
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2300      	movs	r3, #0
 800916e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009172:	e7a7      	b.n	80090c4 <_printf_i+0x118>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	462a      	mov	r2, r5
 8009178:	4639      	mov	r1, r7
 800917a:	4630      	mov	r0, r6
 800917c:	47c0      	blx	r8
 800917e:	3001      	adds	r0, #1
 8009180:	d0aa      	beq.n	80090d8 <_printf_i+0x12c>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	079b      	lsls	r3, r3, #30
 8009186:	d413      	bmi.n	80091b0 <_printf_i+0x204>
 8009188:	68e0      	ldr	r0, [r4, #12]
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	4298      	cmp	r0, r3
 800918e:	bfb8      	it	lt
 8009190:	4618      	movlt	r0, r3
 8009192:	e7a3      	b.n	80090dc <_printf_i+0x130>
 8009194:	2301      	movs	r3, #1
 8009196:	464a      	mov	r2, r9
 8009198:	4639      	mov	r1, r7
 800919a:	4630      	mov	r0, r6
 800919c:	47c0      	blx	r8
 800919e:	3001      	adds	r0, #1
 80091a0:	d09a      	beq.n	80090d8 <_printf_i+0x12c>
 80091a2:	3501      	adds	r5, #1
 80091a4:	68e3      	ldr	r3, [r4, #12]
 80091a6:	9a03      	ldr	r2, [sp, #12]
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	42ab      	cmp	r3, r5
 80091ac:	dcf2      	bgt.n	8009194 <_printf_i+0x1e8>
 80091ae:	e7eb      	b.n	8009188 <_printf_i+0x1dc>
 80091b0:	2500      	movs	r5, #0
 80091b2:	f104 0919 	add.w	r9, r4, #25
 80091b6:	e7f5      	b.n	80091a4 <_printf_i+0x1f8>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1ac      	bne.n	8009116 <_printf_i+0x16a>
 80091bc:	7803      	ldrb	r3, [r0, #0]
 80091be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c6:	e76c      	b.n	80090a2 <_printf_i+0xf6>
 80091c8:	0800ae22 	.word	0x0800ae22
 80091cc:	0800ae33 	.word	0x0800ae33

080091d0 <_sbrk_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4c06      	ldr	r4, [pc, #24]	; (80091ec <_sbrk_r+0x1c>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4605      	mov	r5, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	f7f9 f8fa 	bl	80023d4 <_sbrk>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_sbrk_r+0x1a>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_sbrk_r+0x1a>
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000460 	.word	0x20000460

080091f0 <siprintf>:
 80091f0:	b40e      	push	{r1, r2, r3}
 80091f2:	b500      	push	{lr}
 80091f4:	b09c      	sub	sp, #112	; 0x70
 80091f6:	ab1d      	add	r3, sp, #116	; 0x74
 80091f8:	9002      	str	r0, [sp, #8]
 80091fa:	9006      	str	r0, [sp, #24]
 80091fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009200:	4809      	ldr	r0, [pc, #36]	; (8009228 <siprintf+0x38>)
 8009202:	9107      	str	r1, [sp, #28]
 8009204:	9104      	str	r1, [sp, #16]
 8009206:	4909      	ldr	r1, [pc, #36]	; (800922c <siprintf+0x3c>)
 8009208:	f853 2b04 	ldr.w	r2, [r3], #4
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	6800      	ldr	r0, [r0, #0]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	a902      	add	r1, sp, #8
 8009214:	f001 f9ae 	bl	800a574 <_svfiprintf_r>
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	b01c      	add	sp, #112	; 0x70
 8009220:	f85d eb04 	ldr.w	lr, [sp], #4
 8009224:	b003      	add	sp, #12
 8009226:	4770      	bx	lr
 8009228:	2000000c 	.word	0x2000000c
 800922c:	ffff0208 	.word	0xffff0208

08009230 <quorem>:
 8009230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	6903      	ldr	r3, [r0, #16]
 8009236:	690c      	ldr	r4, [r1, #16]
 8009238:	42a3      	cmp	r3, r4
 800923a:	4680      	mov	r8, r0
 800923c:	f2c0 8082 	blt.w	8009344 <quorem+0x114>
 8009240:	3c01      	subs	r4, #1
 8009242:	f101 0714 	add.w	r7, r1, #20
 8009246:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800924a:	f100 0614 	add.w	r6, r0, #20
 800924e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009252:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009256:	eb06 030c 	add.w	r3, r6, ip
 800925a:	3501      	adds	r5, #1
 800925c:	eb07 090c 	add.w	r9, r7, ip
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	fbb0 f5f5 	udiv	r5, r0, r5
 8009266:	b395      	cbz	r5, 80092ce <quorem+0x9e>
 8009268:	f04f 0a00 	mov.w	sl, #0
 800926c:	4638      	mov	r0, r7
 800926e:	46b6      	mov	lr, r6
 8009270:	46d3      	mov	fp, sl
 8009272:	f850 2b04 	ldr.w	r2, [r0], #4
 8009276:	b293      	uxth	r3, r2
 8009278:	fb05 a303 	mla	r3, r5, r3, sl
 800927c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009280:	b29b      	uxth	r3, r3
 8009282:	ebab 0303 	sub.w	r3, fp, r3
 8009286:	0c12      	lsrs	r2, r2, #16
 8009288:	f8de b000 	ldr.w	fp, [lr]
 800928c:	fb05 a202 	mla	r2, r5, r2, sl
 8009290:	fa13 f38b 	uxtah	r3, r3, fp
 8009294:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009298:	fa1f fb82 	uxth.w	fp, r2
 800929c:	f8de 2000 	ldr.w	r2, [lr]
 80092a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80092a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ae:	4581      	cmp	r9, r0
 80092b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80092b4:	f84e 3b04 	str.w	r3, [lr], #4
 80092b8:	d2db      	bcs.n	8009272 <quorem+0x42>
 80092ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80092be:	b933      	cbnz	r3, 80092ce <quorem+0x9e>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	3b04      	subs	r3, #4
 80092c4:	429e      	cmp	r6, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	d330      	bcc.n	800932c <quorem+0xfc>
 80092ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80092ce:	4640      	mov	r0, r8
 80092d0:	f001 f822 	bl	800a318 <__mcmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	db25      	blt.n	8009324 <quorem+0xf4>
 80092d8:	3501      	adds	r5, #1
 80092da:	4630      	mov	r0, r6
 80092dc:	f04f 0c00 	mov.w	ip, #0
 80092e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80092e4:	f8d0 e000 	ldr.w	lr, [r0]
 80092e8:	b293      	uxth	r3, r2
 80092ea:	ebac 0303 	sub.w	r3, ip, r3
 80092ee:	0c12      	lsrs	r2, r2, #16
 80092f0:	fa13 f38e 	uxtah	r3, r3, lr
 80092f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009302:	45b9      	cmp	r9, r7
 8009304:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009308:	f840 3b04 	str.w	r3, [r0], #4
 800930c:	d2e8      	bcs.n	80092e0 <quorem+0xb0>
 800930e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009312:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009316:	b92a      	cbnz	r2, 8009324 <quorem+0xf4>
 8009318:	3b04      	subs	r3, #4
 800931a:	429e      	cmp	r6, r3
 800931c:	461a      	mov	r2, r3
 800931e:	d30b      	bcc.n	8009338 <quorem+0x108>
 8009320:	f8c8 4010 	str.w	r4, [r8, #16]
 8009324:	4628      	mov	r0, r5
 8009326:	b003      	add	sp, #12
 8009328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	3b04      	subs	r3, #4
 8009330:	2a00      	cmp	r2, #0
 8009332:	d1ca      	bne.n	80092ca <quorem+0x9a>
 8009334:	3c01      	subs	r4, #1
 8009336:	e7c5      	b.n	80092c4 <quorem+0x94>
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	3b04      	subs	r3, #4
 800933c:	2a00      	cmp	r2, #0
 800933e:	d1ef      	bne.n	8009320 <quorem+0xf0>
 8009340:	3c01      	subs	r4, #1
 8009342:	e7ea      	b.n	800931a <quorem+0xea>
 8009344:	2000      	movs	r0, #0
 8009346:	e7ee      	b.n	8009326 <quorem+0xf6>

08009348 <_dtoa_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	ec57 6b10 	vmov	r6, r7, d0
 8009350:	b097      	sub	sp, #92	; 0x5c
 8009352:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009354:	9106      	str	r1, [sp, #24]
 8009356:	4604      	mov	r4, r0
 8009358:	920b      	str	r2, [sp, #44]	; 0x2c
 800935a:	9312      	str	r3, [sp, #72]	; 0x48
 800935c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009360:	e9cd 6700 	strd	r6, r7, [sp]
 8009364:	b93d      	cbnz	r5, 8009376 <_dtoa_r+0x2e>
 8009366:	2010      	movs	r0, #16
 8009368:	f7ff fa1e 	bl	80087a8 <malloc>
 800936c:	6260      	str	r0, [r4, #36]	; 0x24
 800936e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009372:	6005      	str	r5, [r0, #0]
 8009374:	60c5      	str	r5, [r0, #12]
 8009376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	b151      	cbz	r1, 8009392 <_dtoa_r+0x4a>
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	604a      	str	r2, [r1, #4]
 8009380:	2301      	movs	r3, #1
 8009382:	4093      	lsls	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fde5 	bl	8009f56 <_Bfree>
 800938c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	1e3b      	subs	r3, r7, #0
 8009394:	bfbb      	ittet	lt
 8009396:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800939a:	9301      	strlt	r3, [sp, #4]
 800939c:	2300      	movge	r3, #0
 800939e:	2201      	movlt	r2, #1
 80093a0:	bfac      	ite	ge
 80093a2:	f8c8 3000 	strge.w	r3, [r8]
 80093a6:	f8c8 2000 	strlt.w	r2, [r8]
 80093aa:	4baf      	ldr	r3, [pc, #700]	; (8009668 <_dtoa_r+0x320>)
 80093ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093b0:	ea33 0308 	bics.w	r3, r3, r8
 80093b4:	d114      	bne.n	80093e0 <_dtoa_r+0x98>
 80093b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	b923      	cbnz	r3, 80093cc <_dtoa_r+0x84>
 80093c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f000 8542 	beq.w	8009e50 <_dtoa_r+0xb08>
 80093cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800967c <_dtoa_r+0x334>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8544 	beq.w	8009e60 <_dtoa_r+0xb18>
 80093d8:	f10b 0303 	add.w	r3, fp, #3
 80093dc:	f000 bd3e 	b.w	8009e5c <_dtoa_r+0xb14>
 80093e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f7 fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80093f0:	4681      	mov	r9, r0
 80093f2:	b168      	cbz	r0, 8009410 <_dtoa_r+0xc8>
 80093f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093f6:	2301      	movs	r3, #1
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8524 	beq.w	8009e4a <_dtoa_r+0xb02>
 8009402:	4b9a      	ldr	r3, [pc, #616]	; (800966c <_dtoa_r+0x324>)
 8009404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009406:	f103 3bff 	add.w	fp, r3, #4294967295
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	f000 bd28 	b.w	8009e60 <_dtoa_r+0xb18>
 8009410:	aa14      	add	r2, sp, #80	; 0x50
 8009412:	a915      	add	r1, sp, #84	; 0x54
 8009414:	ec47 6b10 	vmov	d0, r6, r7
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fff4 	bl	800a406 <__d2b>
 800941e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009422:	9004      	str	r0, [sp, #16]
 8009424:	2d00      	cmp	r5, #0
 8009426:	d07c      	beq.n	8009522 <_dtoa_r+0x1da>
 8009428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800942c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009430:	46b2      	mov	sl, r6
 8009432:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800943a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800943e:	2200      	movs	r2, #0
 8009440:	4b8b      	ldr	r3, [pc, #556]	; (8009670 <_dtoa_r+0x328>)
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f6 ff2f 	bl	80002a8 <__aeabi_dsub>
 800944a:	a381      	add	r3, pc, #516	; (adr r3, 8009650 <_dtoa_r+0x308>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f7 f8e2 	bl	8000618 <__aeabi_dmul>
 8009454:	a380      	add	r3, pc, #512	; (adr r3, 8009658 <_dtoa_r+0x310>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f6 ff27 	bl	80002ac <__adddf3>
 800945e:	4606      	mov	r6, r0
 8009460:	4628      	mov	r0, r5
 8009462:	460f      	mov	r7, r1
 8009464:	f7f7 f86e 	bl	8000544 <__aeabi_i2d>
 8009468:	a37d      	add	r3, pc, #500	; (adr r3, 8009660 <_dtoa_r+0x318>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f7f7 f8d3 	bl	8000618 <__aeabi_dmul>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f6 ff17 	bl	80002ac <__adddf3>
 800947e:	4606      	mov	r6, r0
 8009480:	460f      	mov	r7, r1
 8009482:	f7f7 fb79 	bl	8000b78 <__aeabi_d2iz>
 8009486:	2200      	movs	r2, #0
 8009488:	4682      	mov	sl, r0
 800948a:	2300      	movs	r3, #0
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f7 fb34 	bl	8000afc <__aeabi_dcmplt>
 8009494:	b148      	cbz	r0, 80094aa <_dtoa_r+0x162>
 8009496:	4650      	mov	r0, sl
 8009498:	f7f7 f854 	bl	8000544 <__aeabi_i2d>
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	f7f7 fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 80094a4:	b908      	cbnz	r0, 80094aa <_dtoa_r+0x162>
 80094a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094aa:	f1ba 0f16 	cmp.w	sl, #22
 80094ae:	d859      	bhi.n	8009564 <_dtoa_r+0x21c>
 80094b0:	4970      	ldr	r1, [pc, #448]	; (8009674 <_dtoa_r+0x32c>)
 80094b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094be:	f7f7 fb3b 	bl	8000b38 <__aeabi_dcmpgt>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d050      	beq.n	8009568 <_dtoa_r+0x220>
 80094c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ca:	2300      	movs	r3, #0
 80094cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094d0:	1b5d      	subs	r5, r3, r5
 80094d2:	f1b5 0801 	subs.w	r8, r5, #1
 80094d6:	bf49      	itett	mi
 80094d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80094dc:	2300      	movpl	r3, #0
 80094de:	9305      	strmi	r3, [sp, #20]
 80094e0:	f04f 0800 	movmi.w	r8, #0
 80094e4:	bf58      	it	pl
 80094e6:	9305      	strpl	r3, [sp, #20]
 80094e8:	f1ba 0f00 	cmp.w	sl, #0
 80094ec:	db3e      	blt.n	800956c <_dtoa_r+0x224>
 80094ee:	2300      	movs	r3, #0
 80094f0:	44d0      	add	r8, sl
 80094f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80094f6:	9307      	str	r3, [sp, #28]
 80094f8:	9b06      	ldr	r3, [sp, #24]
 80094fa:	2b09      	cmp	r3, #9
 80094fc:	f200 8090 	bhi.w	8009620 <_dtoa_r+0x2d8>
 8009500:	2b05      	cmp	r3, #5
 8009502:	bfc4      	itt	gt
 8009504:	3b04      	subgt	r3, #4
 8009506:	9306      	strgt	r3, [sp, #24]
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	f1a3 0302 	sub.w	r3, r3, #2
 800950e:	bfcc      	ite	gt
 8009510:	2500      	movgt	r5, #0
 8009512:	2501      	movle	r5, #1
 8009514:	2b03      	cmp	r3, #3
 8009516:	f200 808f 	bhi.w	8009638 <_dtoa_r+0x2f0>
 800951a:	e8df f003 	tbb	[pc, r3]
 800951e:	7f7d      	.short	0x7f7d
 8009520:	7131      	.short	0x7131
 8009522:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009526:	441d      	add	r5, r3
 8009528:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800952c:	2820      	cmp	r0, #32
 800952e:	dd13      	ble.n	8009558 <_dtoa_r+0x210>
 8009530:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	fa08 f800 	lsl.w	r8, r8, r0
 800953a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800953e:	fa23 f000 	lsr.w	r0, r3, r0
 8009542:	ea48 0000 	orr.w	r0, r8, r0
 8009546:	f7f6 ffed 	bl	8000524 <__aeabi_ui2d>
 800954a:	2301      	movs	r3, #1
 800954c:	4682      	mov	sl, r0
 800954e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009552:	3d01      	subs	r5, #1
 8009554:	9313      	str	r3, [sp, #76]	; 0x4c
 8009556:	e772      	b.n	800943e <_dtoa_r+0xf6>
 8009558:	9b00      	ldr	r3, [sp, #0]
 800955a:	f1c0 0020 	rsb	r0, r0, #32
 800955e:	fa03 f000 	lsl.w	r0, r3, r0
 8009562:	e7f0      	b.n	8009546 <_dtoa_r+0x1fe>
 8009564:	2301      	movs	r3, #1
 8009566:	e7b1      	b.n	80094cc <_dtoa_r+0x184>
 8009568:	900f      	str	r0, [sp, #60]	; 0x3c
 800956a:	e7b0      	b.n	80094ce <_dtoa_r+0x186>
 800956c:	9b05      	ldr	r3, [sp, #20]
 800956e:	eba3 030a 	sub.w	r3, r3, sl
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	f1ca 0300 	rsb	r3, sl, #0
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	2300      	movs	r3, #0
 800957c:	930e      	str	r3, [sp, #56]	; 0x38
 800957e:	e7bb      	b.n	80094f8 <_dtoa_r+0x1b0>
 8009580:	2301      	movs	r3, #1
 8009582:	930a      	str	r3, [sp, #40]	; 0x28
 8009584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd59      	ble.n	800963e <_dtoa_r+0x2f6>
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	4699      	mov	r9, r3
 800958e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009590:	2200      	movs	r2, #0
 8009592:	6072      	str	r2, [r6, #4]
 8009594:	2204      	movs	r2, #4
 8009596:	f102 0014 	add.w	r0, r2, #20
 800959a:	4298      	cmp	r0, r3
 800959c:	6871      	ldr	r1, [r6, #4]
 800959e:	d953      	bls.n	8009648 <_dtoa_r+0x300>
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fca4 	bl	8009eee <_Balloc>
 80095a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a8:	6030      	str	r0, [r6, #0]
 80095aa:	f1b9 0f0e 	cmp.w	r9, #14
 80095ae:	f8d3 b000 	ldr.w	fp, [r3]
 80095b2:	f200 80e6 	bhi.w	8009782 <_dtoa_r+0x43a>
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	f000 80e3 	beq.w	8009782 <_dtoa_r+0x43a>
 80095bc:	ed9d 7b00 	vldr	d7, [sp]
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80095c8:	dd74      	ble.n	80096b4 <_dtoa_r+0x36c>
 80095ca:	4a2a      	ldr	r2, [pc, #168]	; (8009674 <_dtoa_r+0x32c>)
 80095cc:	f00a 030f 	and.w	r3, sl, #15
 80095d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095d4:	ed93 7b00 	vldr	d7, [r3]
 80095d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80095dc:	06f0      	lsls	r0, r6, #27
 80095de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80095e2:	d565      	bpl.n	80096b0 <_dtoa_r+0x368>
 80095e4:	4b24      	ldr	r3, [pc, #144]	; (8009678 <_dtoa_r+0x330>)
 80095e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095ee:	f7f7 f93d 	bl	800086c <__aeabi_ddiv>
 80095f2:	e9cd 0100 	strd	r0, r1, [sp]
 80095f6:	f006 060f 	and.w	r6, r6, #15
 80095fa:	2503      	movs	r5, #3
 80095fc:	4f1e      	ldr	r7, [pc, #120]	; (8009678 <_dtoa_r+0x330>)
 80095fe:	e04c      	b.n	800969a <_dtoa_r+0x352>
 8009600:	2301      	movs	r3, #1
 8009602:	930a      	str	r3, [sp, #40]	; 0x28
 8009604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009606:	4453      	add	r3, sl
 8009608:	f103 0901 	add.w	r9, r3, #1
 800960c:	9302      	str	r3, [sp, #8]
 800960e:	464b      	mov	r3, r9
 8009610:	2b01      	cmp	r3, #1
 8009612:	bfb8      	it	lt
 8009614:	2301      	movlt	r3, #1
 8009616:	e7ba      	b.n	800958e <_dtoa_r+0x246>
 8009618:	2300      	movs	r3, #0
 800961a:	e7b2      	b.n	8009582 <_dtoa_r+0x23a>
 800961c:	2300      	movs	r3, #0
 800961e:	e7f0      	b.n	8009602 <_dtoa_r+0x2ba>
 8009620:	2501      	movs	r5, #1
 8009622:	2300      	movs	r3, #0
 8009624:	9306      	str	r3, [sp, #24]
 8009626:	950a      	str	r5, [sp, #40]	; 0x28
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	4699      	mov	r9, r3
 8009630:	2200      	movs	r2, #0
 8009632:	2312      	movs	r3, #18
 8009634:	920b      	str	r2, [sp, #44]	; 0x2c
 8009636:	e7aa      	b.n	800958e <_dtoa_r+0x246>
 8009638:	2301      	movs	r3, #1
 800963a:	930a      	str	r3, [sp, #40]	; 0x28
 800963c:	e7f4      	b.n	8009628 <_dtoa_r+0x2e0>
 800963e:	2301      	movs	r3, #1
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	4699      	mov	r9, r3
 8009644:	461a      	mov	r2, r3
 8009646:	e7f5      	b.n	8009634 <_dtoa_r+0x2ec>
 8009648:	3101      	adds	r1, #1
 800964a:	6071      	str	r1, [r6, #4]
 800964c:	0052      	lsls	r2, r2, #1
 800964e:	e7a2      	b.n	8009596 <_dtoa_r+0x24e>
 8009650:	636f4361 	.word	0x636f4361
 8009654:	3fd287a7 	.word	0x3fd287a7
 8009658:	8b60c8b3 	.word	0x8b60c8b3
 800965c:	3fc68a28 	.word	0x3fc68a28
 8009660:	509f79fb 	.word	0x509f79fb
 8009664:	3fd34413 	.word	0x3fd34413
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	0800ae21 	.word	0x0800ae21
 8009670:	3ff80000 	.word	0x3ff80000
 8009674:	0800ae80 	.word	0x0800ae80
 8009678:	0800ae58 	.word	0x0800ae58
 800967c:	0800ae4d 	.word	0x0800ae4d
 8009680:	07f1      	lsls	r1, r6, #31
 8009682:	d508      	bpl.n	8009696 <_dtoa_r+0x34e>
 8009684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f7f6 ffc4 	bl	8000618 <__aeabi_dmul>
 8009690:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009694:	3501      	adds	r5, #1
 8009696:	1076      	asrs	r6, r6, #1
 8009698:	3708      	adds	r7, #8
 800969a:	2e00      	cmp	r6, #0
 800969c:	d1f0      	bne.n	8009680 <_dtoa_r+0x338>
 800969e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a6:	f7f7 f8e1 	bl	800086c <__aeabi_ddiv>
 80096aa:	e9cd 0100 	strd	r0, r1, [sp]
 80096ae:	e01a      	b.n	80096e6 <_dtoa_r+0x39e>
 80096b0:	2502      	movs	r5, #2
 80096b2:	e7a3      	b.n	80095fc <_dtoa_r+0x2b4>
 80096b4:	f000 80a0 	beq.w	80097f8 <_dtoa_r+0x4b0>
 80096b8:	f1ca 0600 	rsb	r6, sl, #0
 80096bc:	4b9f      	ldr	r3, [pc, #636]	; (800993c <_dtoa_r+0x5f4>)
 80096be:	4fa0      	ldr	r7, [pc, #640]	; (8009940 <_dtoa_r+0x5f8>)
 80096c0:	f006 020f 	and.w	r2, r6, #15
 80096c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096d0:	f7f6 ffa2 	bl	8000618 <__aeabi_dmul>
 80096d4:	e9cd 0100 	strd	r0, r1, [sp]
 80096d8:	1136      	asrs	r6, r6, #4
 80096da:	2300      	movs	r3, #0
 80096dc:	2502      	movs	r5, #2
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d17f      	bne.n	80097e2 <_dtoa_r+0x49a>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e1      	bne.n	80096aa <_dtoa_r+0x362>
 80096e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8087 	beq.w	80097fc <_dtoa_r+0x4b4>
 80096ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80096f2:	2200      	movs	r2, #0
 80096f4:	4b93      	ldr	r3, [pc, #588]	; (8009944 <_dtoa_r+0x5fc>)
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f7 f9ff 	bl	8000afc <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d07c      	beq.n	80097fc <_dtoa_r+0x4b4>
 8009702:	f1b9 0f00 	cmp.w	r9, #0
 8009706:	d079      	beq.n	80097fc <_dtoa_r+0x4b4>
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dd35      	ble.n	800977a <_dtoa_r+0x432>
 800970e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009712:	9308      	str	r3, [sp, #32]
 8009714:	4639      	mov	r1, r7
 8009716:	2200      	movs	r2, #0
 8009718:	4b8b      	ldr	r3, [pc, #556]	; (8009948 <_dtoa_r+0x600>)
 800971a:	4630      	mov	r0, r6
 800971c:	f7f6 ff7c 	bl	8000618 <__aeabi_dmul>
 8009720:	e9cd 0100 	strd	r0, r1, [sp]
 8009724:	9f02      	ldr	r7, [sp, #8]
 8009726:	3501      	adds	r5, #1
 8009728:	4628      	mov	r0, r5
 800972a:	f7f6 ff0b 	bl	8000544 <__aeabi_i2d>
 800972e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009732:	f7f6 ff71 	bl	8000618 <__aeabi_dmul>
 8009736:	2200      	movs	r2, #0
 8009738:	4b84      	ldr	r3, [pc, #528]	; (800994c <_dtoa_r+0x604>)
 800973a:	f7f6 fdb7 	bl	80002ac <__adddf3>
 800973e:	4605      	mov	r5, r0
 8009740:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009744:	2f00      	cmp	r7, #0
 8009746:	d15d      	bne.n	8009804 <_dtoa_r+0x4bc>
 8009748:	2200      	movs	r2, #0
 800974a:	4b81      	ldr	r3, [pc, #516]	; (8009950 <_dtoa_r+0x608>)
 800974c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009750:	f7f6 fdaa 	bl	80002a8 <__aeabi_dsub>
 8009754:	462a      	mov	r2, r5
 8009756:	4633      	mov	r3, r6
 8009758:	e9cd 0100 	strd	r0, r1, [sp]
 800975c:	f7f7 f9ec 	bl	8000b38 <__aeabi_dcmpgt>
 8009760:	2800      	cmp	r0, #0
 8009762:	f040 8288 	bne.w	8009c76 <_dtoa_r+0x92e>
 8009766:	462a      	mov	r2, r5
 8009768:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800976c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009770:	f7f7 f9c4 	bl	8000afc <__aeabi_dcmplt>
 8009774:	2800      	cmp	r0, #0
 8009776:	f040 827c 	bne.w	8009c72 <_dtoa_r+0x92a>
 800977a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800977e:	e9cd 2300 	strd	r2, r3, [sp]
 8009782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009784:	2b00      	cmp	r3, #0
 8009786:	f2c0 8150 	blt.w	8009a2a <_dtoa_r+0x6e2>
 800978a:	f1ba 0f0e 	cmp.w	sl, #14
 800978e:	f300 814c 	bgt.w	8009a2a <_dtoa_r+0x6e2>
 8009792:	4b6a      	ldr	r3, [pc, #424]	; (800993c <_dtoa_r+0x5f4>)
 8009794:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009798:	ed93 7b00 	vldr	d7, [r3]
 800979c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097a4:	f280 80d8 	bge.w	8009958 <_dtoa_r+0x610>
 80097a8:	f1b9 0f00 	cmp.w	r9, #0
 80097ac:	f300 80d4 	bgt.w	8009958 <_dtoa_r+0x610>
 80097b0:	f040 825e 	bne.w	8009c70 <_dtoa_r+0x928>
 80097b4:	2200      	movs	r2, #0
 80097b6:	4b66      	ldr	r3, [pc, #408]	; (8009950 <_dtoa_r+0x608>)
 80097b8:	ec51 0b17 	vmov	r0, r1, d7
 80097bc:	f7f6 ff2c 	bl	8000618 <__aeabi_dmul>
 80097c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097c4:	f7f7 f9ae 	bl	8000b24 <__aeabi_dcmpge>
 80097c8:	464f      	mov	r7, r9
 80097ca:	464e      	mov	r6, r9
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f040 8234 	bne.w	8009c3a <_dtoa_r+0x8f2>
 80097d2:	2331      	movs	r3, #49	; 0x31
 80097d4:	f10b 0501 	add.w	r5, fp, #1
 80097d8:	f88b 3000 	strb.w	r3, [fp]
 80097dc:	f10a 0a01 	add.w	sl, sl, #1
 80097e0:	e22f      	b.n	8009c42 <_dtoa_r+0x8fa>
 80097e2:	07f2      	lsls	r2, r6, #31
 80097e4:	d505      	bpl.n	80097f2 <_dtoa_r+0x4aa>
 80097e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ea:	f7f6 ff15 	bl	8000618 <__aeabi_dmul>
 80097ee:	3501      	adds	r5, #1
 80097f0:	2301      	movs	r3, #1
 80097f2:	1076      	asrs	r6, r6, #1
 80097f4:	3708      	adds	r7, #8
 80097f6:	e772      	b.n	80096de <_dtoa_r+0x396>
 80097f8:	2502      	movs	r5, #2
 80097fa:	e774      	b.n	80096e6 <_dtoa_r+0x39e>
 80097fc:	f8cd a020 	str.w	sl, [sp, #32]
 8009800:	464f      	mov	r7, r9
 8009802:	e791      	b.n	8009728 <_dtoa_r+0x3e0>
 8009804:	4b4d      	ldr	r3, [pc, #308]	; (800993c <_dtoa_r+0x5f4>)
 8009806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800980a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800980e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d047      	beq.n	80098a4 <_dtoa_r+0x55c>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	2000      	movs	r0, #0
 800981a:	494e      	ldr	r1, [pc, #312]	; (8009954 <_dtoa_r+0x60c>)
 800981c:	f7f7 f826 	bl	800086c <__aeabi_ddiv>
 8009820:	462a      	mov	r2, r5
 8009822:	4633      	mov	r3, r6
 8009824:	f7f6 fd40 	bl	80002a8 <__aeabi_dsub>
 8009828:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800982c:	465d      	mov	r5, fp
 800982e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009832:	f7f7 f9a1 	bl	8000b78 <__aeabi_d2iz>
 8009836:	4606      	mov	r6, r0
 8009838:	f7f6 fe84 	bl	8000544 <__aeabi_i2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009844:	f7f6 fd30 	bl	80002a8 <__aeabi_dsub>
 8009848:	3630      	adds	r6, #48	; 0x30
 800984a:	f805 6b01 	strb.w	r6, [r5], #1
 800984e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009852:	e9cd 0100 	strd	r0, r1, [sp]
 8009856:	f7f7 f951 	bl	8000afc <__aeabi_dcmplt>
 800985a:	2800      	cmp	r0, #0
 800985c:	d163      	bne.n	8009926 <_dtoa_r+0x5de>
 800985e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009862:	2000      	movs	r0, #0
 8009864:	4937      	ldr	r1, [pc, #220]	; (8009944 <_dtoa_r+0x5fc>)
 8009866:	f7f6 fd1f 	bl	80002a8 <__aeabi_dsub>
 800986a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800986e:	f7f7 f945 	bl	8000afc <__aeabi_dcmplt>
 8009872:	2800      	cmp	r0, #0
 8009874:	f040 80b7 	bne.w	80099e6 <_dtoa_r+0x69e>
 8009878:	eba5 030b 	sub.w	r3, r5, fp
 800987c:	429f      	cmp	r7, r3
 800987e:	f77f af7c 	ble.w	800977a <_dtoa_r+0x432>
 8009882:	2200      	movs	r2, #0
 8009884:	4b30      	ldr	r3, [pc, #192]	; (8009948 <_dtoa_r+0x600>)
 8009886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800988a:	f7f6 fec5 	bl	8000618 <__aeabi_dmul>
 800988e:	2200      	movs	r2, #0
 8009890:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009894:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <_dtoa_r+0x600>)
 8009896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800989a:	f7f6 febd 	bl	8000618 <__aeabi_dmul>
 800989e:	e9cd 0100 	strd	r0, r1, [sp]
 80098a2:	e7c4      	b.n	800982e <_dtoa_r+0x4e6>
 80098a4:	462a      	mov	r2, r5
 80098a6:	4633      	mov	r3, r6
 80098a8:	f7f6 feb6 	bl	8000618 <__aeabi_dmul>
 80098ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80098b0:	eb0b 0507 	add.w	r5, fp, r7
 80098b4:	465e      	mov	r6, fp
 80098b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098ba:	f7f7 f95d 	bl	8000b78 <__aeabi_d2iz>
 80098be:	4607      	mov	r7, r0
 80098c0:	f7f6 fe40 	bl	8000544 <__aeabi_i2d>
 80098c4:	3730      	adds	r7, #48	; 0x30
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098ce:	f7f6 fceb 	bl	80002a8 <__aeabi_dsub>
 80098d2:	f806 7b01 	strb.w	r7, [r6], #1
 80098d6:	42ae      	cmp	r6, r5
 80098d8:	e9cd 0100 	strd	r0, r1, [sp]
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	d126      	bne.n	8009930 <_dtoa_r+0x5e8>
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <_dtoa_r+0x60c>)
 80098e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e8:	f7f6 fce0 	bl	80002ac <__adddf3>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098f4:	f7f7 f920 	bl	8000b38 <__aeabi_dcmpgt>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d174      	bne.n	80099e6 <_dtoa_r+0x69e>
 80098fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009900:	2000      	movs	r0, #0
 8009902:	4914      	ldr	r1, [pc, #80]	; (8009954 <_dtoa_r+0x60c>)
 8009904:	f7f6 fcd0 	bl	80002a8 <__aeabi_dsub>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009910:	f7f7 f8f4 	bl	8000afc <__aeabi_dcmplt>
 8009914:	2800      	cmp	r0, #0
 8009916:	f43f af30 	beq.w	800977a <_dtoa_r+0x432>
 800991a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800991e:	2b30      	cmp	r3, #48	; 0x30
 8009920:	f105 32ff 	add.w	r2, r5, #4294967295
 8009924:	d002      	beq.n	800992c <_dtoa_r+0x5e4>
 8009926:	f8dd a020 	ldr.w	sl, [sp, #32]
 800992a:	e04a      	b.n	80099c2 <_dtoa_r+0x67a>
 800992c:	4615      	mov	r5, r2
 800992e:	e7f4      	b.n	800991a <_dtoa_r+0x5d2>
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <_dtoa_r+0x600>)
 8009932:	f7f6 fe71 	bl	8000618 <__aeabi_dmul>
 8009936:	e9cd 0100 	strd	r0, r1, [sp]
 800993a:	e7bc      	b.n	80098b6 <_dtoa_r+0x56e>
 800993c:	0800ae80 	.word	0x0800ae80
 8009940:	0800ae58 	.word	0x0800ae58
 8009944:	3ff00000 	.word	0x3ff00000
 8009948:	40240000 	.word	0x40240000
 800994c:	401c0000 	.word	0x401c0000
 8009950:	40140000 	.word	0x40140000
 8009954:	3fe00000 	.word	0x3fe00000
 8009958:	e9dd 6700 	ldrd	r6, r7, [sp]
 800995c:	465d      	mov	r5, fp
 800995e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7f6 ff81 	bl	800086c <__aeabi_ddiv>
 800996a:	f7f7 f905 	bl	8000b78 <__aeabi_d2iz>
 800996e:	4680      	mov	r8, r0
 8009970:	f7f6 fde8 	bl	8000544 <__aeabi_i2d>
 8009974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009978:	f7f6 fe4e 	bl	8000618 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009988:	f7f6 fc8e 	bl	80002a8 <__aeabi_dsub>
 800998c:	f805 6b01 	strb.w	r6, [r5], #1
 8009990:	eba5 060b 	sub.w	r6, r5, fp
 8009994:	45b1      	cmp	r9, r6
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	d139      	bne.n	8009a10 <_dtoa_r+0x6c8>
 800999c:	f7f6 fc86 	bl	80002ac <__adddf3>
 80099a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	f7f7 f8c6 	bl	8000b38 <__aeabi_dcmpgt>
 80099ac:	b9c8      	cbnz	r0, 80099e2 <_dtoa_r+0x69a>
 80099ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f7 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80099ba:	b110      	cbz	r0, 80099c2 <_dtoa_r+0x67a>
 80099bc:	f018 0f01 	tst.w	r8, #1
 80099c0:	d10f      	bne.n	80099e2 <_dtoa_r+0x69a>
 80099c2:	9904      	ldr	r1, [sp, #16]
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 fac6 	bl	8009f56 <_Bfree>
 80099ca:	2300      	movs	r3, #0
 80099cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099ce:	702b      	strb	r3, [r5, #0]
 80099d0:	f10a 0301 	add.w	r3, sl, #1
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 8241 	beq.w	8009e60 <_dtoa_r+0xb18>
 80099de:	601d      	str	r5, [r3, #0]
 80099e0:	e23e      	b.n	8009e60 <_dtoa_r+0xb18>
 80099e2:	f8cd a020 	str.w	sl, [sp, #32]
 80099e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099ea:	2a39      	cmp	r2, #57	; 0x39
 80099ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80099f0:	d108      	bne.n	8009a04 <_dtoa_r+0x6bc>
 80099f2:	459b      	cmp	fp, r3
 80099f4:	d10a      	bne.n	8009a0c <_dtoa_r+0x6c4>
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	3301      	adds	r3, #1
 80099fa:	9308      	str	r3, [sp, #32]
 80099fc:	2330      	movs	r3, #48	; 0x30
 80099fe:	f88b 3000 	strb.w	r3, [fp]
 8009a02:	465b      	mov	r3, fp
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	3201      	adds	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e78c      	b.n	8009926 <_dtoa_r+0x5de>
 8009a0c:	461d      	mov	r5, r3
 8009a0e:	e7ea      	b.n	80099e6 <_dtoa_r+0x69e>
 8009a10:	2200      	movs	r2, #0
 8009a12:	4b9b      	ldr	r3, [pc, #620]	; (8009c80 <_dtoa_r+0x938>)
 8009a14:	f7f6 fe00 	bl	8000618 <__aeabi_dmul>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	460f      	mov	r7, r1
 8009a20:	f7f7 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d09a      	beq.n	800995e <_dtoa_r+0x616>
 8009a28:	e7cb      	b.n	80099c2 <_dtoa_r+0x67a>
 8009a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f000 808b 	beq.w	8009b48 <_dtoa_r+0x800>
 8009a32:	9a06      	ldr	r2, [sp, #24]
 8009a34:	2a01      	cmp	r2, #1
 8009a36:	dc6e      	bgt.n	8009b16 <_dtoa_r+0x7ce>
 8009a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a3a:	2a00      	cmp	r2, #0
 8009a3c:	d067      	beq.n	8009b0e <_dtoa_r+0x7c6>
 8009a3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a42:	9f07      	ldr	r7, [sp, #28]
 8009a44:	9d05      	ldr	r5, [sp, #20]
 8009a46:	9a05      	ldr	r2, [sp, #20]
 8009a48:	2101      	movs	r1, #1
 8009a4a:	441a      	add	r2, r3
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	9205      	str	r2, [sp, #20]
 8009a50:	4498      	add	r8, r3
 8009a52:	f000 fb20 	bl	800a096 <__i2b>
 8009a56:	4606      	mov	r6, r0
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	dd0c      	ble.n	8009a76 <_dtoa_r+0x72e>
 8009a5c:	f1b8 0f00 	cmp.w	r8, #0
 8009a60:	dd09      	ble.n	8009a76 <_dtoa_r+0x72e>
 8009a62:	4545      	cmp	r5, r8
 8009a64:	9a05      	ldr	r2, [sp, #20]
 8009a66:	462b      	mov	r3, r5
 8009a68:	bfa8      	it	ge
 8009a6a:	4643      	movge	r3, r8
 8009a6c:	1ad2      	subs	r2, r2, r3
 8009a6e:	9205      	str	r2, [sp, #20]
 8009a70:	1aed      	subs	r5, r5, r3
 8009a72:	eba8 0803 	sub.w	r8, r8, r3
 8009a76:	9b07      	ldr	r3, [sp, #28]
 8009a78:	b1eb      	cbz	r3, 8009ab6 <_dtoa_r+0x76e>
 8009a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d067      	beq.n	8009b50 <_dtoa_r+0x808>
 8009a80:	b18f      	cbz	r7, 8009aa6 <_dtoa_r+0x75e>
 8009a82:	4631      	mov	r1, r6
 8009a84:	463a      	mov	r2, r7
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 fba4 	bl	800a1d4 <__pow5mult>
 8009a8c:	9a04      	ldr	r2, [sp, #16]
 8009a8e:	4601      	mov	r1, r0
 8009a90:	4606      	mov	r6, r0
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fb08 	bl	800a0a8 <__multiply>
 8009a98:	9904      	ldr	r1, [sp, #16]
 8009a9a:	9008      	str	r0, [sp, #32]
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 fa5a 	bl	8009f56 <_Bfree>
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9b07      	ldr	r3, [sp, #28]
 8009aa8:	1bda      	subs	r2, r3, r7
 8009aaa:	d004      	beq.n	8009ab6 <_dtoa_r+0x76e>
 8009aac:	9904      	ldr	r1, [sp, #16]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 fb90 	bl	800a1d4 <__pow5mult>
 8009ab4:	9004      	str	r0, [sp, #16]
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 faec 	bl	800a096 <__i2b>
 8009abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 81d0 	beq.w	8009e68 <_dtoa_r+0xb20>
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fb81 	bl	800a1d4 <__pow5mult>
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	dc40      	bgt.n	8009b5c <_dtoa_r+0x814>
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d139      	bne.n	8009b54 <_dtoa_r+0x80c>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d136      	bne.n	8009b58 <_dtoa_r+0x810>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	0d1b      	lsrs	r3, r3, #20
 8009af2:	051b      	lsls	r3, r3, #20
 8009af4:	b12b      	cbz	r3, 8009b02 <_dtoa_r+0x7ba>
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	3301      	adds	r3, #1
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	f108 0801 	add.w	r8, r8, #1
 8009b00:	2301      	movs	r3, #1
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d12a      	bne.n	8009b60 <_dtoa_r+0x818>
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	e030      	b.n	8009b70 <_dtoa_r+0x828>
 8009b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b14:	e795      	b.n	8009a42 <_dtoa_r+0x6fa>
 8009b16:	9b07      	ldr	r3, [sp, #28]
 8009b18:	f109 37ff 	add.w	r7, r9, #4294967295
 8009b1c:	42bb      	cmp	r3, r7
 8009b1e:	bfbf      	itttt	lt
 8009b20:	9b07      	ldrlt	r3, [sp, #28]
 8009b22:	9707      	strlt	r7, [sp, #28]
 8009b24:	1afa      	sublt	r2, r7, r3
 8009b26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009b28:	bfbb      	ittet	lt
 8009b2a:	189b      	addlt	r3, r3, r2
 8009b2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b2e:	1bdf      	subge	r7, r3, r7
 8009b30:	2700      	movlt	r7, #0
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	bfb5      	itete	lt
 8009b38:	9b05      	ldrlt	r3, [sp, #20]
 8009b3a:	9d05      	ldrge	r5, [sp, #20]
 8009b3c:	eba3 0509 	sublt.w	r5, r3, r9
 8009b40:	464b      	movge	r3, r9
 8009b42:	bfb8      	it	lt
 8009b44:	2300      	movlt	r3, #0
 8009b46:	e77e      	b.n	8009a46 <_dtoa_r+0x6fe>
 8009b48:	9f07      	ldr	r7, [sp, #28]
 8009b4a:	9d05      	ldr	r5, [sp, #20]
 8009b4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009b4e:	e783      	b.n	8009a58 <_dtoa_r+0x710>
 8009b50:	9a07      	ldr	r2, [sp, #28]
 8009b52:	e7ab      	b.n	8009aac <_dtoa_r+0x764>
 8009b54:	2300      	movs	r3, #0
 8009b56:	e7d4      	b.n	8009b02 <_dtoa_r+0x7ba>
 8009b58:	9b00      	ldr	r3, [sp, #0]
 8009b5a:	e7d2      	b.n	8009b02 <_dtoa_r+0x7ba>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009b66:	6918      	ldr	r0, [r3, #16]
 8009b68:	f000 fa47 	bl	8009ffa <__hi0bits>
 8009b6c:	f1c0 0020 	rsb	r0, r0, #32
 8009b70:	4440      	add	r0, r8
 8009b72:	f010 001f 	ands.w	r0, r0, #31
 8009b76:	d047      	beq.n	8009c08 <_dtoa_r+0x8c0>
 8009b78:	f1c0 0320 	rsb	r3, r0, #32
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	dd3b      	ble.n	8009bf8 <_dtoa_r+0x8b0>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	f1c0 001c 	rsb	r0, r0, #28
 8009b86:	4403      	add	r3, r0
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	4405      	add	r5, r0
 8009b8c:	4480      	add	r8, r0
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd05      	ble.n	8009ba0 <_dtoa_r+0x858>
 8009b94:	461a      	mov	r2, r3
 8009b96:	9904      	ldr	r1, [sp, #16]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fb69 	bl	800a270 <__lshift>
 8009b9e:	9004      	str	r0, [sp, #16]
 8009ba0:	f1b8 0f00 	cmp.w	r8, #0
 8009ba4:	dd05      	ble.n	8009bb2 <_dtoa_r+0x86a>
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4642      	mov	r2, r8
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fb60 	bl	800a270 <__lshift>
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb4:	b353      	cbz	r3, 8009c0c <_dtoa_r+0x8c4>
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	9804      	ldr	r0, [sp, #16]
 8009bba:	f000 fbad 	bl	800a318 <__mcmp>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	da24      	bge.n	8009c0c <_dtoa_r+0x8c4>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	9904      	ldr	r1, [sp, #16]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f9db 	bl	8009f84 <__multadd>
 8009bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd0:	9004      	str	r0, [sp, #16]
 8009bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 814d 	beq.w	8009e76 <_dtoa_r+0xb2e>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4631      	mov	r1, r6
 8009be0:	220a      	movs	r2, #10
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f9ce 	bl	8009f84 <__multadd>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	4606      	mov	r6, r0
 8009bee:	dc4f      	bgt.n	8009c90 <_dtoa_r+0x948>
 8009bf0:	9b06      	ldr	r3, [sp, #24]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	dd4c      	ble.n	8009c90 <_dtoa_r+0x948>
 8009bf6:	e011      	b.n	8009c1c <_dtoa_r+0x8d4>
 8009bf8:	d0c9      	beq.n	8009b8e <_dtoa_r+0x846>
 8009bfa:	9a05      	ldr	r2, [sp, #20]
 8009bfc:	331c      	adds	r3, #28
 8009bfe:	441a      	add	r2, r3
 8009c00:	9205      	str	r2, [sp, #20]
 8009c02:	441d      	add	r5, r3
 8009c04:	4498      	add	r8, r3
 8009c06:	e7c2      	b.n	8009b8e <_dtoa_r+0x846>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	e7f6      	b.n	8009bfa <_dtoa_r+0x8b2>
 8009c0c:	f1b9 0f00 	cmp.w	r9, #0
 8009c10:	dc38      	bgt.n	8009c84 <_dtoa_r+0x93c>
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	dd35      	ble.n	8009c84 <_dtoa_r+0x93c>
 8009c18:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c1c:	9b02      	ldr	r3, [sp, #8]
 8009c1e:	b963      	cbnz	r3, 8009c3a <_dtoa_r+0x8f2>
 8009c20:	4639      	mov	r1, r7
 8009c22:	2205      	movs	r2, #5
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 f9ad 	bl	8009f84 <__multadd>
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	9804      	ldr	r0, [sp, #16]
 8009c30:	f000 fb72 	bl	800a318 <__mcmp>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f73f adcc 	bgt.w	80097d2 <_dtoa_r+0x48a>
 8009c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c3c:	465d      	mov	r5, fp
 8009c3e:	ea6f 0a03 	mvn.w	sl, r3
 8009c42:	f04f 0900 	mov.w	r9, #0
 8009c46:	4639      	mov	r1, r7
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 f984 	bl	8009f56 <_Bfree>
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	f43f aeb7 	beq.w	80099c2 <_dtoa_r+0x67a>
 8009c54:	f1b9 0f00 	cmp.w	r9, #0
 8009c58:	d005      	beq.n	8009c66 <_dtoa_r+0x91e>
 8009c5a:	45b1      	cmp	r9, r6
 8009c5c:	d003      	beq.n	8009c66 <_dtoa_r+0x91e>
 8009c5e:	4649      	mov	r1, r9
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f978 	bl	8009f56 <_Bfree>
 8009c66:	4631      	mov	r1, r6
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 f974 	bl	8009f56 <_Bfree>
 8009c6e:	e6a8      	b.n	80099c2 <_dtoa_r+0x67a>
 8009c70:	2700      	movs	r7, #0
 8009c72:	463e      	mov	r6, r7
 8009c74:	e7e1      	b.n	8009c3a <_dtoa_r+0x8f2>
 8009c76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009c7a:	463e      	mov	r6, r7
 8009c7c:	e5a9      	b.n	80097d2 <_dtoa_r+0x48a>
 8009c7e:	bf00      	nop
 8009c80:	40240000 	.word	0x40240000
 8009c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c86:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80fa 	beq.w	8009e84 <_dtoa_r+0xb3c>
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	dd05      	ble.n	8009ca0 <_dtoa_r+0x958>
 8009c94:	4631      	mov	r1, r6
 8009c96:	462a      	mov	r2, r5
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fae9 	bl	800a270 <__lshift>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	9b07      	ldr	r3, [sp, #28]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d04c      	beq.n	8009d40 <_dtoa_r+0x9f8>
 8009ca6:	6871      	ldr	r1, [r6, #4]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 f920 	bl	8009eee <_Balloc>
 8009cae:	6932      	ldr	r2, [r6, #16]
 8009cb0:	3202      	adds	r2, #2
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	0092      	lsls	r2, r2, #2
 8009cb6:	f106 010c 	add.w	r1, r6, #12
 8009cba:	300c      	adds	r0, #12
 8009cbc:	f000 f90a 	bl	8009ed4 <memcpy>
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fad3 	bl	800a270 <__lshift>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	f8cd b014 	str.w	fp, [sp, #20]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	46b1      	mov	r9, r6
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	4606      	mov	r6, r0
 8009cda:	4639      	mov	r1, r7
 8009cdc:	9804      	ldr	r0, [sp, #16]
 8009cde:	f7ff faa7 	bl	8009230 <quorem>
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009cea:	9804      	ldr	r0, [sp, #16]
 8009cec:	f000 fb14 	bl	800a318 <__mcmp>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	9000      	str	r0, [sp, #0]
 8009cf4:	4639      	mov	r1, r7
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f000 fb28 	bl	800a34c <__mdiff>
 8009cfc:	68c3      	ldr	r3, [r0, #12]
 8009cfe:	4602      	mov	r2, r0
 8009d00:	bb03      	cbnz	r3, 8009d44 <_dtoa_r+0x9fc>
 8009d02:	4601      	mov	r1, r0
 8009d04:	9008      	str	r0, [sp, #32]
 8009d06:	9804      	ldr	r0, [sp, #16]
 8009d08:	f000 fb06 	bl	800a318 <__mcmp>
 8009d0c:	9a08      	ldr	r2, [sp, #32]
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4611      	mov	r1, r2
 8009d12:	4620      	mov	r0, r4
 8009d14:	9308      	str	r3, [sp, #32]
 8009d16:	f000 f91e 	bl	8009f56 <_Bfree>
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	b9a3      	cbnz	r3, 8009d48 <_dtoa_r+0xa00>
 8009d1e:	9a06      	ldr	r2, [sp, #24]
 8009d20:	b992      	cbnz	r2, 8009d48 <_dtoa_r+0xa00>
 8009d22:	9a07      	ldr	r2, [sp, #28]
 8009d24:	b982      	cbnz	r2, 8009d48 <_dtoa_r+0xa00>
 8009d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d2a:	d029      	beq.n	8009d80 <_dtoa_r+0xa38>
 8009d2c:	9b00      	ldr	r3, [sp, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dd01      	ble.n	8009d36 <_dtoa_r+0x9ee>
 8009d32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	1c5d      	adds	r5, r3, #1
 8009d3a:	f883 8000 	strb.w	r8, [r3]
 8009d3e:	e782      	b.n	8009c46 <_dtoa_r+0x8fe>
 8009d40:	4630      	mov	r0, r6
 8009d42:	e7c2      	b.n	8009cca <_dtoa_r+0x982>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7e3      	b.n	8009d10 <_dtoa_r+0x9c8>
 8009d48:	9a00      	ldr	r2, [sp, #0]
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	db04      	blt.n	8009d58 <_dtoa_r+0xa10>
 8009d4e:	d125      	bne.n	8009d9c <_dtoa_r+0xa54>
 8009d50:	9a06      	ldr	r2, [sp, #24]
 8009d52:	bb1a      	cbnz	r2, 8009d9c <_dtoa_r+0xa54>
 8009d54:	9a07      	ldr	r2, [sp, #28]
 8009d56:	bb0a      	cbnz	r2, 8009d9c <_dtoa_r+0xa54>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	ddec      	ble.n	8009d36 <_dtoa_r+0x9ee>
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	9904      	ldr	r1, [sp, #16]
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fa85 	bl	800a270 <__lshift>
 8009d66:	4639      	mov	r1, r7
 8009d68:	9004      	str	r0, [sp, #16]
 8009d6a:	f000 fad5 	bl	800a318 <__mcmp>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	dc03      	bgt.n	8009d7a <_dtoa_r+0xa32>
 8009d72:	d1e0      	bne.n	8009d36 <_dtoa_r+0x9ee>
 8009d74:	f018 0f01 	tst.w	r8, #1
 8009d78:	d0dd      	beq.n	8009d36 <_dtoa_r+0x9ee>
 8009d7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d7e:	d1d8      	bne.n	8009d32 <_dtoa_r+0x9ea>
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	9a05      	ldr	r2, [sp, #20]
 8009d84:	1c5d      	adds	r5, r3, #1
 8009d86:	2339      	movs	r3, #57	; 0x39
 8009d88:	7013      	strb	r3, [r2, #0]
 8009d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d8e:	2b39      	cmp	r3, #57	; 0x39
 8009d90:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d94:	d04f      	beq.n	8009e36 <_dtoa_r+0xaee>
 8009d96:	3301      	adds	r3, #1
 8009d98:	7013      	strb	r3, [r2, #0]
 8009d9a:	e754      	b.n	8009c46 <_dtoa_r+0x8fe>
 8009d9c:	9a05      	ldr	r2, [sp, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f102 0501 	add.w	r5, r2, #1
 8009da4:	dd06      	ble.n	8009db4 <_dtoa_r+0xa6c>
 8009da6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009daa:	d0e9      	beq.n	8009d80 <_dtoa_r+0xa38>
 8009dac:	f108 0801 	add.w	r8, r8, #1
 8009db0:	9b05      	ldr	r3, [sp, #20]
 8009db2:	e7c2      	b.n	8009d3a <_dtoa_r+0x9f2>
 8009db4:	9a02      	ldr	r2, [sp, #8]
 8009db6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009dba:	eba5 030b 	sub.w	r3, r5, fp
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d021      	beq.n	8009e06 <_dtoa_r+0xabe>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	9904      	ldr	r1, [sp, #16]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 f8db 	bl	8009f84 <__multadd>
 8009dce:	45b1      	cmp	r9, r6
 8009dd0:	9004      	str	r0, [sp, #16]
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	f04f 020a 	mov.w	r2, #10
 8009dda:	4649      	mov	r1, r9
 8009ddc:	4620      	mov	r0, r4
 8009dde:	d105      	bne.n	8009dec <_dtoa_r+0xaa4>
 8009de0:	f000 f8d0 	bl	8009f84 <__multadd>
 8009de4:	4681      	mov	r9, r0
 8009de6:	4606      	mov	r6, r0
 8009de8:	9505      	str	r5, [sp, #20]
 8009dea:	e776      	b.n	8009cda <_dtoa_r+0x992>
 8009dec:	f000 f8ca 	bl	8009f84 <__multadd>
 8009df0:	4631      	mov	r1, r6
 8009df2:	4681      	mov	r9, r0
 8009df4:	2300      	movs	r3, #0
 8009df6:	220a      	movs	r2, #10
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 f8c3 	bl	8009f84 <__multadd>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	e7f2      	b.n	8009de8 <_dtoa_r+0xaa0>
 8009e02:	f04f 0900 	mov.w	r9, #0
 8009e06:	2201      	movs	r2, #1
 8009e08:	9904      	ldr	r1, [sp, #16]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fa30 	bl	800a270 <__lshift>
 8009e10:	4639      	mov	r1, r7
 8009e12:	9004      	str	r0, [sp, #16]
 8009e14:	f000 fa80 	bl	800a318 <__mcmp>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	dcb6      	bgt.n	8009d8a <_dtoa_r+0xa42>
 8009e1c:	d102      	bne.n	8009e24 <_dtoa_r+0xadc>
 8009e1e:	f018 0f01 	tst.w	r8, #1
 8009e22:	d1b2      	bne.n	8009d8a <_dtoa_r+0xa42>
 8009e24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e28:	2b30      	cmp	r3, #48	; 0x30
 8009e2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e2e:	f47f af0a 	bne.w	8009c46 <_dtoa_r+0x8fe>
 8009e32:	4615      	mov	r5, r2
 8009e34:	e7f6      	b.n	8009e24 <_dtoa_r+0xadc>
 8009e36:	4593      	cmp	fp, r2
 8009e38:	d105      	bne.n	8009e46 <_dtoa_r+0xafe>
 8009e3a:	2331      	movs	r3, #49	; 0x31
 8009e3c:	f10a 0a01 	add.w	sl, sl, #1
 8009e40:	f88b 3000 	strb.w	r3, [fp]
 8009e44:	e6ff      	b.n	8009c46 <_dtoa_r+0x8fe>
 8009e46:	4615      	mov	r5, r2
 8009e48:	e79f      	b.n	8009d8a <_dtoa_r+0xa42>
 8009e4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009eb0 <_dtoa_r+0xb68>
 8009e4e:	e007      	b.n	8009e60 <_dtoa_r+0xb18>
 8009e50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009eb4 <_dtoa_r+0xb6c>
 8009e56:	b11b      	cbz	r3, 8009e60 <_dtoa_r+0xb18>
 8009e58:	f10b 0308 	add.w	r3, fp, #8
 8009e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4658      	mov	r0, fp
 8009e62:	b017      	add	sp, #92	; 0x5c
 8009e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	9b06      	ldr	r3, [sp, #24]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	f77f ae35 	ble.w	8009ada <_dtoa_r+0x792>
 8009e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	e649      	b.n	8009b0a <_dtoa_r+0x7c2>
 8009e76:	9b02      	ldr	r3, [sp, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc03      	bgt.n	8009e84 <_dtoa_r+0xb3c>
 8009e7c:	9b06      	ldr	r3, [sp, #24]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	f73f aecc 	bgt.w	8009c1c <_dtoa_r+0x8d4>
 8009e84:	465d      	mov	r5, fp
 8009e86:	4639      	mov	r1, r7
 8009e88:	9804      	ldr	r0, [sp, #16]
 8009e8a:	f7ff f9d1 	bl	8009230 <quorem>
 8009e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e92:	f805 8b01 	strb.w	r8, [r5], #1
 8009e96:	9a02      	ldr	r2, [sp, #8]
 8009e98:	eba5 030b 	sub.w	r3, r5, fp
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	ddb0      	ble.n	8009e02 <_dtoa_r+0xaba>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	9904      	ldr	r1, [sp, #16]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 f86c 	bl	8009f84 <__multadd>
 8009eac:	9004      	str	r0, [sp, #16]
 8009eae:	e7ea      	b.n	8009e86 <_dtoa_r+0xb3e>
 8009eb0:	0800ae20 	.word	0x0800ae20
 8009eb4:	0800ae44 	.word	0x0800ae44

08009eb8 <_localeconv_r>:
 8009eb8:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <_localeconv_r+0x14>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6a18      	ldr	r0, [r3, #32]
 8009ebe:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <_localeconv_r+0x18>)
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	bf08      	it	eq
 8009ec4:	4618      	moveq	r0, r3
 8009ec6:	30f0      	adds	r0, #240	; 0xf0
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	2000000c 	.word	0x2000000c
 8009ed0:	20000070 	.word	0x20000070

08009ed4 <memcpy>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	1e43      	subs	r3, r0, #1
 8009ed8:	440a      	add	r2, r1
 8009eda:	4291      	cmp	r1, r2
 8009edc:	d100      	bne.n	8009ee0 <memcpy+0xc>
 8009ede:	bd10      	pop	{r4, pc}
 8009ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee8:	e7f7      	b.n	8009eda <memcpy+0x6>

08009eea <__malloc_lock>:
 8009eea:	4770      	bx	lr

08009eec <__malloc_unlock>:
 8009eec:	4770      	bx	lr

08009eee <_Balloc>:
 8009eee:	b570      	push	{r4, r5, r6, lr}
 8009ef0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	b93d      	cbnz	r5, 8009f08 <_Balloc+0x1a>
 8009ef8:	2010      	movs	r0, #16
 8009efa:	f7fe fc55 	bl	80087a8 <malloc>
 8009efe:	6260      	str	r0, [r4, #36]	; 0x24
 8009f00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f04:	6005      	str	r5, [r0, #0]
 8009f06:	60c5      	str	r5, [r0, #12]
 8009f08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f0a:	68eb      	ldr	r3, [r5, #12]
 8009f0c:	b183      	cbz	r3, 8009f30 <_Balloc+0x42>
 8009f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f16:	b9b8      	cbnz	r0, 8009f48 <_Balloc+0x5a>
 8009f18:	2101      	movs	r1, #1
 8009f1a:	fa01 f506 	lsl.w	r5, r1, r6
 8009f1e:	1d6a      	adds	r2, r5, #5
 8009f20:	0092      	lsls	r2, r2, #2
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fabe 	bl	800a4a4 <_calloc_r>
 8009f28:	b160      	cbz	r0, 8009f44 <_Balloc+0x56>
 8009f2a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009f2e:	e00e      	b.n	8009f4e <_Balloc+0x60>
 8009f30:	2221      	movs	r2, #33	; 0x21
 8009f32:	2104      	movs	r1, #4
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 fab5 	bl	800a4a4 <_calloc_r>
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	60e8      	str	r0, [r5, #12]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e4      	bne.n	8009f0e <_Balloc+0x20>
 8009f44:	2000      	movs	r0, #0
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	6802      	ldr	r2, [r0, #0]
 8009f4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f54:	e7f7      	b.n	8009f46 <_Balloc+0x58>

08009f56 <_Bfree>:
 8009f56:	b570      	push	{r4, r5, r6, lr}
 8009f58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	b93c      	cbnz	r4, 8009f70 <_Bfree+0x1a>
 8009f60:	2010      	movs	r0, #16
 8009f62:	f7fe fc21 	bl	80087a8 <malloc>
 8009f66:	6270      	str	r0, [r6, #36]	; 0x24
 8009f68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f6c:	6004      	str	r4, [r0, #0]
 8009f6e:	60c4      	str	r4, [r0, #12]
 8009f70:	b13d      	cbz	r5, 8009f82 <_Bfree+0x2c>
 8009f72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f74:	686a      	ldr	r2, [r5, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f7c:	6029      	str	r1, [r5, #0]
 8009f7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009f82:	bd70      	pop	{r4, r5, r6, pc}

08009f84 <__multadd>:
 8009f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	690d      	ldr	r5, [r1, #16]
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	f101 0c14 	add.w	ip, r1, #20
 8009f94:	2300      	movs	r3, #0
 8009f96:	f8dc 0000 	ldr.w	r0, [ip]
 8009f9a:	b281      	uxth	r1, r0
 8009f9c:	fb02 7101 	mla	r1, r2, r1, r7
 8009fa0:	0c0f      	lsrs	r7, r1, #16
 8009fa2:	0c00      	lsrs	r0, r0, #16
 8009fa4:	fb02 7000 	mla	r0, r2, r0, r7
 8009fa8:	b289      	uxth	r1, r1
 8009faa:	3301      	adds	r3, #1
 8009fac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009fb0:	429d      	cmp	r5, r3
 8009fb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009fba:	dcec      	bgt.n	8009f96 <__multadd+0x12>
 8009fbc:	b1d7      	cbz	r7, 8009ff4 <__multadd+0x70>
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	42ab      	cmp	r3, r5
 8009fc2:	dc12      	bgt.n	8009fea <__multadd+0x66>
 8009fc4:	6861      	ldr	r1, [r4, #4]
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	3101      	adds	r1, #1
 8009fca:	f7ff ff90 	bl	8009eee <_Balloc>
 8009fce:	6922      	ldr	r2, [r4, #16]
 8009fd0:	3202      	adds	r2, #2
 8009fd2:	f104 010c 	add.w	r1, r4, #12
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	300c      	adds	r0, #12
 8009fdc:	f7ff ff7a 	bl	8009ed4 <memcpy>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ffb7 	bl	8009f56 <_Bfree>
 8009fe8:	4644      	mov	r4, r8
 8009fea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fee:	3501      	adds	r5, #1
 8009ff0:	615f      	str	r7, [r3, #20]
 8009ff2:	6125      	str	r5, [r4, #16]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ffa <__hi0bits>:
 8009ffa:	0c02      	lsrs	r2, r0, #16
 8009ffc:	0412      	lsls	r2, r2, #16
 8009ffe:	4603      	mov	r3, r0
 800a000:	b9b2      	cbnz	r2, 800a030 <__hi0bits+0x36>
 800a002:	0403      	lsls	r3, r0, #16
 800a004:	2010      	movs	r0, #16
 800a006:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a00a:	bf04      	itt	eq
 800a00c:	021b      	lsleq	r3, r3, #8
 800a00e:	3008      	addeq	r0, #8
 800a010:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a014:	bf04      	itt	eq
 800a016:	011b      	lsleq	r3, r3, #4
 800a018:	3004      	addeq	r0, #4
 800a01a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a01e:	bf04      	itt	eq
 800a020:	009b      	lsleq	r3, r3, #2
 800a022:	3002      	addeq	r0, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	db06      	blt.n	800a036 <__hi0bits+0x3c>
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	d503      	bpl.n	800a034 <__hi0bits+0x3a>
 800a02c:	3001      	adds	r0, #1
 800a02e:	4770      	bx	lr
 800a030:	2000      	movs	r0, #0
 800a032:	e7e8      	b.n	800a006 <__hi0bits+0xc>
 800a034:	2020      	movs	r0, #32
 800a036:	4770      	bx	lr

0800a038 <__lo0bits>:
 800a038:	6803      	ldr	r3, [r0, #0]
 800a03a:	f013 0207 	ands.w	r2, r3, #7
 800a03e:	4601      	mov	r1, r0
 800a040:	d00b      	beq.n	800a05a <__lo0bits+0x22>
 800a042:	07da      	lsls	r2, r3, #31
 800a044:	d423      	bmi.n	800a08e <__lo0bits+0x56>
 800a046:	0798      	lsls	r0, r3, #30
 800a048:	bf49      	itett	mi
 800a04a:	085b      	lsrmi	r3, r3, #1
 800a04c:	089b      	lsrpl	r3, r3, #2
 800a04e:	2001      	movmi	r0, #1
 800a050:	600b      	strmi	r3, [r1, #0]
 800a052:	bf5c      	itt	pl
 800a054:	600b      	strpl	r3, [r1, #0]
 800a056:	2002      	movpl	r0, #2
 800a058:	4770      	bx	lr
 800a05a:	b298      	uxth	r0, r3
 800a05c:	b9a8      	cbnz	r0, 800a08a <__lo0bits+0x52>
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	2010      	movs	r0, #16
 800a062:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a066:	bf04      	itt	eq
 800a068:	0a1b      	lsreq	r3, r3, #8
 800a06a:	3008      	addeq	r0, #8
 800a06c:	071a      	lsls	r2, r3, #28
 800a06e:	bf04      	itt	eq
 800a070:	091b      	lsreq	r3, r3, #4
 800a072:	3004      	addeq	r0, #4
 800a074:	079a      	lsls	r2, r3, #30
 800a076:	bf04      	itt	eq
 800a078:	089b      	lsreq	r3, r3, #2
 800a07a:	3002      	addeq	r0, #2
 800a07c:	07da      	lsls	r2, r3, #31
 800a07e:	d402      	bmi.n	800a086 <__lo0bits+0x4e>
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	d006      	beq.n	800a092 <__lo0bits+0x5a>
 800a084:	3001      	adds	r0, #1
 800a086:	600b      	str	r3, [r1, #0]
 800a088:	4770      	bx	lr
 800a08a:	4610      	mov	r0, r2
 800a08c:	e7e9      	b.n	800a062 <__lo0bits+0x2a>
 800a08e:	2000      	movs	r0, #0
 800a090:	4770      	bx	lr
 800a092:	2020      	movs	r0, #32
 800a094:	4770      	bx	lr

0800a096 <__i2b>:
 800a096:	b510      	push	{r4, lr}
 800a098:	460c      	mov	r4, r1
 800a09a:	2101      	movs	r1, #1
 800a09c:	f7ff ff27 	bl	8009eee <_Balloc>
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	6144      	str	r4, [r0, #20]
 800a0a4:	6102      	str	r2, [r0, #16]
 800a0a6:	bd10      	pop	{r4, pc}

0800a0a8 <__multiply>:
 800a0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	690a      	ldr	r2, [r1, #16]
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	bfb8      	it	lt
 800a0b6:	460b      	movlt	r3, r1
 800a0b8:	4688      	mov	r8, r1
 800a0ba:	bfbc      	itt	lt
 800a0bc:	46a0      	movlt	r8, r4
 800a0be:	461c      	movlt	r4, r3
 800a0c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a0c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0d0:	eb07 0609 	add.w	r6, r7, r9
 800a0d4:	42b3      	cmp	r3, r6
 800a0d6:	bfb8      	it	lt
 800a0d8:	3101      	addlt	r1, #1
 800a0da:	f7ff ff08 	bl	8009eee <_Balloc>
 800a0de:	f100 0514 	add.w	r5, r0, #20
 800a0e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4573      	cmp	r3, lr
 800a0ec:	d316      	bcc.n	800a11c <__multiply+0x74>
 800a0ee:	f104 0214 	add.w	r2, r4, #20
 800a0f2:	f108 0114 	add.w	r1, r8, #20
 800a0f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a0fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	9b00      	ldr	r3, [sp, #0]
 800a102:	9201      	str	r2, [sp, #4]
 800a104:	4293      	cmp	r3, r2
 800a106:	d80c      	bhi.n	800a122 <__multiply+0x7a>
 800a108:	2e00      	cmp	r6, #0
 800a10a:	dd03      	ble.n	800a114 <__multiply+0x6c>
 800a10c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a110:	2b00      	cmp	r3, #0
 800a112:	d05d      	beq.n	800a1d0 <__multiply+0x128>
 800a114:	6106      	str	r6, [r0, #16]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	f843 2b04 	str.w	r2, [r3], #4
 800a120:	e7e3      	b.n	800a0ea <__multiply+0x42>
 800a122:	f8b2 b000 	ldrh.w	fp, [r2]
 800a126:	f1bb 0f00 	cmp.w	fp, #0
 800a12a:	d023      	beq.n	800a174 <__multiply+0xcc>
 800a12c:	4689      	mov	r9, r1
 800a12e:	46ac      	mov	ip, r5
 800a130:	f04f 0800 	mov.w	r8, #0
 800a134:	f859 4b04 	ldr.w	r4, [r9], #4
 800a138:	f8dc a000 	ldr.w	sl, [ip]
 800a13c:	b2a3      	uxth	r3, r4
 800a13e:	fa1f fa8a 	uxth.w	sl, sl
 800a142:	fb0b a303 	mla	r3, fp, r3, sl
 800a146:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a14a:	f8dc 4000 	ldr.w	r4, [ip]
 800a14e:	4443      	add	r3, r8
 800a150:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a154:	fb0b 840a 	mla	r4, fp, sl, r8
 800a158:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a15c:	46e2      	mov	sl, ip
 800a15e:	b29b      	uxth	r3, r3
 800a160:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a164:	454f      	cmp	r7, r9
 800a166:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a16a:	f84a 3b04 	str.w	r3, [sl], #4
 800a16e:	d82b      	bhi.n	800a1c8 <__multiply+0x120>
 800a170:	f8cc 8004 	str.w	r8, [ip, #4]
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a17a:	3204      	adds	r2, #4
 800a17c:	f1ba 0f00 	cmp.w	sl, #0
 800a180:	d020      	beq.n	800a1c4 <__multiply+0x11c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	4689      	mov	r9, r1
 800a186:	46a8      	mov	r8, r5
 800a188:	f04f 0b00 	mov.w	fp, #0
 800a18c:	f8b9 c000 	ldrh.w	ip, [r9]
 800a190:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a194:	fb0a 440c 	mla	r4, sl, ip, r4
 800a198:	445c      	add	r4, fp
 800a19a:	46c4      	mov	ip, r8
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a1a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a1a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a1ae:	0c1b      	lsrs	r3, r3, #16
 800a1b0:	fb0a b303 	mla	r3, sl, r3, fp
 800a1b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a1b8:	454f      	cmp	r7, r9
 800a1ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a1be:	d805      	bhi.n	800a1cc <__multiply+0x124>
 800a1c0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a1c4:	3504      	adds	r5, #4
 800a1c6:	e79b      	b.n	800a100 <__multiply+0x58>
 800a1c8:	46d4      	mov	ip, sl
 800a1ca:	e7b3      	b.n	800a134 <__multiply+0x8c>
 800a1cc:	46e0      	mov	r8, ip
 800a1ce:	e7dd      	b.n	800a18c <__multiply+0xe4>
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	e799      	b.n	800a108 <__multiply+0x60>

0800a1d4 <__pow5mult>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	4615      	mov	r5, r2
 800a1da:	f012 0203 	ands.w	r2, r2, #3
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	d007      	beq.n	800a1f4 <__pow5mult+0x20>
 800a1e4:	3a01      	subs	r2, #1
 800a1e6:	4c21      	ldr	r4, [pc, #132]	; (800a26c <__pow5mult+0x98>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ee:	f7ff fec9 	bl	8009f84 <__multadd>
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	10ad      	asrs	r5, r5, #2
 800a1f6:	d035      	beq.n	800a264 <__pow5mult+0x90>
 800a1f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1fa:	b93c      	cbnz	r4, 800a20c <__pow5mult+0x38>
 800a1fc:	2010      	movs	r0, #16
 800a1fe:	f7fe fad3 	bl	80087a8 <malloc>
 800a202:	6270      	str	r0, [r6, #36]	; 0x24
 800a204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a208:	6004      	str	r4, [r0, #0]
 800a20a:	60c4      	str	r4, [r0, #12]
 800a20c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a214:	b94c      	cbnz	r4, 800a22a <__pow5mult+0x56>
 800a216:	f240 2171 	movw	r1, #625	; 0x271
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ff3b 	bl	800a096 <__i2b>
 800a220:	2300      	movs	r3, #0
 800a222:	f8c8 0008 	str.w	r0, [r8, #8]
 800a226:	4604      	mov	r4, r0
 800a228:	6003      	str	r3, [r0, #0]
 800a22a:	f04f 0800 	mov.w	r8, #0
 800a22e:	07eb      	lsls	r3, r5, #31
 800a230:	d50a      	bpl.n	800a248 <__pow5mult+0x74>
 800a232:	4639      	mov	r1, r7
 800a234:	4622      	mov	r2, r4
 800a236:	4630      	mov	r0, r6
 800a238:	f7ff ff36 	bl	800a0a8 <__multiply>
 800a23c:	4639      	mov	r1, r7
 800a23e:	4681      	mov	r9, r0
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff fe88 	bl	8009f56 <_Bfree>
 800a246:	464f      	mov	r7, r9
 800a248:	106d      	asrs	r5, r5, #1
 800a24a:	d00b      	beq.n	800a264 <__pow5mult+0x90>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	b938      	cbnz	r0, 800a260 <__pow5mult+0x8c>
 800a250:	4622      	mov	r2, r4
 800a252:	4621      	mov	r1, r4
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff ff27 	bl	800a0a8 <__multiply>
 800a25a:	6020      	str	r0, [r4, #0]
 800a25c:	f8c0 8000 	str.w	r8, [r0]
 800a260:	4604      	mov	r4, r0
 800a262:	e7e4      	b.n	800a22e <__pow5mult+0x5a>
 800a264:	4638      	mov	r0, r7
 800a266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26a:	bf00      	nop
 800a26c:	0800af48 	.word	0x0800af48

0800a270 <__lshift>:
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	460c      	mov	r4, r1
 800a276:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	6849      	ldr	r1, [r1, #4]
 800a27e:	eb0a 0903 	add.w	r9, sl, r3
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	4607      	mov	r7, r0
 800a286:	4616      	mov	r6, r2
 800a288:	f109 0501 	add.w	r5, r9, #1
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	db32      	blt.n	800a2f6 <__lshift+0x86>
 800a290:	4638      	mov	r0, r7
 800a292:	f7ff fe2c 	bl	8009eee <_Balloc>
 800a296:	2300      	movs	r3, #0
 800a298:	4680      	mov	r8, r0
 800a29a:	f100 0114 	add.w	r1, r0, #20
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4553      	cmp	r3, sl
 800a2a2:	db2b      	blt.n	800a2fc <__lshift+0x8c>
 800a2a4:	6920      	ldr	r0, [r4, #16]
 800a2a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2aa:	f104 0314 	add.w	r3, r4, #20
 800a2ae:	f016 021f 	ands.w	r2, r6, #31
 800a2b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2ba:	d025      	beq.n	800a308 <__lshift+0x98>
 800a2bc:	f1c2 0e20 	rsb	lr, r2, #32
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	681e      	ldr	r6, [r3, #0]
 800a2c4:	468a      	mov	sl, r1
 800a2c6:	4096      	lsls	r6, r2
 800a2c8:	4330      	orrs	r0, r6
 800a2ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a2ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800a2d2:	459c      	cmp	ip, r3
 800a2d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a2d8:	d814      	bhi.n	800a304 <__lshift+0x94>
 800a2da:	6048      	str	r0, [r1, #4]
 800a2dc:	b108      	cbz	r0, 800a2e2 <__lshift+0x72>
 800a2de:	f109 0502 	add.w	r5, r9, #2
 800a2e2:	3d01      	subs	r5, #1
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	f7ff fe33 	bl	8009f56 <_Bfree>
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f6:	3101      	adds	r1, #1
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	e7c7      	b.n	800a28c <__lshift+0x1c>
 800a2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a300:	3301      	adds	r3, #1
 800a302:	e7cd      	b.n	800a2a0 <__lshift+0x30>
 800a304:	4651      	mov	r1, sl
 800a306:	e7dc      	b.n	800a2c2 <__lshift+0x52>
 800a308:	3904      	subs	r1, #4
 800a30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a312:	459c      	cmp	ip, r3
 800a314:	d8f9      	bhi.n	800a30a <__lshift+0x9a>
 800a316:	e7e4      	b.n	800a2e2 <__lshift+0x72>

0800a318 <__mcmp>:
 800a318:	6903      	ldr	r3, [r0, #16]
 800a31a:	690a      	ldr	r2, [r1, #16]
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	b530      	push	{r4, r5, lr}
 800a320:	d10c      	bne.n	800a33c <__mcmp+0x24>
 800a322:	0092      	lsls	r2, r2, #2
 800a324:	3014      	adds	r0, #20
 800a326:	3114      	adds	r1, #20
 800a328:	1884      	adds	r4, r0, r2
 800a32a:	4411      	add	r1, r2
 800a32c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a334:	4295      	cmp	r5, r2
 800a336:	d003      	beq.n	800a340 <__mcmp+0x28>
 800a338:	d305      	bcc.n	800a346 <__mcmp+0x2e>
 800a33a:	2301      	movs	r3, #1
 800a33c:	4618      	mov	r0, r3
 800a33e:	bd30      	pop	{r4, r5, pc}
 800a340:	42a0      	cmp	r0, r4
 800a342:	d3f3      	bcc.n	800a32c <__mcmp+0x14>
 800a344:	e7fa      	b.n	800a33c <__mcmp+0x24>
 800a346:	f04f 33ff 	mov.w	r3, #4294967295
 800a34a:	e7f7      	b.n	800a33c <__mcmp+0x24>

0800a34c <__mdiff>:
 800a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a350:	460d      	mov	r5, r1
 800a352:	4607      	mov	r7, r0
 800a354:	4611      	mov	r1, r2
 800a356:	4628      	mov	r0, r5
 800a358:	4614      	mov	r4, r2
 800a35a:	f7ff ffdd 	bl	800a318 <__mcmp>
 800a35e:	1e06      	subs	r6, r0, #0
 800a360:	d108      	bne.n	800a374 <__mdiff+0x28>
 800a362:	4631      	mov	r1, r6
 800a364:	4638      	mov	r0, r7
 800a366:	f7ff fdc2 	bl	8009eee <_Balloc>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	bfa4      	itt	ge
 800a376:	4623      	movge	r3, r4
 800a378:	462c      	movge	r4, r5
 800a37a:	4638      	mov	r0, r7
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	bfa6      	itte	ge
 800a380:	461d      	movge	r5, r3
 800a382:	2600      	movge	r6, #0
 800a384:	2601      	movlt	r6, #1
 800a386:	f7ff fdb2 	bl	8009eee <_Balloc>
 800a38a:	692b      	ldr	r3, [r5, #16]
 800a38c:	60c6      	str	r6, [r0, #12]
 800a38e:	6926      	ldr	r6, [r4, #16]
 800a390:	f105 0914 	add.w	r9, r5, #20
 800a394:	f104 0214 	add.w	r2, r4, #20
 800a398:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a39c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a3a0:	f100 0514 	add.w	r5, r0, #20
 800a3a4:	f04f 0e00 	mov.w	lr, #0
 800a3a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a3ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3b0:	fa1e f18a 	uxtah	r1, lr, sl
 800a3b4:	b2a3      	uxth	r3, r4
 800a3b6:	1ac9      	subs	r1, r1, r3
 800a3b8:	0c23      	lsrs	r3, r4, #16
 800a3ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a3be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a3c8:	45c8      	cmp	r8, r9
 800a3ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3ce:	4694      	mov	ip, r2
 800a3d0:	f845 3b04 	str.w	r3, [r5], #4
 800a3d4:	d8e8      	bhi.n	800a3a8 <__mdiff+0x5c>
 800a3d6:	45bc      	cmp	ip, r7
 800a3d8:	d304      	bcc.n	800a3e4 <__mdiff+0x98>
 800a3da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a3de:	b183      	cbz	r3, 800a402 <__mdiff+0xb6>
 800a3e0:	6106      	str	r6, [r0, #16]
 800a3e2:	e7c5      	b.n	800a370 <__mdiff+0x24>
 800a3e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a3e8:	fa1e f381 	uxtah	r3, lr, r1
 800a3ec:	141a      	asrs	r2, r3, #16
 800a3ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a3fc:	f845 3b04 	str.w	r3, [r5], #4
 800a400:	e7e9      	b.n	800a3d6 <__mdiff+0x8a>
 800a402:	3e01      	subs	r6, #1
 800a404:	e7e9      	b.n	800a3da <__mdiff+0x8e>

0800a406 <__d2b>:
 800a406:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a40a:	460e      	mov	r6, r1
 800a40c:	2101      	movs	r1, #1
 800a40e:	ec59 8b10 	vmov	r8, r9, d0
 800a412:	4615      	mov	r5, r2
 800a414:	f7ff fd6b 	bl	8009eee <_Balloc>
 800a418:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a41c:	4607      	mov	r7, r0
 800a41e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a422:	bb34      	cbnz	r4, 800a472 <__d2b+0x6c>
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	f1b8 0300 	subs.w	r3, r8, #0
 800a42a:	d027      	beq.n	800a47c <__d2b+0x76>
 800a42c:	a802      	add	r0, sp, #8
 800a42e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a432:	f7ff fe01 	bl	800a038 <__lo0bits>
 800a436:	9900      	ldr	r1, [sp, #0]
 800a438:	b1f0      	cbz	r0, 800a478 <__d2b+0x72>
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	f1c0 0320 	rsb	r3, r0, #32
 800a440:	fa02 f303 	lsl.w	r3, r2, r3
 800a444:	430b      	orrs	r3, r1
 800a446:	40c2      	lsrs	r2, r0
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	9201      	str	r2, [sp, #4]
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	bf14      	ite	ne
 800a454:	2102      	movne	r1, #2
 800a456:	2101      	moveq	r1, #1
 800a458:	6139      	str	r1, [r7, #16]
 800a45a:	b1c4      	cbz	r4, 800a48e <__d2b+0x88>
 800a45c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a460:	4404      	add	r4, r0
 800a462:	6034      	str	r4, [r6, #0]
 800a464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a468:	6028      	str	r0, [r5, #0]
 800a46a:	4638      	mov	r0, r7
 800a46c:	b003      	add	sp, #12
 800a46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a476:	e7d5      	b.n	800a424 <__d2b+0x1e>
 800a478:	6179      	str	r1, [r7, #20]
 800a47a:	e7e7      	b.n	800a44c <__d2b+0x46>
 800a47c:	a801      	add	r0, sp, #4
 800a47e:	f7ff fddb 	bl	800a038 <__lo0bits>
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	2101      	movs	r1, #1
 800a488:	6139      	str	r1, [r7, #16]
 800a48a:	3020      	adds	r0, #32
 800a48c:	e7e5      	b.n	800a45a <__d2b+0x54>
 800a48e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a492:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a496:	6030      	str	r0, [r6, #0]
 800a498:	6918      	ldr	r0, [r3, #16]
 800a49a:	f7ff fdae 	bl	8009ffa <__hi0bits>
 800a49e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a4a2:	e7e1      	b.n	800a468 <__d2b+0x62>

0800a4a4 <_calloc_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	fb02 f401 	mul.w	r4, r2, r1
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	f7fe f9da 	bl	8008864 <_malloc_r>
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	b118      	cbz	r0, 800a4bc <_calloc_r+0x18>
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	f7fe f97e 	bl	80087b8 <memset>
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}

0800a4c0 <__ssputs_r>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	688e      	ldr	r6, [r1, #8]
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	4690      	mov	r8, r2
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	d837      	bhi.n	800a542 <__ssputs_r+0x82>
 800a4d2:	898a      	ldrh	r2, [r1, #12]
 800a4d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4d8:	d031      	beq.n	800a53e <__ssputs_r+0x7e>
 800a4da:	6825      	ldr	r5, [r4, #0]
 800a4dc:	6909      	ldr	r1, [r1, #16]
 800a4de:	1a6f      	subs	r7, r5, r1
 800a4e0:	6965      	ldr	r5, [r4, #20]
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a4ec:	f109 0301 	add.w	r3, r9, #1
 800a4f0:	443b      	add	r3, r7
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	bf38      	it	cc
 800a4f6:	461d      	movcc	r5, r3
 800a4f8:	0553      	lsls	r3, r2, #21
 800a4fa:	d530      	bpl.n	800a55e <__ssputs_r+0x9e>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	f7fe f9b1 	bl	8008864 <_malloc_r>
 800a502:	4606      	mov	r6, r0
 800a504:	b950      	cbnz	r0, 800a51c <__ssputs_r+0x5c>
 800a506:	230c      	movs	r3, #12
 800a508:	f8ca 3000 	str.w	r3, [sl]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	463a      	mov	r2, r7
 800a51e:	6921      	ldr	r1, [r4, #16]
 800a520:	f7ff fcd8 	bl	8009ed4 <memcpy>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	6165      	str	r5, [r4, #20]
 800a534:	443e      	add	r6, r7
 800a536:	1bed      	subs	r5, r5, r7
 800a538:	6026      	str	r6, [r4, #0]
 800a53a:	60a5      	str	r5, [r4, #8]
 800a53c:	464e      	mov	r6, r9
 800a53e:	454e      	cmp	r6, r9
 800a540:	d900      	bls.n	800a544 <__ssputs_r+0x84>
 800a542:	464e      	mov	r6, r9
 800a544:	4632      	mov	r2, r6
 800a546:	4641      	mov	r1, r8
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	f000 f91d 	bl	800a788 <memmove>
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	1b9b      	subs	r3, r3, r6
 800a552:	60a3      	str	r3, [r4, #8]
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	441e      	add	r6, r3
 800a558:	6026      	str	r6, [r4, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7dc      	b.n	800a518 <__ssputs_r+0x58>
 800a55e:	462a      	mov	r2, r5
 800a560:	f000 f92b 	bl	800a7ba <_realloc_r>
 800a564:	4606      	mov	r6, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d1e2      	bne.n	800a530 <__ssputs_r+0x70>
 800a56a:	6921      	ldr	r1, [r4, #16]
 800a56c:	4650      	mov	r0, sl
 800a56e:	f7fe f92b 	bl	80087c8 <_free_r>
 800a572:	e7c8      	b.n	800a506 <__ssputs_r+0x46>

0800a574 <_svfiprintf_r>:
 800a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a578:	461d      	mov	r5, r3
 800a57a:	898b      	ldrh	r3, [r1, #12]
 800a57c:	061f      	lsls	r7, r3, #24
 800a57e:	b09d      	sub	sp, #116	; 0x74
 800a580:	4680      	mov	r8, r0
 800a582:	460c      	mov	r4, r1
 800a584:	4616      	mov	r6, r2
 800a586:	d50f      	bpl.n	800a5a8 <_svfiprintf_r+0x34>
 800a588:	690b      	ldr	r3, [r1, #16]
 800a58a:	b96b      	cbnz	r3, 800a5a8 <_svfiprintf_r+0x34>
 800a58c:	2140      	movs	r1, #64	; 0x40
 800a58e:	f7fe f969 	bl	8008864 <_malloc_r>
 800a592:	6020      	str	r0, [r4, #0]
 800a594:	6120      	str	r0, [r4, #16]
 800a596:	b928      	cbnz	r0, 800a5a4 <_svfiprintf_r+0x30>
 800a598:	230c      	movs	r3, #12
 800a59a:	f8c8 3000 	str.w	r3, [r8]
 800a59e:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a2:	e0c8      	b.n	800a736 <_svfiprintf_r+0x1c2>
 800a5a4:	2340      	movs	r3, #64	; 0x40
 800a5a6:	6163      	str	r3, [r4, #20]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5b2:	2330      	movs	r3, #48	; 0x30
 800a5b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5b8:	9503      	str	r5, [sp, #12]
 800a5ba:	f04f 0b01 	mov.w	fp, #1
 800a5be:	4637      	mov	r7, r6
 800a5c0:	463d      	mov	r5, r7
 800a5c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a5c6:	b10b      	cbz	r3, 800a5cc <_svfiprintf_r+0x58>
 800a5c8:	2b25      	cmp	r3, #37	; 0x25
 800a5ca:	d13e      	bne.n	800a64a <_svfiprintf_r+0xd6>
 800a5cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a5d0:	d00b      	beq.n	800a5ea <_svfiprintf_r+0x76>
 800a5d2:	4653      	mov	r3, sl
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4640      	mov	r0, r8
 800a5da:	f7ff ff71 	bl	800a4c0 <__ssputs_r>
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f000 80a4 	beq.w	800a72c <_svfiprintf_r+0x1b8>
 800a5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e6:	4453      	add	r3, sl
 800a5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ea:	783b      	ldrb	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 809d 	beq.w	800a72c <_svfiprintf_r+0x1b8>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a604:	931a      	str	r3, [sp, #104]	; 0x68
 800a606:	462f      	mov	r7, r5
 800a608:	2205      	movs	r2, #5
 800a60a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a60e:	4850      	ldr	r0, [pc, #320]	; (800a750 <_svfiprintf_r+0x1dc>)
 800a610:	f7f5 fdf6 	bl	8000200 <memchr>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	b9d0      	cbnz	r0, 800a64e <_svfiprintf_r+0xda>
 800a618:	06d9      	lsls	r1, r3, #27
 800a61a:	bf44      	itt	mi
 800a61c:	2220      	movmi	r2, #32
 800a61e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a622:	071a      	lsls	r2, r3, #28
 800a624:	bf44      	itt	mi
 800a626:	222b      	movmi	r2, #43	; 0x2b
 800a628:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a62c:	782a      	ldrb	r2, [r5, #0]
 800a62e:	2a2a      	cmp	r2, #42	; 0x2a
 800a630:	d015      	beq.n	800a65e <_svfiprintf_r+0xea>
 800a632:	9a07      	ldr	r2, [sp, #28]
 800a634:	462f      	mov	r7, r5
 800a636:	2000      	movs	r0, #0
 800a638:	250a      	movs	r5, #10
 800a63a:	4639      	mov	r1, r7
 800a63c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a640:	3b30      	subs	r3, #48	; 0x30
 800a642:	2b09      	cmp	r3, #9
 800a644:	d94d      	bls.n	800a6e2 <_svfiprintf_r+0x16e>
 800a646:	b1b8      	cbz	r0, 800a678 <_svfiprintf_r+0x104>
 800a648:	e00f      	b.n	800a66a <_svfiprintf_r+0xf6>
 800a64a:	462f      	mov	r7, r5
 800a64c:	e7b8      	b.n	800a5c0 <_svfiprintf_r+0x4c>
 800a64e:	4a40      	ldr	r2, [pc, #256]	; (800a750 <_svfiprintf_r+0x1dc>)
 800a650:	1a80      	subs	r0, r0, r2
 800a652:	fa0b f000 	lsl.w	r0, fp, r0
 800a656:	4318      	orrs	r0, r3
 800a658:	9004      	str	r0, [sp, #16]
 800a65a:	463d      	mov	r5, r7
 800a65c:	e7d3      	b.n	800a606 <_svfiprintf_r+0x92>
 800a65e:	9a03      	ldr	r2, [sp, #12]
 800a660:	1d11      	adds	r1, r2, #4
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	9103      	str	r1, [sp, #12]
 800a666:	2a00      	cmp	r2, #0
 800a668:	db01      	blt.n	800a66e <_svfiprintf_r+0xfa>
 800a66a:	9207      	str	r2, [sp, #28]
 800a66c:	e004      	b.n	800a678 <_svfiprintf_r+0x104>
 800a66e:	4252      	negs	r2, r2
 800a670:	f043 0302 	orr.w	r3, r3, #2
 800a674:	9207      	str	r2, [sp, #28]
 800a676:	9304      	str	r3, [sp, #16]
 800a678:	783b      	ldrb	r3, [r7, #0]
 800a67a:	2b2e      	cmp	r3, #46	; 0x2e
 800a67c:	d10c      	bne.n	800a698 <_svfiprintf_r+0x124>
 800a67e:	787b      	ldrb	r3, [r7, #1]
 800a680:	2b2a      	cmp	r3, #42	; 0x2a
 800a682:	d133      	bne.n	800a6ec <_svfiprintf_r+0x178>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	9203      	str	r2, [sp, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfb8      	it	lt
 800a690:	f04f 33ff 	movlt.w	r3, #4294967295
 800a694:	3702      	adds	r7, #2
 800a696:	9305      	str	r3, [sp, #20]
 800a698:	4d2e      	ldr	r5, [pc, #184]	; (800a754 <_svfiprintf_r+0x1e0>)
 800a69a:	7839      	ldrb	r1, [r7, #0]
 800a69c:	2203      	movs	r2, #3
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7f5 fdae 	bl	8000200 <memchr>
 800a6a4:	b138      	cbz	r0, 800a6b6 <_svfiprintf_r+0x142>
 800a6a6:	2340      	movs	r3, #64	; 0x40
 800a6a8:	1b40      	subs	r0, r0, r5
 800a6aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	4303      	orrs	r3, r0
 800a6b2:	3701      	adds	r7, #1
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	7839      	ldrb	r1, [r7, #0]
 800a6b8:	4827      	ldr	r0, [pc, #156]	; (800a758 <_svfiprintf_r+0x1e4>)
 800a6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6be:	2206      	movs	r2, #6
 800a6c0:	1c7e      	adds	r6, r7, #1
 800a6c2:	f7f5 fd9d 	bl	8000200 <memchr>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d038      	beq.n	800a73c <_svfiprintf_r+0x1c8>
 800a6ca:	4b24      	ldr	r3, [pc, #144]	; (800a75c <_svfiprintf_r+0x1e8>)
 800a6cc:	bb13      	cbnz	r3, 800a714 <_svfiprintf_r+0x1a0>
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	f023 0307 	bic.w	r3, r3, #7
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	9303      	str	r3, [sp, #12]
 800a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6dc:	444b      	add	r3, r9
 800a6de:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e0:	e76d      	b.n	800a5be <_svfiprintf_r+0x4a>
 800a6e2:	fb05 3202 	mla	r2, r5, r2, r3
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	e7a6      	b.n	800a63a <_svfiprintf_r+0xc6>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	3701      	adds	r7, #1
 800a6f0:	9305      	str	r3, [sp, #20]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	250a      	movs	r5, #10
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6fc:	3a30      	subs	r2, #48	; 0x30
 800a6fe:	2a09      	cmp	r2, #9
 800a700:	d903      	bls.n	800a70a <_svfiprintf_r+0x196>
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0c8      	beq.n	800a698 <_svfiprintf_r+0x124>
 800a706:	9105      	str	r1, [sp, #20]
 800a708:	e7c6      	b.n	800a698 <_svfiprintf_r+0x124>
 800a70a:	fb05 2101 	mla	r1, r5, r1, r2
 800a70e:	2301      	movs	r3, #1
 800a710:	4607      	mov	r7, r0
 800a712:	e7f0      	b.n	800a6f6 <_svfiprintf_r+0x182>
 800a714:	ab03      	add	r3, sp, #12
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4622      	mov	r2, r4
 800a71a:	4b11      	ldr	r3, [pc, #68]	; (800a760 <_svfiprintf_r+0x1ec>)
 800a71c:	a904      	add	r1, sp, #16
 800a71e:	4640      	mov	r0, r8
 800a720:	f7fe f98e 	bl	8008a40 <_printf_float>
 800a724:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a728:	4681      	mov	r9, r0
 800a72a:	d1d6      	bne.n	800a6da <_svfiprintf_r+0x166>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	065b      	lsls	r3, r3, #25
 800a730:	f53f af35 	bmi.w	800a59e <_svfiprintf_r+0x2a>
 800a734:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a736:	b01d      	add	sp, #116	; 0x74
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4622      	mov	r2, r4
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <_svfiprintf_r+0x1ec>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	4640      	mov	r0, r8
 800a748:	f7fe fc30 	bl	8008fac <_printf_i>
 800a74c:	e7ea      	b.n	800a724 <_svfiprintf_r+0x1b0>
 800a74e:	bf00      	nop
 800a750:	0800af54 	.word	0x0800af54
 800a754:	0800af5a 	.word	0x0800af5a
 800a758:	0800af5e 	.word	0x0800af5e
 800a75c:	08008a41 	.word	0x08008a41
 800a760:	0800a4c1 	.word	0x0800a4c1

0800a764 <__ascii_mbtowc>:
 800a764:	b082      	sub	sp, #8
 800a766:	b901      	cbnz	r1, 800a76a <__ascii_mbtowc+0x6>
 800a768:	a901      	add	r1, sp, #4
 800a76a:	b142      	cbz	r2, 800a77e <__ascii_mbtowc+0x1a>
 800a76c:	b14b      	cbz	r3, 800a782 <__ascii_mbtowc+0x1e>
 800a76e:	7813      	ldrb	r3, [r2, #0]
 800a770:	600b      	str	r3, [r1, #0]
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	1c10      	adds	r0, r2, #0
 800a776:	bf18      	it	ne
 800a778:	2001      	movne	r0, #1
 800a77a:	b002      	add	sp, #8
 800a77c:	4770      	bx	lr
 800a77e:	4610      	mov	r0, r2
 800a780:	e7fb      	b.n	800a77a <__ascii_mbtowc+0x16>
 800a782:	f06f 0001 	mvn.w	r0, #1
 800a786:	e7f8      	b.n	800a77a <__ascii_mbtowc+0x16>

0800a788 <memmove>:
 800a788:	4288      	cmp	r0, r1
 800a78a:	b510      	push	{r4, lr}
 800a78c:	eb01 0302 	add.w	r3, r1, r2
 800a790:	d807      	bhi.n	800a7a2 <memmove+0x1a>
 800a792:	1e42      	subs	r2, r0, #1
 800a794:	4299      	cmp	r1, r3
 800a796:	d00a      	beq.n	800a7ae <memmove+0x26>
 800a798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a79c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a7a0:	e7f8      	b.n	800a794 <memmove+0xc>
 800a7a2:	4283      	cmp	r3, r0
 800a7a4:	d9f5      	bls.n	800a792 <memmove+0xa>
 800a7a6:	1881      	adds	r1, r0, r2
 800a7a8:	1ad2      	subs	r2, r2, r3
 800a7aa:	42d3      	cmn	r3, r2
 800a7ac:	d100      	bne.n	800a7b0 <memmove+0x28>
 800a7ae:	bd10      	pop	{r4, pc}
 800a7b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a7b8:	e7f7      	b.n	800a7aa <memmove+0x22>

0800a7ba <_realloc_r>:
 800a7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7bc:	4607      	mov	r7, r0
 800a7be:	4614      	mov	r4, r2
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	b921      	cbnz	r1, 800a7ce <_realloc_r+0x14>
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7ca:	f7fe b84b 	b.w	8008864 <_malloc_r>
 800a7ce:	b922      	cbnz	r2, 800a7da <_realloc_r+0x20>
 800a7d0:	f7fd fffa 	bl	80087c8 <_free_r>
 800a7d4:	4625      	mov	r5, r4
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7da:	f000 f821 	bl	800a820 <_malloc_usable_size_r>
 800a7de:	42a0      	cmp	r0, r4
 800a7e0:	d20f      	bcs.n	800a802 <_realloc_r+0x48>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7fe f83d 	bl	8008864 <_malloc_r>
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d0f2      	beq.n	800a7d6 <_realloc_r+0x1c>
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	f7ff fb6e 	bl	8009ed4 <memcpy>
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7fd ffe4 	bl	80087c8 <_free_r>
 800a800:	e7e9      	b.n	800a7d6 <_realloc_r+0x1c>
 800a802:	4635      	mov	r5, r6
 800a804:	e7e7      	b.n	800a7d6 <_realloc_r+0x1c>

0800a806 <__ascii_wctomb>:
 800a806:	b149      	cbz	r1, 800a81c <__ascii_wctomb+0x16>
 800a808:	2aff      	cmp	r2, #255	; 0xff
 800a80a:	bf85      	ittet	hi
 800a80c:	238a      	movhi	r3, #138	; 0x8a
 800a80e:	6003      	strhi	r3, [r0, #0]
 800a810:	700a      	strbls	r2, [r1, #0]
 800a812:	f04f 30ff 	movhi.w	r0, #4294967295
 800a816:	bf98      	it	ls
 800a818:	2001      	movls	r0, #1
 800a81a:	4770      	bx	lr
 800a81c:	4608      	mov	r0, r1
 800a81e:	4770      	bx	lr

0800a820 <_malloc_usable_size_r>:
 800a820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a824:	1f18      	subs	r0, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfbc      	itt	lt
 800a82a:	580b      	ldrlt	r3, [r1, r0]
 800a82c:	18c0      	addlt	r0, r0, r3
 800a82e:	4770      	bx	lr

0800a830 <_init>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	bf00      	nop
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr

0800a83c <_fini>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr
